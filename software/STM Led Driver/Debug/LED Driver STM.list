
LED Driver STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071cc  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  0800728c  0800728c  0001728c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007444  08007444  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08007444  08007444  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007444  08007444  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007444  08007444  00017444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007448  08007448  00017448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800744c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001170  2000000c  08007458  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000117c  08007458  0002117c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b82  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000033c7  00000000  00000000  00038bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001610  00000000  00000000  0003bf80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001488  00000000  00000000  0003d590  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000056ae  00000000  00000000  0003ea18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011adf  00000000  00000000  000440c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0005fca0  00000000  00000000  00055ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b5845  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005330  00000000  00000000  000b58c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007274 	.word	0x08007274

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08007274 	.word	0x08007274

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c08      	adds	r0, r1, #0
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fb6d 	bl	8000908 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 faef 	bl	800081c <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fb5f 	bl	8000908 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fb55 	bl	8000908 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fafd 	bl	800086c <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 faf3 	bl	800086c <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_f2uiz>:
 8000294:	219e      	movs	r1, #158	; 0x9e
 8000296:	b510      	push	{r4, lr}
 8000298:	05c9      	lsls	r1, r1, #23
 800029a:	1c04      	adds	r4, r0, #0
 800029c:	f7ff fff0 	bl	8000280 <__aeabi_fcmpge>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d103      	bne.n	80002ac <__aeabi_f2uiz+0x18>
 80002a4:	1c20      	adds	r0, r4, #0
 80002a6:	f000 fe75 	bl	8000f94 <__aeabi_f2iz>
 80002aa:	bd10      	pop	{r4, pc}
 80002ac:	219e      	movs	r1, #158	; 0x9e
 80002ae:	1c20      	adds	r0, r4, #0
 80002b0:	05c9      	lsls	r1, r1, #23
 80002b2:	f000 fcab 	bl	8000c0c <__aeabi_fsub>
 80002b6:	f000 fe6d 	bl	8000f94 <__aeabi_f2iz>
 80002ba:	2380      	movs	r3, #128	; 0x80
 80002bc:	061b      	lsls	r3, r3, #24
 80002be:	469c      	mov	ip, r3
 80002c0:	4460      	add	r0, ip
 80002c2:	e7f2      	b.n	80002aa <__aeabi_f2uiz+0x16>

080002c4 <__aeabi_fadd>:
 80002c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c6:	4647      	mov	r7, r8
 80002c8:	46ce      	mov	lr, r9
 80002ca:	0243      	lsls	r3, r0, #9
 80002cc:	0a5b      	lsrs	r3, r3, #9
 80002ce:	0044      	lsls	r4, r0, #1
 80002d0:	0fc2      	lsrs	r2, r0, #31
 80002d2:	469c      	mov	ip, r3
 80002d4:	0048      	lsls	r0, r1, #1
 80002d6:	00dd      	lsls	r5, r3, #3
 80002d8:	024b      	lsls	r3, r1, #9
 80002da:	0e24      	lsrs	r4, r4, #24
 80002dc:	0a5b      	lsrs	r3, r3, #9
 80002de:	0e00      	lsrs	r0, r0, #24
 80002e0:	b580      	push	{r7, lr}
 80002e2:	4698      	mov	r8, r3
 80002e4:	0026      	movs	r6, r4
 80002e6:	4691      	mov	r9, r2
 80002e8:	0fc9      	lsrs	r1, r1, #31
 80002ea:	00db      	lsls	r3, r3, #3
 80002ec:	1a27      	subs	r7, r4, r0
 80002ee:	428a      	cmp	r2, r1
 80002f0:	d029      	beq.n	8000346 <__aeabi_fadd+0x82>
 80002f2:	2f00      	cmp	r7, #0
 80002f4:	dd15      	ble.n	8000322 <__aeabi_fadd+0x5e>
 80002f6:	2800      	cmp	r0, #0
 80002f8:	d14a      	bne.n	8000390 <__aeabi_fadd+0xcc>
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d000      	beq.n	8000300 <__aeabi_fadd+0x3c>
 80002fe:	e095      	b.n	800042c <__aeabi_fadd+0x168>
 8000300:	08ed      	lsrs	r5, r5, #3
 8000302:	2cff      	cmp	r4, #255	; 0xff
 8000304:	d100      	bne.n	8000308 <__aeabi_fadd+0x44>
 8000306:	e088      	b.n	800041a <__aeabi_fadd+0x156>
 8000308:	026b      	lsls	r3, r5, #9
 800030a:	0a5b      	lsrs	r3, r3, #9
 800030c:	b2e6      	uxtb	r6, r4
 800030e:	025b      	lsls	r3, r3, #9
 8000310:	05f6      	lsls	r6, r6, #23
 8000312:	0a58      	lsrs	r0, r3, #9
 8000314:	4330      	orrs	r0, r6
 8000316:	07d2      	lsls	r2, r2, #31
 8000318:	4310      	orrs	r0, r2
 800031a:	bc0c      	pop	{r2, r3}
 800031c:	4690      	mov	r8, r2
 800031e:	4699      	mov	r9, r3
 8000320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000322:	2f00      	cmp	r7, #0
 8000324:	d000      	beq.n	8000328 <__aeabi_fadd+0x64>
 8000326:	e087      	b.n	8000438 <__aeabi_fadd+0x174>
 8000328:	1c60      	adds	r0, r4, #1
 800032a:	b2c0      	uxtb	r0, r0
 800032c:	2801      	cmp	r0, #1
 800032e:	dc00      	bgt.n	8000332 <__aeabi_fadd+0x6e>
 8000330:	e0b6      	b.n	80004a0 <__aeabi_fadd+0x1dc>
 8000332:	1aee      	subs	r6, r5, r3
 8000334:	0172      	lsls	r2, r6, #5
 8000336:	d500      	bpl.n	800033a <__aeabi_fadd+0x76>
 8000338:	e0c5      	b.n	80004c6 <__aeabi_fadd+0x202>
 800033a:	2e00      	cmp	r6, #0
 800033c:	d13d      	bne.n	80003ba <__aeabi_fadd+0xf6>
 800033e:	2200      	movs	r2, #0
 8000340:	2600      	movs	r6, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e7e3      	b.n	800030e <__aeabi_fadd+0x4a>
 8000346:	2f00      	cmp	r7, #0
 8000348:	dc00      	bgt.n	800034c <__aeabi_fadd+0x88>
 800034a:	e096      	b.n	800047a <__aeabi_fadd+0x1b6>
 800034c:	2800      	cmp	r0, #0
 800034e:	d05d      	beq.n	800040c <__aeabi_fadd+0x148>
 8000350:	2cff      	cmp	r4, #255	; 0xff
 8000352:	d060      	beq.n	8000416 <__aeabi_fadd+0x152>
 8000354:	2280      	movs	r2, #128	; 0x80
 8000356:	04d2      	lsls	r2, r2, #19
 8000358:	4313      	orrs	r3, r2
 800035a:	2f1b      	cmp	r7, #27
 800035c:	dd00      	ble.n	8000360 <__aeabi_fadd+0x9c>
 800035e:	e0ec      	b.n	800053a <__aeabi_fadd+0x276>
 8000360:	2220      	movs	r2, #32
 8000362:	1bd2      	subs	r2, r2, r7
 8000364:	0018      	movs	r0, r3
 8000366:	4093      	lsls	r3, r2
 8000368:	40f8      	lsrs	r0, r7
 800036a:	1e5a      	subs	r2, r3, #1
 800036c:	4193      	sbcs	r3, r2
 800036e:	4303      	orrs	r3, r0
 8000370:	18ed      	adds	r5, r5, r3
 8000372:	016b      	lsls	r3, r5, #5
 8000374:	d57b      	bpl.n	800046e <__aeabi_fadd+0x1aa>
 8000376:	3401      	adds	r4, #1
 8000378:	2cff      	cmp	r4, #255	; 0xff
 800037a:	d100      	bne.n	800037e <__aeabi_fadd+0xba>
 800037c:	e0b7      	b.n	80004ee <__aeabi_fadd+0x22a>
 800037e:	2201      	movs	r2, #1
 8000380:	2607      	movs	r6, #7
 8000382:	402a      	ands	r2, r5
 8000384:	086b      	lsrs	r3, r5, #1
 8000386:	4d9a      	ldr	r5, [pc, #616]	; (80005f0 <__aeabi_fadd+0x32c>)
 8000388:	401d      	ands	r5, r3
 800038a:	4315      	orrs	r5, r2
 800038c:	402e      	ands	r6, r5
 800038e:	e029      	b.n	80003e4 <__aeabi_fadd+0x120>
 8000390:	2cff      	cmp	r4, #255	; 0xff
 8000392:	d0b5      	beq.n	8000300 <__aeabi_fadd+0x3c>
 8000394:	2280      	movs	r2, #128	; 0x80
 8000396:	04d2      	lsls	r2, r2, #19
 8000398:	4313      	orrs	r3, r2
 800039a:	2f1b      	cmp	r7, #27
 800039c:	dd00      	ble.n	80003a0 <__aeabi_fadd+0xdc>
 800039e:	e0b2      	b.n	8000506 <__aeabi_fadd+0x242>
 80003a0:	2220      	movs	r2, #32
 80003a2:	1bd2      	subs	r2, r2, r7
 80003a4:	0019      	movs	r1, r3
 80003a6:	4093      	lsls	r3, r2
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	1e5a      	subs	r2, r3, #1
 80003ac:	4193      	sbcs	r3, r2
 80003ae:	430b      	orrs	r3, r1
 80003b0:	1aed      	subs	r5, r5, r3
 80003b2:	016b      	lsls	r3, r5, #5
 80003b4:	d55b      	bpl.n	800046e <__aeabi_fadd+0x1aa>
 80003b6:	01ad      	lsls	r5, r5, #6
 80003b8:	09ae      	lsrs	r6, r5, #6
 80003ba:	0030      	movs	r0, r6
 80003bc:	f001 fd48 	bl	8001e50 <__clzsi2>
 80003c0:	3805      	subs	r0, #5
 80003c2:	4086      	lsls	r6, r0
 80003c4:	4284      	cmp	r4, r0
 80003c6:	dc65      	bgt.n	8000494 <__aeabi_fadd+0x1d0>
 80003c8:	1b04      	subs	r4, r0, r4
 80003ca:	0033      	movs	r3, r6
 80003cc:	2020      	movs	r0, #32
 80003ce:	3401      	adds	r4, #1
 80003d0:	40e3      	lsrs	r3, r4
 80003d2:	1b04      	subs	r4, r0, r4
 80003d4:	40a6      	lsls	r6, r4
 80003d6:	1e75      	subs	r5, r6, #1
 80003d8:	41ae      	sbcs	r6, r5
 80003da:	4333      	orrs	r3, r6
 80003dc:	2607      	movs	r6, #7
 80003de:	001d      	movs	r5, r3
 80003e0:	2400      	movs	r4, #0
 80003e2:	401e      	ands	r6, r3
 80003e4:	2201      	movs	r2, #1
 80003e6:	464b      	mov	r3, r9
 80003e8:	401a      	ands	r2, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d004      	beq.n	80003f8 <__aeabi_fadd+0x134>
 80003ee:	230f      	movs	r3, #15
 80003f0:	402b      	ands	r3, r5
 80003f2:	2b04      	cmp	r3, #4
 80003f4:	d000      	beq.n	80003f8 <__aeabi_fadd+0x134>
 80003f6:	3504      	adds	r5, #4
 80003f8:	016b      	lsls	r3, r5, #5
 80003fa:	d400      	bmi.n	80003fe <__aeabi_fadd+0x13a>
 80003fc:	e780      	b.n	8000300 <__aeabi_fadd+0x3c>
 80003fe:	3401      	adds	r4, #1
 8000400:	b2e6      	uxtb	r6, r4
 8000402:	2cff      	cmp	r4, #255	; 0xff
 8000404:	d12f      	bne.n	8000466 <__aeabi_fadd+0x1a2>
 8000406:	26ff      	movs	r6, #255	; 0xff
 8000408:	2300      	movs	r3, #0
 800040a:	e780      	b.n	800030e <__aeabi_fadd+0x4a>
 800040c:	2b00      	cmp	r3, #0
 800040e:	d152      	bne.n	80004b6 <__aeabi_fadd+0x1f2>
 8000410:	2cff      	cmp	r4, #255	; 0xff
 8000412:	d000      	beq.n	8000416 <__aeabi_fadd+0x152>
 8000414:	e774      	b.n	8000300 <__aeabi_fadd+0x3c>
 8000416:	000a      	movs	r2, r1
 8000418:	08ed      	lsrs	r5, r5, #3
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0f3      	beq.n	8000406 <__aeabi_fadd+0x142>
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	03db      	lsls	r3, r3, #15
 8000422:	432b      	orrs	r3, r5
 8000424:	025b      	lsls	r3, r3, #9
 8000426:	0a5b      	lsrs	r3, r3, #9
 8000428:	26ff      	movs	r6, #255	; 0xff
 800042a:	e770      	b.n	800030e <__aeabi_fadd+0x4a>
 800042c:	3f01      	subs	r7, #1
 800042e:	2f00      	cmp	r7, #0
 8000430:	d0be      	beq.n	80003b0 <__aeabi_fadd+0xec>
 8000432:	2cff      	cmp	r4, #255	; 0xff
 8000434:	d1b1      	bne.n	800039a <__aeabi_fadd+0xd6>
 8000436:	e763      	b.n	8000300 <__aeabi_fadd+0x3c>
 8000438:	2c00      	cmp	r4, #0
 800043a:	d047      	beq.n	80004cc <__aeabi_fadd+0x208>
 800043c:	28ff      	cmp	r0, #255	; 0xff
 800043e:	d069      	beq.n	8000514 <__aeabi_fadd+0x250>
 8000440:	2480      	movs	r4, #128	; 0x80
 8000442:	04e4      	lsls	r4, r4, #19
 8000444:	427a      	negs	r2, r7
 8000446:	4325      	orrs	r5, r4
 8000448:	2a1b      	cmp	r2, #27
 800044a:	dd00      	ble.n	800044e <__aeabi_fadd+0x18a>
 800044c:	e0c5      	b.n	80005da <__aeabi_fadd+0x316>
 800044e:	002c      	movs	r4, r5
 8000450:	2620      	movs	r6, #32
 8000452:	40d4      	lsrs	r4, r2
 8000454:	1ab2      	subs	r2, r6, r2
 8000456:	4095      	lsls	r5, r2
 8000458:	1e6a      	subs	r2, r5, #1
 800045a:	4195      	sbcs	r5, r2
 800045c:	4325      	orrs	r5, r4
 800045e:	1b5d      	subs	r5, r3, r5
 8000460:	0004      	movs	r4, r0
 8000462:	4689      	mov	r9, r1
 8000464:	e7a5      	b.n	80003b2 <__aeabi_fadd+0xee>
 8000466:	01ab      	lsls	r3, r5, #6
 8000468:	0a5b      	lsrs	r3, r3, #9
 800046a:	e750      	b.n	800030e <__aeabi_fadd+0x4a>
 800046c:	2400      	movs	r4, #0
 800046e:	2201      	movs	r2, #1
 8000470:	464b      	mov	r3, r9
 8000472:	401a      	ands	r2, r3
 8000474:	076b      	lsls	r3, r5, #29
 8000476:	d1ba      	bne.n	80003ee <__aeabi_fadd+0x12a>
 8000478:	e742      	b.n	8000300 <__aeabi_fadd+0x3c>
 800047a:	2f00      	cmp	r7, #0
 800047c:	d13b      	bne.n	80004f6 <__aeabi_fadd+0x232>
 800047e:	3401      	adds	r4, #1
 8000480:	b2e0      	uxtb	r0, r4
 8000482:	2801      	cmp	r0, #1
 8000484:	dd4a      	ble.n	800051c <__aeabi_fadd+0x258>
 8000486:	2cff      	cmp	r4, #255	; 0xff
 8000488:	d0bd      	beq.n	8000406 <__aeabi_fadd+0x142>
 800048a:	2607      	movs	r6, #7
 800048c:	18ed      	adds	r5, r5, r3
 800048e:	086d      	lsrs	r5, r5, #1
 8000490:	402e      	ands	r6, r5
 8000492:	e7a7      	b.n	80003e4 <__aeabi_fadd+0x120>
 8000494:	2307      	movs	r3, #7
 8000496:	4d57      	ldr	r5, [pc, #348]	; (80005f4 <__aeabi_fadd+0x330>)
 8000498:	1a24      	subs	r4, r4, r0
 800049a:	4035      	ands	r5, r6
 800049c:	401e      	ands	r6, r3
 800049e:	e7a1      	b.n	80003e4 <__aeabi_fadd+0x120>
 80004a0:	2c00      	cmp	r4, #0
 80004a2:	d11b      	bne.n	80004dc <__aeabi_fadd+0x218>
 80004a4:	2d00      	cmp	r5, #0
 80004a6:	d16e      	bne.n	8000586 <__aeabi_fadd+0x2c2>
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d100      	bne.n	80004ae <__aeabi_fadd+0x1ea>
 80004ac:	e09a      	b.n	80005e4 <__aeabi_fadd+0x320>
 80004ae:	000a      	movs	r2, r1
 80004b0:	001d      	movs	r5, r3
 80004b2:	003c      	movs	r4, r7
 80004b4:	e724      	b.n	8000300 <__aeabi_fadd+0x3c>
 80004b6:	3f01      	subs	r7, #1
 80004b8:	2f00      	cmp	r7, #0
 80004ba:	d100      	bne.n	80004be <__aeabi_fadd+0x1fa>
 80004bc:	e758      	b.n	8000370 <__aeabi_fadd+0xac>
 80004be:	2cff      	cmp	r4, #255	; 0xff
 80004c0:	d000      	beq.n	80004c4 <__aeabi_fadd+0x200>
 80004c2:	e74a      	b.n	800035a <__aeabi_fadd+0x96>
 80004c4:	e7a7      	b.n	8000416 <__aeabi_fadd+0x152>
 80004c6:	1b5e      	subs	r6, r3, r5
 80004c8:	4689      	mov	r9, r1
 80004ca:	e776      	b.n	80003ba <__aeabi_fadd+0xf6>
 80004cc:	2d00      	cmp	r5, #0
 80004ce:	d11c      	bne.n	800050a <__aeabi_fadd+0x246>
 80004d0:	000a      	movs	r2, r1
 80004d2:	28ff      	cmp	r0, #255	; 0xff
 80004d4:	d01f      	beq.n	8000516 <__aeabi_fadd+0x252>
 80004d6:	0004      	movs	r4, r0
 80004d8:	001d      	movs	r5, r3
 80004da:	e711      	b.n	8000300 <__aeabi_fadd+0x3c>
 80004dc:	2d00      	cmp	r5, #0
 80004de:	d15d      	bne.n	800059c <__aeabi_fadd+0x2d8>
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d117      	bne.n	8000514 <__aeabi_fadd+0x250>
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	2200      	movs	r2, #0
 80004e8:	03db      	lsls	r3, r3, #15
 80004ea:	26ff      	movs	r6, #255	; 0xff
 80004ec:	e70f      	b.n	800030e <__aeabi_fadd+0x4a>
 80004ee:	000a      	movs	r2, r1
 80004f0:	26ff      	movs	r6, #255	; 0xff
 80004f2:	2300      	movs	r3, #0
 80004f4:	e70b      	b.n	800030e <__aeabi_fadd+0x4a>
 80004f6:	2c00      	cmp	r4, #0
 80004f8:	d121      	bne.n	800053e <__aeabi_fadd+0x27a>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d166      	bne.n	80005cc <__aeabi_fadd+0x308>
 80004fe:	28ff      	cmp	r0, #255	; 0xff
 8000500:	d1e9      	bne.n	80004d6 <__aeabi_fadd+0x212>
 8000502:	001d      	movs	r5, r3
 8000504:	e787      	b.n	8000416 <__aeabi_fadd+0x152>
 8000506:	2301      	movs	r3, #1
 8000508:	e752      	b.n	80003b0 <__aeabi_fadd+0xec>
 800050a:	1c7a      	adds	r2, r7, #1
 800050c:	d0a7      	beq.n	800045e <__aeabi_fadd+0x19a>
 800050e:	43fa      	mvns	r2, r7
 8000510:	28ff      	cmp	r0, #255	; 0xff
 8000512:	d199      	bne.n	8000448 <__aeabi_fadd+0x184>
 8000514:	000a      	movs	r2, r1
 8000516:	001d      	movs	r5, r3
 8000518:	24ff      	movs	r4, #255	; 0xff
 800051a:	e6f1      	b.n	8000300 <__aeabi_fadd+0x3c>
 800051c:	2e00      	cmp	r6, #0
 800051e:	d121      	bne.n	8000564 <__aeabi_fadd+0x2a0>
 8000520:	2d00      	cmp	r5, #0
 8000522:	d04f      	beq.n	80005c4 <__aeabi_fadd+0x300>
 8000524:	2b00      	cmp	r3, #0
 8000526:	d04c      	beq.n	80005c2 <__aeabi_fadd+0x2fe>
 8000528:	18ed      	adds	r5, r5, r3
 800052a:	016b      	lsls	r3, r5, #5
 800052c:	d59e      	bpl.n	800046c <__aeabi_fadd+0x1a8>
 800052e:	4b31      	ldr	r3, [pc, #196]	; (80005f4 <__aeabi_fadd+0x330>)
 8000530:	3607      	adds	r6, #7
 8000532:	402e      	ands	r6, r5
 8000534:	2401      	movs	r4, #1
 8000536:	401d      	ands	r5, r3
 8000538:	e754      	b.n	80003e4 <__aeabi_fadd+0x120>
 800053a:	2301      	movs	r3, #1
 800053c:	e718      	b.n	8000370 <__aeabi_fadd+0xac>
 800053e:	28ff      	cmp	r0, #255	; 0xff
 8000540:	d0df      	beq.n	8000502 <__aeabi_fadd+0x23e>
 8000542:	2480      	movs	r4, #128	; 0x80
 8000544:	04e4      	lsls	r4, r4, #19
 8000546:	427f      	negs	r7, r7
 8000548:	4325      	orrs	r5, r4
 800054a:	2f1b      	cmp	r7, #27
 800054c:	dc4d      	bgt.n	80005ea <__aeabi_fadd+0x326>
 800054e:	2620      	movs	r6, #32
 8000550:	1bf6      	subs	r6, r6, r7
 8000552:	002c      	movs	r4, r5
 8000554:	40b5      	lsls	r5, r6
 8000556:	40fc      	lsrs	r4, r7
 8000558:	1e6a      	subs	r2, r5, #1
 800055a:	4195      	sbcs	r5, r2
 800055c:	4325      	orrs	r5, r4
 800055e:	18ed      	adds	r5, r5, r3
 8000560:	0004      	movs	r4, r0
 8000562:	e706      	b.n	8000372 <__aeabi_fadd+0xae>
 8000564:	2d00      	cmp	r5, #0
 8000566:	d0cc      	beq.n	8000502 <__aeabi_fadd+0x23e>
 8000568:	2b00      	cmp	r3, #0
 800056a:	d100      	bne.n	800056e <__aeabi_fadd+0x2aa>
 800056c:	e753      	b.n	8000416 <__aeabi_fadd+0x152>
 800056e:	2180      	movs	r1, #128	; 0x80
 8000570:	4660      	mov	r0, ip
 8000572:	03c9      	lsls	r1, r1, #15
 8000574:	4208      	tst	r0, r1
 8000576:	d003      	beq.n	8000580 <__aeabi_fadd+0x2bc>
 8000578:	4640      	mov	r0, r8
 800057a:	4208      	tst	r0, r1
 800057c:	d100      	bne.n	8000580 <__aeabi_fadd+0x2bc>
 800057e:	001d      	movs	r5, r3
 8000580:	2101      	movs	r1, #1
 8000582:	4011      	ands	r1, r2
 8000584:	e747      	b.n	8000416 <__aeabi_fadd+0x152>
 8000586:	2b00      	cmp	r3, #0
 8000588:	d100      	bne.n	800058c <__aeabi_fadd+0x2c8>
 800058a:	e6b9      	b.n	8000300 <__aeabi_fadd+0x3c>
 800058c:	1aea      	subs	r2, r5, r3
 800058e:	0150      	lsls	r0, r2, #5
 8000590:	d525      	bpl.n	80005de <__aeabi_fadd+0x31a>
 8000592:	2607      	movs	r6, #7
 8000594:	1b5d      	subs	r5, r3, r5
 8000596:	402e      	ands	r6, r5
 8000598:	4689      	mov	r9, r1
 800059a:	e723      	b.n	80003e4 <__aeabi_fadd+0x120>
 800059c:	24ff      	movs	r4, #255	; 0xff
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d100      	bne.n	80005a4 <__aeabi_fadd+0x2e0>
 80005a2:	e6ad      	b.n	8000300 <__aeabi_fadd+0x3c>
 80005a4:	2280      	movs	r2, #128	; 0x80
 80005a6:	4660      	mov	r0, ip
 80005a8:	03d2      	lsls	r2, r2, #15
 80005aa:	4210      	tst	r0, r2
 80005ac:	d004      	beq.n	80005b8 <__aeabi_fadd+0x2f4>
 80005ae:	4640      	mov	r0, r8
 80005b0:	4210      	tst	r0, r2
 80005b2:	d101      	bne.n	80005b8 <__aeabi_fadd+0x2f4>
 80005b4:	001d      	movs	r5, r3
 80005b6:	4689      	mov	r9, r1
 80005b8:	2201      	movs	r2, #1
 80005ba:	464b      	mov	r3, r9
 80005bc:	24ff      	movs	r4, #255	; 0xff
 80005be:	401a      	ands	r2, r3
 80005c0:	e69e      	b.n	8000300 <__aeabi_fadd+0x3c>
 80005c2:	002b      	movs	r3, r5
 80005c4:	08dd      	lsrs	r5, r3, #3
 80005c6:	000a      	movs	r2, r1
 80005c8:	2400      	movs	r4, #0
 80005ca:	e69d      	b.n	8000308 <__aeabi_fadd+0x44>
 80005cc:	1c7a      	adds	r2, r7, #1
 80005ce:	d0c6      	beq.n	800055e <__aeabi_fadd+0x29a>
 80005d0:	43ff      	mvns	r7, r7
 80005d2:	28ff      	cmp	r0, #255	; 0xff
 80005d4:	d1b9      	bne.n	800054a <__aeabi_fadd+0x286>
 80005d6:	001d      	movs	r5, r3
 80005d8:	e71d      	b.n	8000416 <__aeabi_fadd+0x152>
 80005da:	2501      	movs	r5, #1
 80005dc:	e73f      	b.n	800045e <__aeabi_fadd+0x19a>
 80005de:	1e15      	subs	r5, r2, #0
 80005e0:	d000      	beq.n	80005e4 <__aeabi_fadd+0x320>
 80005e2:	e744      	b.n	800046e <__aeabi_fadd+0x1aa>
 80005e4:	2200      	movs	r2, #0
 80005e6:	2300      	movs	r3, #0
 80005e8:	e691      	b.n	800030e <__aeabi_fadd+0x4a>
 80005ea:	2501      	movs	r5, #1
 80005ec:	e7b7      	b.n	800055e <__aeabi_fadd+0x29a>
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	7dffffff 	.word	0x7dffffff
 80005f4:	fbffffff 	.word	0xfbffffff

080005f8 <__aeabi_fdiv>:
 80005f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fa:	4657      	mov	r7, sl
 80005fc:	464e      	mov	r6, r9
 80005fe:	4645      	mov	r5, r8
 8000600:	46de      	mov	lr, fp
 8000602:	0244      	lsls	r4, r0, #9
 8000604:	b5e0      	push	{r5, r6, r7, lr}
 8000606:	0046      	lsls	r6, r0, #1
 8000608:	4688      	mov	r8, r1
 800060a:	0a64      	lsrs	r4, r4, #9
 800060c:	0e36      	lsrs	r6, r6, #24
 800060e:	0fc7      	lsrs	r7, r0, #31
 8000610:	2e00      	cmp	r6, #0
 8000612:	d063      	beq.n	80006dc <__aeabi_fdiv+0xe4>
 8000614:	2eff      	cmp	r6, #255	; 0xff
 8000616:	d024      	beq.n	8000662 <__aeabi_fdiv+0x6a>
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	00e4      	lsls	r4, r4, #3
 800061c:	04db      	lsls	r3, r3, #19
 800061e:	431c      	orrs	r4, r3
 8000620:	2300      	movs	r3, #0
 8000622:	4699      	mov	r9, r3
 8000624:	469b      	mov	fp, r3
 8000626:	3e7f      	subs	r6, #127	; 0x7f
 8000628:	4643      	mov	r3, r8
 800062a:	4642      	mov	r2, r8
 800062c:	025d      	lsls	r5, r3, #9
 800062e:	0fd2      	lsrs	r2, r2, #31
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	0a6d      	lsrs	r5, r5, #9
 8000634:	0e1b      	lsrs	r3, r3, #24
 8000636:	4690      	mov	r8, r2
 8000638:	4692      	mov	sl, r2
 800063a:	d065      	beq.n	8000708 <__aeabi_fdiv+0x110>
 800063c:	2bff      	cmp	r3, #255	; 0xff
 800063e:	d055      	beq.n	80006ec <__aeabi_fdiv+0xf4>
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	2100      	movs	r1, #0
 8000644:	00ed      	lsls	r5, r5, #3
 8000646:	04d2      	lsls	r2, r2, #19
 8000648:	3b7f      	subs	r3, #127	; 0x7f
 800064a:	4315      	orrs	r5, r2
 800064c:	1af6      	subs	r6, r6, r3
 800064e:	4643      	mov	r3, r8
 8000650:	464a      	mov	r2, r9
 8000652:	407b      	eors	r3, r7
 8000654:	2a0f      	cmp	r2, #15
 8000656:	d900      	bls.n	800065a <__aeabi_fdiv+0x62>
 8000658:	e08d      	b.n	8000776 <__aeabi_fdiv+0x17e>
 800065a:	486d      	ldr	r0, [pc, #436]	; (8000810 <__aeabi_fdiv+0x218>)
 800065c:	0092      	lsls	r2, r2, #2
 800065e:	5882      	ldr	r2, [r0, r2]
 8000660:	4697      	mov	pc, r2
 8000662:	2c00      	cmp	r4, #0
 8000664:	d154      	bne.n	8000710 <__aeabi_fdiv+0x118>
 8000666:	2308      	movs	r3, #8
 8000668:	4699      	mov	r9, r3
 800066a:	3b06      	subs	r3, #6
 800066c:	26ff      	movs	r6, #255	; 0xff
 800066e:	469b      	mov	fp, r3
 8000670:	e7da      	b.n	8000628 <__aeabi_fdiv+0x30>
 8000672:	2500      	movs	r5, #0
 8000674:	4653      	mov	r3, sl
 8000676:	2902      	cmp	r1, #2
 8000678:	d01b      	beq.n	80006b2 <__aeabi_fdiv+0xba>
 800067a:	2903      	cmp	r1, #3
 800067c:	d100      	bne.n	8000680 <__aeabi_fdiv+0x88>
 800067e:	e0bf      	b.n	8000800 <__aeabi_fdiv+0x208>
 8000680:	2901      	cmp	r1, #1
 8000682:	d028      	beq.n	80006d6 <__aeabi_fdiv+0xde>
 8000684:	0030      	movs	r0, r6
 8000686:	307f      	adds	r0, #127	; 0x7f
 8000688:	2800      	cmp	r0, #0
 800068a:	dd20      	ble.n	80006ce <__aeabi_fdiv+0xd6>
 800068c:	076a      	lsls	r2, r5, #29
 800068e:	d004      	beq.n	800069a <__aeabi_fdiv+0xa2>
 8000690:	220f      	movs	r2, #15
 8000692:	402a      	ands	r2, r5
 8000694:	2a04      	cmp	r2, #4
 8000696:	d000      	beq.n	800069a <__aeabi_fdiv+0xa2>
 8000698:	3504      	adds	r5, #4
 800069a:	012a      	lsls	r2, r5, #4
 800069c:	d503      	bpl.n	80006a6 <__aeabi_fdiv+0xae>
 800069e:	0030      	movs	r0, r6
 80006a0:	4a5c      	ldr	r2, [pc, #368]	; (8000814 <__aeabi_fdiv+0x21c>)
 80006a2:	3080      	adds	r0, #128	; 0x80
 80006a4:	4015      	ands	r5, r2
 80006a6:	28fe      	cmp	r0, #254	; 0xfe
 80006a8:	dc03      	bgt.n	80006b2 <__aeabi_fdiv+0xba>
 80006aa:	01ac      	lsls	r4, r5, #6
 80006ac:	0a64      	lsrs	r4, r4, #9
 80006ae:	b2c2      	uxtb	r2, r0
 80006b0:	e001      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 80006b2:	22ff      	movs	r2, #255	; 0xff
 80006b4:	2400      	movs	r4, #0
 80006b6:	0264      	lsls	r4, r4, #9
 80006b8:	05d2      	lsls	r2, r2, #23
 80006ba:	0a60      	lsrs	r0, r4, #9
 80006bc:	07db      	lsls	r3, r3, #31
 80006be:	4310      	orrs	r0, r2
 80006c0:	4318      	orrs	r0, r3
 80006c2:	bc3c      	pop	{r2, r3, r4, r5}
 80006c4:	4690      	mov	r8, r2
 80006c6:	4699      	mov	r9, r3
 80006c8:	46a2      	mov	sl, r4
 80006ca:	46ab      	mov	fp, r5
 80006cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006ce:	2201      	movs	r2, #1
 80006d0:	1a10      	subs	r0, r2, r0
 80006d2:	281b      	cmp	r0, #27
 80006d4:	dd7c      	ble.n	80007d0 <__aeabi_fdiv+0x1d8>
 80006d6:	2200      	movs	r2, #0
 80006d8:	2400      	movs	r4, #0
 80006da:	e7ec      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 80006dc:	2c00      	cmp	r4, #0
 80006de:	d11d      	bne.n	800071c <__aeabi_fdiv+0x124>
 80006e0:	2304      	movs	r3, #4
 80006e2:	4699      	mov	r9, r3
 80006e4:	3b03      	subs	r3, #3
 80006e6:	2600      	movs	r6, #0
 80006e8:	469b      	mov	fp, r3
 80006ea:	e79d      	b.n	8000628 <__aeabi_fdiv+0x30>
 80006ec:	3eff      	subs	r6, #255	; 0xff
 80006ee:	2d00      	cmp	r5, #0
 80006f0:	d120      	bne.n	8000734 <__aeabi_fdiv+0x13c>
 80006f2:	2102      	movs	r1, #2
 80006f4:	4643      	mov	r3, r8
 80006f6:	464a      	mov	r2, r9
 80006f8:	407b      	eors	r3, r7
 80006fa:	430a      	orrs	r2, r1
 80006fc:	2a0f      	cmp	r2, #15
 80006fe:	d8d8      	bhi.n	80006b2 <__aeabi_fdiv+0xba>
 8000700:	4845      	ldr	r0, [pc, #276]	; (8000818 <__aeabi_fdiv+0x220>)
 8000702:	0092      	lsls	r2, r2, #2
 8000704:	5882      	ldr	r2, [r0, r2]
 8000706:	4697      	mov	pc, r2
 8000708:	2d00      	cmp	r5, #0
 800070a:	d119      	bne.n	8000740 <__aeabi_fdiv+0x148>
 800070c:	2101      	movs	r1, #1
 800070e:	e7f1      	b.n	80006f4 <__aeabi_fdiv+0xfc>
 8000710:	230c      	movs	r3, #12
 8000712:	4699      	mov	r9, r3
 8000714:	3b09      	subs	r3, #9
 8000716:	26ff      	movs	r6, #255	; 0xff
 8000718:	469b      	mov	fp, r3
 800071a:	e785      	b.n	8000628 <__aeabi_fdiv+0x30>
 800071c:	0020      	movs	r0, r4
 800071e:	f001 fb97 	bl	8001e50 <__clzsi2>
 8000722:	2676      	movs	r6, #118	; 0x76
 8000724:	1f43      	subs	r3, r0, #5
 8000726:	409c      	lsls	r4, r3
 8000728:	2300      	movs	r3, #0
 800072a:	4276      	negs	r6, r6
 800072c:	1a36      	subs	r6, r6, r0
 800072e:	4699      	mov	r9, r3
 8000730:	469b      	mov	fp, r3
 8000732:	e779      	b.n	8000628 <__aeabi_fdiv+0x30>
 8000734:	464a      	mov	r2, r9
 8000736:	2303      	movs	r3, #3
 8000738:	431a      	orrs	r2, r3
 800073a:	4691      	mov	r9, r2
 800073c:	2103      	movs	r1, #3
 800073e:	e786      	b.n	800064e <__aeabi_fdiv+0x56>
 8000740:	0028      	movs	r0, r5
 8000742:	f001 fb85 	bl	8001e50 <__clzsi2>
 8000746:	1f43      	subs	r3, r0, #5
 8000748:	1836      	adds	r6, r6, r0
 800074a:	409d      	lsls	r5, r3
 800074c:	3676      	adds	r6, #118	; 0x76
 800074e:	2100      	movs	r1, #0
 8000750:	e77d      	b.n	800064e <__aeabi_fdiv+0x56>
 8000752:	2480      	movs	r4, #128	; 0x80
 8000754:	2300      	movs	r3, #0
 8000756:	03e4      	lsls	r4, r4, #15
 8000758:	22ff      	movs	r2, #255	; 0xff
 800075a:	e7ac      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 800075c:	2500      	movs	r5, #0
 800075e:	2380      	movs	r3, #128	; 0x80
 8000760:	03db      	lsls	r3, r3, #15
 8000762:	421c      	tst	r4, r3
 8000764:	d028      	beq.n	80007b8 <__aeabi_fdiv+0x1c0>
 8000766:	421d      	tst	r5, r3
 8000768:	d126      	bne.n	80007b8 <__aeabi_fdiv+0x1c0>
 800076a:	432b      	orrs	r3, r5
 800076c:	025c      	lsls	r4, r3, #9
 800076e:	0a64      	lsrs	r4, r4, #9
 8000770:	4643      	mov	r3, r8
 8000772:	22ff      	movs	r2, #255	; 0xff
 8000774:	e79f      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 8000776:	0162      	lsls	r2, r4, #5
 8000778:	016c      	lsls	r4, r5, #5
 800077a:	42a2      	cmp	r2, r4
 800077c:	d224      	bcs.n	80007c8 <__aeabi_fdiv+0x1d0>
 800077e:	211b      	movs	r1, #27
 8000780:	2500      	movs	r5, #0
 8000782:	3e01      	subs	r6, #1
 8000784:	2701      	movs	r7, #1
 8000786:	0010      	movs	r0, r2
 8000788:	006d      	lsls	r5, r5, #1
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	2800      	cmp	r0, #0
 800078e:	db01      	blt.n	8000794 <__aeabi_fdiv+0x19c>
 8000790:	4294      	cmp	r4, r2
 8000792:	d801      	bhi.n	8000798 <__aeabi_fdiv+0x1a0>
 8000794:	1b12      	subs	r2, r2, r4
 8000796:	433d      	orrs	r5, r7
 8000798:	3901      	subs	r1, #1
 800079a:	2900      	cmp	r1, #0
 800079c:	d1f3      	bne.n	8000786 <__aeabi_fdiv+0x18e>
 800079e:	0014      	movs	r4, r2
 80007a0:	1e62      	subs	r2, r4, #1
 80007a2:	4194      	sbcs	r4, r2
 80007a4:	4325      	orrs	r5, r4
 80007a6:	e76d      	b.n	8000684 <__aeabi_fdiv+0x8c>
 80007a8:	46ba      	mov	sl, r7
 80007aa:	4659      	mov	r1, fp
 80007ac:	0025      	movs	r5, r4
 80007ae:	4653      	mov	r3, sl
 80007b0:	2902      	cmp	r1, #2
 80007b2:	d000      	beq.n	80007b6 <__aeabi_fdiv+0x1be>
 80007b4:	e761      	b.n	800067a <__aeabi_fdiv+0x82>
 80007b6:	e77c      	b.n	80006b2 <__aeabi_fdiv+0xba>
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	03db      	lsls	r3, r3, #15
 80007bc:	431c      	orrs	r4, r3
 80007be:	0264      	lsls	r4, r4, #9
 80007c0:	0a64      	lsrs	r4, r4, #9
 80007c2:	003b      	movs	r3, r7
 80007c4:	22ff      	movs	r2, #255	; 0xff
 80007c6:	e776      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 80007c8:	1b12      	subs	r2, r2, r4
 80007ca:	211a      	movs	r1, #26
 80007cc:	2501      	movs	r5, #1
 80007ce:	e7d9      	b.n	8000784 <__aeabi_fdiv+0x18c>
 80007d0:	369e      	adds	r6, #158	; 0x9e
 80007d2:	002a      	movs	r2, r5
 80007d4:	40b5      	lsls	r5, r6
 80007d6:	002c      	movs	r4, r5
 80007d8:	40c2      	lsrs	r2, r0
 80007da:	1e65      	subs	r5, r4, #1
 80007dc:	41ac      	sbcs	r4, r5
 80007de:	4314      	orrs	r4, r2
 80007e0:	0762      	lsls	r2, r4, #29
 80007e2:	d004      	beq.n	80007ee <__aeabi_fdiv+0x1f6>
 80007e4:	220f      	movs	r2, #15
 80007e6:	4022      	ands	r2, r4
 80007e8:	2a04      	cmp	r2, #4
 80007ea:	d000      	beq.n	80007ee <__aeabi_fdiv+0x1f6>
 80007ec:	3404      	adds	r4, #4
 80007ee:	0162      	lsls	r2, r4, #5
 80007f0:	d403      	bmi.n	80007fa <__aeabi_fdiv+0x202>
 80007f2:	01a4      	lsls	r4, r4, #6
 80007f4:	0a64      	lsrs	r4, r4, #9
 80007f6:	2200      	movs	r2, #0
 80007f8:	e75d      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 80007fa:	2201      	movs	r2, #1
 80007fc:	2400      	movs	r4, #0
 80007fe:	e75a      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 8000800:	2480      	movs	r4, #128	; 0x80
 8000802:	03e4      	lsls	r4, r4, #15
 8000804:	432c      	orrs	r4, r5
 8000806:	0264      	lsls	r4, r4, #9
 8000808:	0a64      	lsrs	r4, r4, #9
 800080a:	22ff      	movs	r2, #255	; 0xff
 800080c:	e753      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	0800730c 	.word	0x0800730c
 8000814:	f7ffffff 	.word	0xf7ffffff
 8000818:	0800734c 	.word	0x0800734c

0800081c <__eqsf2>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	0042      	lsls	r2, r0, #1
 8000820:	024e      	lsls	r6, r1, #9
 8000822:	004c      	lsls	r4, r1, #1
 8000824:	0245      	lsls	r5, r0, #9
 8000826:	0a6d      	lsrs	r5, r5, #9
 8000828:	0e12      	lsrs	r2, r2, #24
 800082a:	0fc3      	lsrs	r3, r0, #31
 800082c:	0a76      	lsrs	r6, r6, #9
 800082e:	0e24      	lsrs	r4, r4, #24
 8000830:	0fc9      	lsrs	r1, r1, #31
 8000832:	2aff      	cmp	r2, #255	; 0xff
 8000834:	d00f      	beq.n	8000856 <__eqsf2+0x3a>
 8000836:	2cff      	cmp	r4, #255	; 0xff
 8000838:	d011      	beq.n	800085e <__eqsf2+0x42>
 800083a:	2001      	movs	r0, #1
 800083c:	42a2      	cmp	r2, r4
 800083e:	d000      	beq.n	8000842 <__eqsf2+0x26>
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	42b5      	cmp	r5, r6
 8000844:	d1fc      	bne.n	8000840 <__eqsf2+0x24>
 8000846:	428b      	cmp	r3, r1
 8000848:	d00d      	beq.n	8000866 <__eqsf2+0x4a>
 800084a:	2a00      	cmp	r2, #0
 800084c:	d1f8      	bne.n	8000840 <__eqsf2+0x24>
 800084e:	0028      	movs	r0, r5
 8000850:	1e45      	subs	r5, r0, #1
 8000852:	41a8      	sbcs	r0, r5
 8000854:	e7f4      	b.n	8000840 <__eqsf2+0x24>
 8000856:	2001      	movs	r0, #1
 8000858:	2d00      	cmp	r5, #0
 800085a:	d1f1      	bne.n	8000840 <__eqsf2+0x24>
 800085c:	e7eb      	b.n	8000836 <__eqsf2+0x1a>
 800085e:	2001      	movs	r0, #1
 8000860:	2e00      	cmp	r6, #0
 8000862:	d1ed      	bne.n	8000840 <__eqsf2+0x24>
 8000864:	e7e9      	b.n	800083a <__eqsf2+0x1e>
 8000866:	2000      	movs	r0, #0
 8000868:	e7ea      	b.n	8000840 <__eqsf2+0x24>
 800086a:	46c0      	nop			; (mov r8, r8)

0800086c <__gesf2>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	004a      	lsls	r2, r1, #1
 8000870:	024e      	lsls	r6, r1, #9
 8000872:	0245      	lsls	r5, r0, #9
 8000874:	0044      	lsls	r4, r0, #1
 8000876:	0a6d      	lsrs	r5, r5, #9
 8000878:	0e24      	lsrs	r4, r4, #24
 800087a:	0fc3      	lsrs	r3, r0, #31
 800087c:	0a76      	lsrs	r6, r6, #9
 800087e:	0e12      	lsrs	r2, r2, #24
 8000880:	0fc9      	lsrs	r1, r1, #31
 8000882:	2cff      	cmp	r4, #255	; 0xff
 8000884:	d015      	beq.n	80008b2 <__gesf2+0x46>
 8000886:	2aff      	cmp	r2, #255	; 0xff
 8000888:	d00e      	beq.n	80008a8 <__gesf2+0x3c>
 800088a:	2c00      	cmp	r4, #0
 800088c:	d115      	bne.n	80008ba <__gesf2+0x4e>
 800088e:	2a00      	cmp	r2, #0
 8000890:	d101      	bne.n	8000896 <__gesf2+0x2a>
 8000892:	2e00      	cmp	r6, #0
 8000894:	d01c      	beq.n	80008d0 <__gesf2+0x64>
 8000896:	2d00      	cmp	r5, #0
 8000898:	d014      	beq.n	80008c4 <__gesf2+0x58>
 800089a:	428b      	cmp	r3, r1
 800089c:	d027      	beq.n	80008ee <__gesf2+0x82>
 800089e:	2002      	movs	r0, #2
 80008a0:	3b01      	subs	r3, #1
 80008a2:	4018      	ands	r0, r3
 80008a4:	3801      	subs	r0, #1
 80008a6:	bd70      	pop	{r4, r5, r6, pc}
 80008a8:	2e00      	cmp	r6, #0
 80008aa:	d0ee      	beq.n	800088a <__gesf2+0x1e>
 80008ac:	2002      	movs	r0, #2
 80008ae:	4240      	negs	r0, r0
 80008b0:	e7f9      	b.n	80008a6 <__gesf2+0x3a>
 80008b2:	2d00      	cmp	r5, #0
 80008b4:	d1fa      	bne.n	80008ac <__gesf2+0x40>
 80008b6:	2aff      	cmp	r2, #255	; 0xff
 80008b8:	d00e      	beq.n	80008d8 <__gesf2+0x6c>
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	d10e      	bne.n	80008dc <__gesf2+0x70>
 80008be:	2e00      	cmp	r6, #0
 80008c0:	d0ed      	beq.n	800089e <__gesf2+0x32>
 80008c2:	e00b      	b.n	80008dc <__gesf2+0x70>
 80008c4:	2301      	movs	r3, #1
 80008c6:	3901      	subs	r1, #1
 80008c8:	4399      	bics	r1, r3
 80008ca:	0008      	movs	r0, r1
 80008cc:	3001      	adds	r0, #1
 80008ce:	e7ea      	b.n	80008a6 <__gesf2+0x3a>
 80008d0:	2000      	movs	r0, #0
 80008d2:	2d00      	cmp	r5, #0
 80008d4:	d0e7      	beq.n	80008a6 <__gesf2+0x3a>
 80008d6:	e7e2      	b.n	800089e <__gesf2+0x32>
 80008d8:	2e00      	cmp	r6, #0
 80008da:	d1e7      	bne.n	80008ac <__gesf2+0x40>
 80008dc:	428b      	cmp	r3, r1
 80008de:	d1de      	bne.n	800089e <__gesf2+0x32>
 80008e0:	4294      	cmp	r4, r2
 80008e2:	dd05      	ble.n	80008f0 <__gesf2+0x84>
 80008e4:	2102      	movs	r1, #2
 80008e6:	1e58      	subs	r0, r3, #1
 80008e8:	4008      	ands	r0, r1
 80008ea:	3801      	subs	r0, #1
 80008ec:	e7db      	b.n	80008a6 <__gesf2+0x3a>
 80008ee:	2400      	movs	r4, #0
 80008f0:	42a2      	cmp	r2, r4
 80008f2:	dc04      	bgt.n	80008fe <__gesf2+0x92>
 80008f4:	42b5      	cmp	r5, r6
 80008f6:	d8d2      	bhi.n	800089e <__gesf2+0x32>
 80008f8:	2000      	movs	r0, #0
 80008fa:	42b5      	cmp	r5, r6
 80008fc:	d2d3      	bcs.n	80008a6 <__gesf2+0x3a>
 80008fe:	1e58      	subs	r0, r3, #1
 8000900:	2301      	movs	r3, #1
 8000902:	4398      	bics	r0, r3
 8000904:	3001      	adds	r0, #1
 8000906:	e7ce      	b.n	80008a6 <__gesf2+0x3a>

08000908 <__lesf2>:
 8000908:	b530      	push	{r4, r5, lr}
 800090a:	0042      	lsls	r2, r0, #1
 800090c:	0244      	lsls	r4, r0, #9
 800090e:	024d      	lsls	r5, r1, #9
 8000910:	0fc3      	lsrs	r3, r0, #31
 8000912:	0048      	lsls	r0, r1, #1
 8000914:	0a64      	lsrs	r4, r4, #9
 8000916:	0e12      	lsrs	r2, r2, #24
 8000918:	0a6d      	lsrs	r5, r5, #9
 800091a:	0e00      	lsrs	r0, r0, #24
 800091c:	0fc9      	lsrs	r1, r1, #31
 800091e:	2aff      	cmp	r2, #255	; 0xff
 8000920:	d012      	beq.n	8000948 <__lesf2+0x40>
 8000922:	28ff      	cmp	r0, #255	; 0xff
 8000924:	d00c      	beq.n	8000940 <__lesf2+0x38>
 8000926:	2a00      	cmp	r2, #0
 8000928:	d112      	bne.n	8000950 <__lesf2+0x48>
 800092a:	2800      	cmp	r0, #0
 800092c:	d119      	bne.n	8000962 <__lesf2+0x5a>
 800092e:	2d00      	cmp	r5, #0
 8000930:	d117      	bne.n	8000962 <__lesf2+0x5a>
 8000932:	2c00      	cmp	r4, #0
 8000934:	d02b      	beq.n	800098e <__lesf2+0x86>
 8000936:	2002      	movs	r0, #2
 8000938:	3b01      	subs	r3, #1
 800093a:	4018      	ands	r0, r3
 800093c:	3801      	subs	r0, #1
 800093e:	e026      	b.n	800098e <__lesf2+0x86>
 8000940:	2d00      	cmp	r5, #0
 8000942:	d0f0      	beq.n	8000926 <__lesf2+0x1e>
 8000944:	2002      	movs	r0, #2
 8000946:	e022      	b.n	800098e <__lesf2+0x86>
 8000948:	2c00      	cmp	r4, #0
 800094a:	d1fb      	bne.n	8000944 <__lesf2+0x3c>
 800094c:	28ff      	cmp	r0, #255	; 0xff
 800094e:	d01f      	beq.n	8000990 <__lesf2+0x88>
 8000950:	2800      	cmp	r0, #0
 8000952:	d11f      	bne.n	8000994 <__lesf2+0x8c>
 8000954:	2d00      	cmp	r5, #0
 8000956:	d11d      	bne.n	8000994 <__lesf2+0x8c>
 8000958:	2002      	movs	r0, #2
 800095a:	3b01      	subs	r3, #1
 800095c:	4018      	ands	r0, r3
 800095e:	3801      	subs	r0, #1
 8000960:	e015      	b.n	800098e <__lesf2+0x86>
 8000962:	2c00      	cmp	r4, #0
 8000964:	d00e      	beq.n	8000984 <__lesf2+0x7c>
 8000966:	428b      	cmp	r3, r1
 8000968:	d1e5      	bne.n	8000936 <__lesf2+0x2e>
 800096a:	2200      	movs	r2, #0
 800096c:	4290      	cmp	r0, r2
 800096e:	dc04      	bgt.n	800097a <__lesf2+0x72>
 8000970:	42ac      	cmp	r4, r5
 8000972:	d8e0      	bhi.n	8000936 <__lesf2+0x2e>
 8000974:	2000      	movs	r0, #0
 8000976:	42ac      	cmp	r4, r5
 8000978:	d209      	bcs.n	800098e <__lesf2+0x86>
 800097a:	1e58      	subs	r0, r3, #1
 800097c:	2301      	movs	r3, #1
 800097e:	4398      	bics	r0, r3
 8000980:	3001      	adds	r0, #1
 8000982:	e004      	b.n	800098e <__lesf2+0x86>
 8000984:	2301      	movs	r3, #1
 8000986:	3901      	subs	r1, #1
 8000988:	4399      	bics	r1, r3
 800098a:	0008      	movs	r0, r1
 800098c:	3001      	adds	r0, #1
 800098e:	bd30      	pop	{r4, r5, pc}
 8000990:	2d00      	cmp	r5, #0
 8000992:	d1d7      	bne.n	8000944 <__lesf2+0x3c>
 8000994:	428b      	cmp	r3, r1
 8000996:	d1ce      	bne.n	8000936 <__lesf2+0x2e>
 8000998:	4282      	cmp	r2, r0
 800099a:	dde7      	ble.n	800096c <__lesf2+0x64>
 800099c:	2102      	movs	r1, #2
 800099e:	1e58      	subs	r0, r3, #1
 80009a0:	4008      	ands	r0, r1
 80009a2:	3801      	subs	r0, #1
 80009a4:	e7f3      	b.n	800098e <__lesf2+0x86>
 80009a6:	46c0      	nop			; (mov r8, r8)

080009a8 <__aeabi_fmul>:
 80009a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009aa:	464e      	mov	r6, r9
 80009ac:	4657      	mov	r7, sl
 80009ae:	4645      	mov	r5, r8
 80009b0:	46de      	mov	lr, fp
 80009b2:	b5e0      	push	{r5, r6, r7, lr}
 80009b4:	0243      	lsls	r3, r0, #9
 80009b6:	0a5b      	lsrs	r3, r3, #9
 80009b8:	0045      	lsls	r5, r0, #1
 80009ba:	b083      	sub	sp, #12
 80009bc:	1c0f      	adds	r7, r1, #0
 80009be:	4699      	mov	r9, r3
 80009c0:	0e2d      	lsrs	r5, r5, #24
 80009c2:	0fc6      	lsrs	r6, r0, #31
 80009c4:	2d00      	cmp	r5, #0
 80009c6:	d057      	beq.n	8000a78 <__aeabi_fmul+0xd0>
 80009c8:	2dff      	cmp	r5, #255	; 0xff
 80009ca:	d024      	beq.n	8000a16 <__aeabi_fmul+0x6e>
 80009cc:	2080      	movs	r0, #128	; 0x80
 80009ce:	00db      	lsls	r3, r3, #3
 80009d0:	04c0      	lsls	r0, r0, #19
 80009d2:	4318      	orrs	r0, r3
 80009d4:	2300      	movs	r3, #0
 80009d6:	4681      	mov	r9, r0
 80009d8:	469a      	mov	sl, r3
 80009da:	469b      	mov	fp, r3
 80009dc:	3d7f      	subs	r5, #127	; 0x7f
 80009de:	027c      	lsls	r4, r7, #9
 80009e0:	007a      	lsls	r2, r7, #1
 80009e2:	0ffb      	lsrs	r3, r7, #31
 80009e4:	0a64      	lsrs	r4, r4, #9
 80009e6:	0e12      	lsrs	r2, r2, #24
 80009e8:	4698      	mov	r8, r3
 80009ea:	d023      	beq.n	8000a34 <__aeabi_fmul+0x8c>
 80009ec:	2aff      	cmp	r2, #255	; 0xff
 80009ee:	d04b      	beq.n	8000a88 <__aeabi_fmul+0xe0>
 80009f0:	00e3      	lsls	r3, r4, #3
 80009f2:	2480      	movs	r4, #128	; 0x80
 80009f4:	2000      	movs	r0, #0
 80009f6:	04e4      	lsls	r4, r4, #19
 80009f8:	3a7f      	subs	r2, #127	; 0x7f
 80009fa:	431c      	orrs	r4, r3
 80009fc:	18ad      	adds	r5, r5, r2
 80009fe:	1c6b      	adds	r3, r5, #1
 8000a00:	4647      	mov	r7, r8
 8000a02:	9301      	str	r3, [sp, #4]
 8000a04:	4653      	mov	r3, sl
 8000a06:	4077      	eors	r7, r6
 8000a08:	003a      	movs	r2, r7
 8000a0a:	2b0f      	cmp	r3, #15
 8000a0c:	d848      	bhi.n	8000aa0 <__aeabi_fmul+0xf8>
 8000a0e:	497d      	ldr	r1, [pc, #500]	; (8000c04 <__aeabi_fmul+0x25c>)
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	58cb      	ldr	r3, [r1, r3]
 8000a14:	469f      	mov	pc, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fmul+0x74>
 8000a1a:	e085      	b.n	8000b28 <__aeabi_fmul+0x180>
 8000a1c:	3308      	adds	r3, #8
 8000a1e:	469a      	mov	sl, r3
 8000a20:	3b06      	subs	r3, #6
 8000a22:	469b      	mov	fp, r3
 8000a24:	027c      	lsls	r4, r7, #9
 8000a26:	007a      	lsls	r2, r7, #1
 8000a28:	0ffb      	lsrs	r3, r7, #31
 8000a2a:	25ff      	movs	r5, #255	; 0xff
 8000a2c:	0a64      	lsrs	r4, r4, #9
 8000a2e:	0e12      	lsrs	r2, r2, #24
 8000a30:	4698      	mov	r8, r3
 8000a32:	d1db      	bne.n	80009ec <__aeabi_fmul+0x44>
 8000a34:	2c00      	cmp	r4, #0
 8000a36:	d000      	beq.n	8000a3a <__aeabi_fmul+0x92>
 8000a38:	e090      	b.n	8000b5c <__aeabi_fmul+0x1b4>
 8000a3a:	4652      	mov	r2, sl
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	431a      	orrs	r2, r3
 8000a40:	4692      	mov	sl, r2
 8000a42:	2001      	movs	r0, #1
 8000a44:	e7db      	b.n	80009fe <__aeabi_fmul+0x56>
 8000a46:	464c      	mov	r4, r9
 8000a48:	4658      	mov	r0, fp
 8000a4a:	0017      	movs	r7, r2
 8000a4c:	2802      	cmp	r0, #2
 8000a4e:	d024      	beq.n	8000a9a <__aeabi_fmul+0xf2>
 8000a50:	2803      	cmp	r0, #3
 8000a52:	d100      	bne.n	8000a56 <__aeabi_fmul+0xae>
 8000a54:	e0cf      	b.n	8000bf6 <__aeabi_fmul+0x24e>
 8000a56:	2200      	movs	r2, #0
 8000a58:	2300      	movs	r3, #0
 8000a5a:	2801      	cmp	r0, #1
 8000a5c:	d14d      	bne.n	8000afa <__aeabi_fmul+0x152>
 8000a5e:	0258      	lsls	r0, r3, #9
 8000a60:	05d2      	lsls	r2, r2, #23
 8000a62:	0a40      	lsrs	r0, r0, #9
 8000a64:	07ff      	lsls	r7, r7, #31
 8000a66:	4310      	orrs	r0, r2
 8000a68:	4338      	orrs	r0, r7
 8000a6a:	b003      	add	sp, #12
 8000a6c:	bc3c      	pop	{r2, r3, r4, r5}
 8000a6e:	4690      	mov	r8, r2
 8000a70:	4699      	mov	r9, r3
 8000a72:	46a2      	mov	sl, r4
 8000a74:	46ab      	mov	fp, r5
 8000a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d15b      	bne.n	8000b34 <__aeabi_fmul+0x18c>
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	469a      	mov	sl, r3
 8000a80:	3b03      	subs	r3, #3
 8000a82:	2500      	movs	r5, #0
 8000a84:	469b      	mov	fp, r3
 8000a86:	e7aa      	b.n	80009de <__aeabi_fmul+0x36>
 8000a88:	35ff      	adds	r5, #255	; 0xff
 8000a8a:	2c00      	cmp	r4, #0
 8000a8c:	d160      	bne.n	8000b50 <__aeabi_fmul+0x1a8>
 8000a8e:	4652      	mov	r2, sl
 8000a90:	2302      	movs	r3, #2
 8000a92:	431a      	orrs	r2, r3
 8000a94:	4692      	mov	sl, r2
 8000a96:	2002      	movs	r0, #2
 8000a98:	e7b1      	b.n	80009fe <__aeabi_fmul+0x56>
 8000a9a:	22ff      	movs	r2, #255	; 0xff
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e7de      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000aa0:	464b      	mov	r3, r9
 8000aa2:	0c1b      	lsrs	r3, r3, #16
 8000aa4:	469c      	mov	ip, r3
 8000aa6:	464b      	mov	r3, r9
 8000aa8:	0426      	lsls	r6, r4, #16
 8000aaa:	0c36      	lsrs	r6, r6, #16
 8000aac:	0418      	lsls	r0, r3, #16
 8000aae:	4661      	mov	r1, ip
 8000ab0:	0033      	movs	r3, r6
 8000ab2:	0c22      	lsrs	r2, r4, #16
 8000ab4:	4664      	mov	r4, ip
 8000ab6:	0c00      	lsrs	r0, r0, #16
 8000ab8:	4343      	muls	r3, r0
 8000aba:	434e      	muls	r6, r1
 8000abc:	4350      	muls	r0, r2
 8000abe:	4354      	muls	r4, r2
 8000ac0:	1980      	adds	r0, r0, r6
 8000ac2:	0c1a      	lsrs	r2, r3, #16
 8000ac4:	1812      	adds	r2, r2, r0
 8000ac6:	4296      	cmp	r6, r2
 8000ac8:	d903      	bls.n	8000ad2 <__aeabi_fmul+0x12a>
 8000aca:	2180      	movs	r1, #128	; 0x80
 8000acc:	0249      	lsls	r1, r1, #9
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4464      	add	r4, ip
 8000ad2:	041b      	lsls	r3, r3, #16
 8000ad4:	0c1b      	lsrs	r3, r3, #16
 8000ad6:	0410      	lsls	r0, r2, #16
 8000ad8:	18c0      	adds	r0, r0, r3
 8000ada:	0183      	lsls	r3, r0, #6
 8000adc:	1e5e      	subs	r6, r3, #1
 8000ade:	41b3      	sbcs	r3, r6
 8000ae0:	0e80      	lsrs	r0, r0, #26
 8000ae2:	4318      	orrs	r0, r3
 8000ae4:	0c13      	lsrs	r3, r2, #16
 8000ae6:	191b      	adds	r3, r3, r4
 8000ae8:	019b      	lsls	r3, r3, #6
 8000aea:	4303      	orrs	r3, r0
 8000aec:	001c      	movs	r4, r3
 8000aee:	0123      	lsls	r3, r4, #4
 8000af0:	d579      	bpl.n	8000be6 <__aeabi_fmul+0x23e>
 8000af2:	2301      	movs	r3, #1
 8000af4:	0862      	lsrs	r2, r4, #1
 8000af6:	401c      	ands	r4, r3
 8000af8:	4314      	orrs	r4, r2
 8000afa:	9a01      	ldr	r2, [sp, #4]
 8000afc:	327f      	adds	r2, #127	; 0x7f
 8000afe:	2a00      	cmp	r2, #0
 8000b00:	dd4d      	ble.n	8000b9e <__aeabi_fmul+0x1f6>
 8000b02:	0763      	lsls	r3, r4, #29
 8000b04:	d004      	beq.n	8000b10 <__aeabi_fmul+0x168>
 8000b06:	230f      	movs	r3, #15
 8000b08:	4023      	ands	r3, r4
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	d000      	beq.n	8000b10 <__aeabi_fmul+0x168>
 8000b0e:	3404      	adds	r4, #4
 8000b10:	0123      	lsls	r3, r4, #4
 8000b12:	d503      	bpl.n	8000b1c <__aeabi_fmul+0x174>
 8000b14:	4b3c      	ldr	r3, [pc, #240]	; (8000c08 <__aeabi_fmul+0x260>)
 8000b16:	9a01      	ldr	r2, [sp, #4]
 8000b18:	401c      	ands	r4, r3
 8000b1a:	3280      	adds	r2, #128	; 0x80
 8000b1c:	2afe      	cmp	r2, #254	; 0xfe
 8000b1e:	dcbc      	bgt.n	8000a9a <__aeabi_fmul+0xf2>
 8000b20:	01a3      	lsls	r3, r4, #6
 8000b22:	0a5b      	lsrs	r3, r3, #9
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	e79a      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000b28:	230c      	movs	r3, #12
 8000b2a:	469a      	mov	sl, r3
 8000b2c:	3b09      	subs	r3, #9
 8000b2e:	25ff      	movs	r5, #255	; 0xff
 8000b30:	469b      	mov	fp, r3
 8000b32:	e754      	b.n	80009de <__aeabi_fmul+0x36>
 8000b34:	0018      	movs	r0, r3
 8000b36:	f001 f98b 	bl	8001e50 <__clzsi2>
 8000b3a:	464a      	mov	r2, r9
 8000b3c:	1f43      	subs	r3, r0, #5
 8000b3e:	2576      	movs	r5, #118	; 0x76
 8000b40:	409a      	lsls	r2, r3
 8000b42:	2300      	movs	r3, #0
 8000b44:	426d      	negs	r5, r5
 8000b46:	4691      	mov	r9, r2
 8000b48:	1a2d      	subs	r5, r5, r0
 8000b4a:	469a      	mov	sl, r3
 8000b4c:	469b      	mov	fp, r3
 8000b4e:	e746      	b.n	80009de <__aeabi_fmul+0x36>
 8000b50:	4652      	mov	r2, sl
 8000b52:	2303      	movs	r3, #3
 8000b54:	431a      	orrs	r2, r3
 8000b56:	4692      	mov	sl, r2
 8000b58:	2003      	movs	r0, #3
 8000b5a:	e750      	b.n	80009fe <__aeabi_fmul+0x56>
 8000b5c:	0020      	movs	r0, r4
 8000b5e:	f001 f977 	bl	8001e50 <__clzsi2>
 8000b62:	1f43      	subs	r3, r0, #5
 8000b64:	1a2d      	subs	r5, r5, r0
 8000b66:	409c      	lsls	r4, r3
 8000b68:	3d76      	subs	r5, #118	; 0x76
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	e747      	b.n	80009fe <__aeabi_fmul+0x56>
 8000b6e:	2380      	movs	r3, #128	; 0x80
 8000b70:	2700      	movs	r7, #0
 8000b72:	03db      	lsls	r3, r3, #15
 8000b74:	22ff      	movs	r2, #255	; 0xff
 8000b76:	e772      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000b78:	4642      	mov	r2, r8
 8000b7a:	e766      	b.n	8000a4a <__aeabi_fmul+0xa2>
 8000b7c:	464c      	mov	r4, r9
 8000b7e:	0032      	movs	r2, r6
 8000b80:	4658      	mov	r0, fp
 8000b82:	e762      	b.n	8000a4a <__aeabi_fmul+0xa2>
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	464a      	mov	r2, r9
 8000b88:	03db      	lsls	r3, r3, #15
 8000b8a:	421a      	tst	r2, r3
 8000b8c:	d022      	beq.n	8000bd4 <__aeabi_fmul+0x22c>
 8000b8e:	421c      	tst	r4, r3
 8000b90:	d120      	bne.n	8000bd4 <__aeabi_fmul+0x22c>
 8000b92:	4323      	orrs	r3, r4
 8000b94:	025b      	lsls	r3, r3, #9
 8000b96:	0a5b      	lsrs	r3, r3, #9
 8000b98:	4647      	mov	r7, r8
 8000b9a:	22ff      	movs	r2, #255	; 0xff
 8000b9c:	e75f      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	1a9a      	subs	r2, r3, r2
 8000ba2:	2a1b      	cmp	r2, #27
 8000ba4:	dc21      	bgt.n	8000bea <__aeabi_fmul+0x242>
 8000ba6:	0023      	movs	r3, r4
 8000ba8:	9901      	ldr	r1, [sp, #4]
 8000baa:	40d3      	lsrs	r3, r2
 8000bac:	319e      	adds	r1, #158	; 0x9e
 8000bae:	408c      	lsls	r4, r1
 8000bb0:	001a      	movs	r2, r3
 8000bb2:	0023      	movs	r3, r4
 8000bb4:	1e5c      	subs	r4, r3, #1
 8000bb6:	41a3      	sbcs	r3, r4
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	075a      	lsls	r2, r3, #29
 8000bbc:	d004      	beq.n	8000bc8 <__aeabi_fmul+0x220>
 8000bbe:	220f      	movs	r2, #15
 8000bc0:	401a      	ands	r2, r3
 8000bc2:	2a04      	cmp	r2, #4
 8000bc4:	d000      	beq.n	8000bc8 <__aeabi_fmul+0x220>
 8000bc6:	3304      	adds	r3, #4
 8000bc8:	015a      	lsls	r2, r3, #5
 8000bca:	d411      	bmi.n	8000bf0 <__aeabi_fmul+0x248>
 8000bcc:	019b      	lsls	r3, r3, #6
 8000bce:	0a5b      	lsrs	r3, r3, #9
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	e744      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000bd4:	2380      	movs	r3, #128	; 0x80
 8000bd6:	464a      	mov	r2, r9
 8000bd8:	03db      	lsls	r3, r3, #15
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	025b      	lsls	r3, r3, #9
 8000bde:	0a5b      	lsrs	r3, r3, #9
 8000be0:	0037      	movs	r7, r6
 8000be2:	22ff      	movs	r2, #255	; 0xff
 8000be4:	e73b      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000be6:	9501      	str	r5, [sp, #4]
 8000be8:	e787      	b.n	8000afa <__aeabi_fmul+0x152>
 8000bea:	2200      	movs	r2, #0
 8000bec:	2300      	movs	r3, #0
 8000bee:	e736      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e733      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	03db      	lsls	r3, r3, #15
 8000bfa:	4323      	orrs	r3, r4
 8000bfc:	025b      	lsls	r3, r3, #9
 8000bfe:	0a5b      	lsrs	r3, r3, #9
 8000c00:	22ff      	movs	r2, #255	; 0xff
 8000c02:	e72c      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000c04:	0800738c 	.word	0x0800738c
 8000c08:	f7ffffff 	.word	0xf7ffffff

08000c0c <__aeabi_fsub>:
 8000c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0e:	4647      	mov	r7, r8
 8000c10:	46ce      	mov	lr, r9
 8000c12:	0044      	lsls	r4, r0, #1
 8000c14:	0fc2      	lsrs	r2, r0, #31
 8000c16:	b580      	push	{r7, lr}
 8000c18:	0247      	lsls	r7, r0, #9
 8000c1a:	0248      	lsls	r0, r1, #9
 8000c1c:	0a40      	lsrs	r0, r0, #9
 8000c1e:	4684      	mov	ip, r0
 8000c20:	4666      	mov	r6, ip
 8000c22:	0048      	lsls	r0, r1, #1
 8000c24:	0a7f      	lsrs	r7, r7, #9
 8000c26:	0e24      	lsrs	r4, r4, #24
 8000c28:	00f6      	lsls	r6, r6, #3
 8000c2a:	0025      	movs	r5, r4
 8000c2c:	4690      	mov	r8, r2
 8000c2e:	00fb      	lsls	r3, r7, #3
 8000c30:	0e00      	lsrs	r0, r0, #24
 8000c32:	0fc9      	lsrs	r1, r1, #31
 8000c34:	46b1      	mov	r9, r6
 8000c36:	28ff      	cmp	r0, #255	; 0xff
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fsub+0x30>
 8000c3a:	e085      	b.n	8000d48 <__aeabi_fsub+0x13c>
 8000c3c:	2601      	movs	r6, #1
 8000c3e:	4071      	eors	r1, r6
 8000c40:	1a26      	subs	r6, r4, r0
 8000c42:	4291      	cmp	r1, r2
 8000c44:	d057      	beq.n	8000cf6 <__aeabi_fsub+0xea>
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	dd43      	ble.n	8000cd2 <__aeabi_fsub+0xc6>
 8000c4a:	2800      	cmp	r0, #0
 8000c4c:	d000      	beq.n	8000c50 <__aeabi_fsub+0x44>
 8000c4e:	e07f      	b.n	8000d50 <__aeabi_fsub+0x144>
 8000c50:	4649      	mov	r1, r9
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d100      	bne.n	8000c58 <__aeabi_fsub+0x4c>
 8000c56:	e0aa      	b.n	8000dae <__aeabi_fsub+0x1a2>
 8000c58:	3e01      	subs	r6, #1
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	d000      	beq.n	8000c60 <__aeabi_fsub+0x54>
 8000c5e:	e0f7      	b.n	8000e50 <__aeabi_fsub+0x244>
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	015a      	lsls	r2, r3, #5
 8000c64:	d400      	bmi.n	8000c68 <__aeabi_fsub+0x5c>
 8000c66:	e08b      	b.n	8000d80 <__aeabi_fsub+0x174>
 8000c68:	019b      	lsls	r3, r3, #6
 8000c6a:	099c      	lsrs	r4, r3, #6
 8000c6c:	0020      	movs	r0, r4
 8000c6e:	f001 f8ef 	bl	8001e50 <__clzsi2>
 8000c72:	3805      	subs	r0, #5
 8000c74:	4084      	lsls	r4, r0
 8000c76:	4285      	cmp	r5, r0
 8000c78:	dd00      	ble.n	8000c7c <__aeabi_fsub+0x70>
 8000c7a:	e0d3      	b.n	8000e24 <__aeabi_fsub+0x218>
 8000c7c:	1b45      	subs	r5, r0, r5
 8000c7e:	0023      	movs	r3, r4
 8000c80:	2020      	movs	r0, #32
 8000c82:	3501      	adds	r5, #1
 8000c84:	40eb      	lsrs	r3, r5
 8000c86:	1b45      	subs	r5, r0, r5
 8000c88:	40ac      	lsls	r4, r5
 8000c8a:	1e62      	subs	r2, r4, #1
 8000c8c:	4194      	sbcs	r4, r2
 8000c8e:	4323      	orrs	r3, r4
 8000c90:	2407      	movs	r4, #7
 8000c92:	2500      	movs	r5, #0
 8000c94:	401c      	ands	r4, r3
 8000c96:	2201      	movs	r2, #1
 8000c98:	4641      	mov	r1, r8
 8000c9a:	400a      	ands	r2, r1
 8000c9c:	2c00      	cmp	r4, #0
 8000c9e:	d004      	beq.n	8000caa <__aeabi_fsub+0x9e>
 8000ca0:	210f      	movs	r1, #15
 8000ca2:	4019      	ands	r1, r3
 8000ca4:	2904      	cmp	r1, #4
 8000ca6:	d000      	beq.n	8000caa <__aeabi_fsub+0x9e>
 8000ca8:	3304      	adds	r3, #4
 8000caa:	0159      	lsls	r1, r3, #5
 8000cac:	d400      	bmi.n	8000cb0 <__aeabi_fsub+0xa4>
 8000cae:	e080      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000cb0:	3501      	adds	r5, #1
 8000cb2:	b2ec      	uxtb	r4, r5
 8000cb4:	2dff      	cmp	r5, #255	; 0xff
 8000cb6:	d000      	beq.n	8000cba <__aeabi_fsub+0xae>
 8000cb8:	e0a3      	b.n	8000e02 <__aeabi_fsub+0x1f6>
 8000cba:	24ff      	movs	r4, #255	; 0xff
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	025b      	lsls	r3, r3, #9
 8000cc0:	05e4      	lsls	r4, r4, #23
 8000cc2:	0a58      	lsrs	r0, r3, #9
 8000cc4:	07d2      	lsls	r2, r2, #31
 8000cc6:	4320      	orrs	r0, r4
 8000cc8:	4310      	orrs	r0, r2
 8000cca:	bc0c      	pop	{r2, r3}
 8000ccc:	4690      	mov	r8, r2
 8000cce:	4699      	mov	r9, r3
 8000cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d174      	bne.n	8000dc0 <__aeabi_fsub+0x1b4>
 8000cd6:	1c60      	adds	r0, r4, #1
 8000cd8:	b2c0      	uxtb	r0, r0
 8000cda:	2801      	cmp	r0, #1
 8000cdc:	dc00      	bgt.n	8000ce0 <__aeabi_fsub+0xd4>
 8000cde:	e0a7      	b.n	8000e30 <__aeabi_fsub+0x224>
 8000ce0:	464a      	mov	r2, r9
 8000ce2:	1a9c      	subs	r4, r3, r2
 8000ce4:	0162      	lsls	r2, r4, #5
 8000ce6:	d500      	bpl.n	8000cea <__aeabi_fsub+0xde>
 8000ce8:	e0b6      	b.n	8000e58 <__aeabi_fsub+0x24c>
 8000cea:	2c00      	cmp	r4, #0
 8000cec:	d1be      	bne.n	8000c6c <__aeabi_fsub+0x60>
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2400      	movs	r4, #0
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e7e3      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	dc00      	bgt.n	8000cfc <__aeabi_fsub+0xf0>
 8000cfa:	e085      	b.n	8000e08 <__aeabi_fsub+0x1fc>
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	d046      	beq.n	8000d8e <__aeabi_fsub+0x182>
 8000d00:	2cff      	cmp	r4, #255	; 0xff
 8000d02:	d049      	beq.n	8000d98 <__aeabi_fsub+0x18c>
 8000d04:	2280      	movs	r2, #128	; 0x80
 8000d06:	4648      	mov	r0, r9
 8000d08:	04d2      	lsls	r2, r2, #19
 8000d0a:	4310      	orrs	r0, r2
 8000d0c:	4681      	mov	r9, r0
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2e1b      	cmp	r6, #27
 8000d12:	dc09      	bgt.n	8000d28 <__aeabi_fsub+0x11c>
 8000d14:	2020      	movs	r0, #32
 8000d16:	464c      	mov	r4, r9
 8000d18:	1b80      	subs	r0, r0, r6
 8000d1a:	4084      	lsls	r4, r0
 8000d1c:	464a      	mov	r2, r9
 8000d1e:	0020      	movs	r0, r4
 8000d20:	40f2      	lsrs	r2, r6
 8000d22:	1e44      	subs	r4, r0, #1
 8000d24:	41a0      	sbcs	r0, r4
 8000d26:	4302      	orrs	r2, r0
 8000d28:	189b      	adds	r3, r3, r2
 8000d2a:	015a      	lsls	r2, r3, #5
 8000d2c:	d528      	bpl.n	8000d80 <__aeabi_fsub+0x174>
 8000d2e:	3501      	adds	r5, #1
 8000d30:	2dff      	cmp	r5, #255	; 0xff
 8000d32:	d100      	bne.n	8000d36 <__aeabi_fsub+0x12a>
 8000d34:	e0a8      	b.n	8000e88 <__aeabi_fsub+0x27c>
 8000d36:	2201      	movs	r2, #1
 8000d38:	2407      	movs	r4, #7
 8000d3a:	4994      	ldr	r1, [pc, #592]	; (8000f8c <__aeabi_fsub+0x380>)
 8000d3c:	401a      	ands	r2, r3
 8000d3e:	085b      	lsrs	r3, r3, #1
 8000d40:	400b      	ands	r3, r1
 8000d42:	4313      	orrs	r3, r2
 8000d44:	401c      	ands	r4, r3
 8000d46:	e7a6      	b.n	8000c96 <__aeabi_fsub+0x8a>
 8000d48:	2e00      	cmp	r6, #0
 8000d4a:	d000      	beq.n	8000d4e <__aeabi_fsub+0x142>
 8000d4c:	e778      	b.n	8000c40 <__aeabi_fsub+0x34>
 8000d4e:	e775      	b.n	8000c3c <__aeabi_fsub+0x30>
 8000d50:	2cff      	cmp	r4, #255	; 0xff
 8000d52:	d054      	beq.n	8000dfe <__aeabi_fsub+0x1f2>
 8000d54:	2280      	movs	r2, #128	; 0x80
 8000d56:	4649      	mov	r1, r9
 8000d58:	04d2      	lsls	r2, r2, #19
 8000d5a:	4311      	orrs	r1, r2
 8000d5c:	4689      	mov	r9, r1
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2e1b      	cmp	r6, #27
 8000d62:	dc09      	bgt.n	8000d78 <__aeabi_fsub+0x16c>
 8000d64:	2120      	movs	r1, #32
 8000d66:	4648      	mov	r0, r9
 8000d68:	1b89      	subs	r1, r1, r6
 8000d6a:	4088      	lsls	r0, r1
 8000d6c:	464a      	mov	r2, r9
 8000d6e:	0001      	movs	r1, r0
 8000d70:	40f2      	lsrs	r2, r6
 8000d72:	1e48      	subs	r0, r1, #1
 8000d74:	4181      	sbcs	r1, r0
 8000d76:	430a      	orrs	r2, r1
 8000d78:	1a9b      	subs	r3, r3, r2
 8000d7a:	015a      	lsls	r2, r3, #5
 8000d7c:	d500      	bpl.n	8000d80 <__aeabi_fsub+0x174>
 8000d7e:	e773      	b.n	8000c68 <__aeabi_fsub+0x5c>
 8000d80:	2201      	movs	r2, #1
 8000d82:	4641      	mov	r1, r8
 8000d84:	400a      	ands	r2, r1
 8000d86:	0759      	lsls	r1, r3, #29
 8000d88:	d000      	beq.n	8000d8c <__aeabi_fsub+0x180>
 8000d8a:	e789      	b.n	8000ca0 <__aeabi_fsub+0x94>
 8000d8c:	e011      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000d8e:	4648      	mov	r0, r9
 8000d90:	2800      	cmp	r0, #0
 8000d92:	d158      	bne.n	8000e46 <__aeabi_fsub+0x23a>
 8000d94:	2cff      	cmp	r4, #255	; 0xff
 8000d96:	d10c      	bne.n	8000db2 <__aeabi_fsub+0x1a6>
 8000d98:	08db      	lsrs	r3, r3, #3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_fsub+0x194>
 8000d9e:	e78c      	b.n	8000cba <__aeabi_fsub+0xae>
 8000da0:	2080      	movs	r0, #128	; 0x80
 8000da2:	03c0      	lsls	r0, r0, #15
 8000da4:	4303      	orrs	r3, r0
 8000da6:	025b      	lsls	r3, r3, #9
 8000da8:	0a5b      	lsrs	r3, r3, #9
 8000daa:	24ff      	movs	r4, #255	; 0xff
 8000dac:	e787      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000dae:	2cff      	cmp	r4, #255	; 0xff
 8000db0:	d025      	beq.n	8000dfe <__aeabi_fsub+0x1f2>
 8000db2:	08db      	lsrs	r3, r3, #3
 8000db4:	2dff      	cmp	r5, #255	; 0xff
 8000db6:	d0f0      	beq.n	8000d9a <__aeabi_fsub+0x18e>
 8000db8:	025b      	lsls	r3, r3, #9
 8000dba:	0a5b      	lsrs	r3, r3, #9
 8000dbc:	b2ec      	uxtb	r4, r5
 8000dbe:	e77e      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000dc0:	2c00      	cmp	r4, #0
 8000dc2:	d04d      	beq.n	8000e60 <__aeabi_fsub+0x254>
 8000dc4:	28ff      	cmp	r0, #255	; 0xff
 8000dc6:	d018      	beq.n	8000dfa <__aeabi_fsub+0x1ee>
 8000dc8:	2480      	movs	r4, #128	; 0x80
 8000dca:	04e4      	lsls	r4, r4, #19
 8000dcc:	4272      	negs	r2, r6
 8000dce:	4323      	orrs	r3, r4
 8000dd0:	2a1b      	cmp	r2, #27
 8000dd2:	dd00      	ble.n	8000dd6 <__aeabi_fsub+0x1ca>
 8000dd4:	e0c4      	b.n	8000f60 <__aeabi_fsub+0x354>
 8000dd6:	001c      	movs	r4, r3
 8000dd8:	2520      	movs	r5, #32
 8000dda:	40d4      	lsrs	r4, r2
 8000ddc:	1aaa      	subs	r2, r5, r2
 8000dde:	4093      	lsls	r3, r2
 8000de0:	1e5a      	subs	r2, r3, #1
 8000de2:	4193      	sbcs	r3, r2
 8000de4:	4323      	orrs	r3, r4
 8000de6:	464a      	mov	r2, r9
 8000de8:	0005      	movs	r5, r0
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	4688      	mov	r8, r1
 8000dee:	e738      	b.n	8000c62 <__aeabi_fsub+0x56>
 8000df0:	1c72      	adds	r2, r6, #1
 8000df2:	d0f8      	beq.n	8000de6 <__aeabi_fsub+0x1da>
 8000df4:	43f2      	mvns	r2, r6
 8000df6:	28ff      	cmp	r0, #255	; 0xff
 8000df8:	d1ea      	bne.n	8000dd0 <__aeabi_fsub+0x1c4>
 8000dfa:	000a      	movs	r2, r1
 8000dfc:	464b      	mov	r3, r9
 8000dfe:	25ff      	movs	r5, #255	; 0xff
 8000e00:	e7d7      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000e02:	019b      	lsls	r3, r3, #6
 8000e04:	0a5b      	lsrs	r3, r3, #9
 8000e06:	e75a      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d141      	bne.n	8000e90 <__aeabi_fsub+0x284>
 8000e0c:	1c65      	adds	r5, r4, #1
 8000e0e:	b2e9      	uxtb	r1, r5
 8000e10:	2901      	cmp	r1, #1
 8000e12:	dd45      	ble.n	8000ea0 <__aeabi_fsub+0x294>
 8000e14:	2dff      	cmp	r5, #255	; 0xff
 8000e16:	d100      	bne.n	8000e1a <__aeabi_fsub+0x20e>
 8000e18:	e74f      	b.n	8000cba <__aeabi_fsub+0xae>
 8000e1a:	2407      	movs	r4, #7
 8000e1c:	444b      	add	r3, r9
 8000e1e:	085b      	lsrs	r3, r3, #1
 8000e20:	401c      	ands	r4, r3
 8000e22:	e738      	b.n	8000c96 <__aeabi_fsub+0x8a>
 8000e24:	2207      	movs	r2, #7
 8000e26:	4b5a      	ldr	r3, [pc, #360]	; (8000f90 <__aeabi_fsub+0x384>)
 8000e28:	1a2d      	subs	r5, r5, r0
 8000e2a:	4023      	ands	r3, r4
 8000e2c:	4014      	ands	r4, r2
 8000e2e:	e732      	b.n	8000c96 <__aeabi_fsub+0x8a>
 8000e30:	2c00      	cmp	r4, #0
 8000e32:	d11d      	bne.n	8000e70 <__aeabi_fsub+0x264>
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d17a      	bne.n	8000f2e <__aeabi_fsub+0x322>
 8000e38:	464b      	mov	r3, r9
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d100      	bne.n	8000e40 <__aeabi_fsub+0x234>
 8000e3e:	e091      	b.n	8000f64 <__aeabi_fsub+0x358>
 8000e40:	000a      	movs	r2, r1
 8000e42:	2500      	movs	r5, #0
 8000e44:	e7b5      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000e46:	3e01      	subs	r6, #1
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d119      	bne.n	8000e80 <__aeabi_fsub+0x274>
 8000e4c:	444b      	add	r3, r9
 8000e4e:	e76c      	b.n	8000d2a <__aeabi_fsub+0x11e>
 8000e50:	2cff      	cmp	r4, #255	; 0xff
 8000e52:	d184      	bne.n	8000d5e <__aeabi_fsub+0x152>
 8000e54:	25ff      	movs	r5, #255	; 0xff
 8000e56:	e7ac      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000e58:	464a      	mov	r2, r9
 8000e5a:	4688      	mov	r8, r1
 8000e5c:	1ad4      	subs	r4, r2, r3
 8000e5e:	e705      	b.n	8000c6c <__aeabi_fsub+0x60>
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1c5      	bne.n	8000df0 <__aeabi_fsub+0x1e4>
 8000e64:	000a      	movs	r2, r1
 8000e66:	28ff      	cmp	r0, #255	; 0xff
 8000e68:	d0c8      	beq.n	8000dfc <__aeabi_fsub+0x1f0>
 8000e6a:	0005      	movs	r5, r0
 8000e6c:	464b      	mov	r3, r9
 8000e6e:	e7a0      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d149      	bne.n	8000f08 <__aeabi_fsub+0x2fc>
 8000e74:	464b      	mov	r3, r9
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d077      	beq.n	8000f6a <__aeabi_fsub+0x35e>
 8000e7a:	000a      	movs	r2, r1
 8000e7c:	25ff      	movs	r5, #255	; 0xff
 8000e7e:	e798      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000e80:	2cff      	cmp	r4, #255	; 0xff
 8000e82:	d000      	beq.n	8000e86 <__aeabi_fsub+0x27a>
 8000e84:	e743      	b.n	8000d0e <__aeabi_fsub+0x102>
 8000e86:	e787      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000e88:	000a      	movs	r2, r1
 8000e8a:	24ff      	movs	r4, #255	; 0xff
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e716      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000e90:	2c00      	cmp	r4, #0
 8000e92:	d115      	bne.n	8000ec0 <__aeabi_fsub+0x2b4>
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d157      	bne.n	8000f48 <__aeabi_fsub+0x33c>
 8000e98:	28ff      	cmp	r0, #255	; 0xff
 8000e9a:	d1e6      	bne.n	8000e6a <__aeabi_fsub+0x25e>
 8000e9c:	464b      	mov	r3, r9
 8000e9e:	e77b      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000ea0:	2c00      	cmp	r4, #0
 8000ea2:	d120      	bne.n	8000ee6 <__aeabi_fsub+0x2da>
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d057      	beq.n	8000f58 <__aeabi_fsub+0x34c>
 8000ea8:	4649      	mov	r1, r9
 8000eaa:	2900      	cmp	r1, #0
 8000eac:	d053      	beq.n	8000f56 <__aeabi_fsub+0x34a>
 8000eae:	444b      	add	r3, r9
 8000eb0:	015a      	lsls	r2, r3, #5
 8000eb2:	d568      	bpl.n	8000f86 <__aeabi_fsub+0x37a>
 8000eb4:	2407      	movs	r4, #7
 8000eb6:	4a36      	ldr	r2, [pc, #216]	; (8000f90 <__aeabi_fsub+0x384>)
 8000eb8:	401c      	ands	r4, r3
 8000eba:	2501      	movs	r5, #1
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	e6ea      	b.n	8000c96 <__aeabi_fsub+0x8a>
 8000ec0:	28ff      	cmp	r0, #255	; 0xff
 8000ec2:	d0eb      	beq.n	8000e9c <__aeabi_fsub+0x290>
 8000ec4:	2280      	movs	r2, #128	; 0x80
 8000ec6:	04d2      	lsls	r2, r2, #19
 8000ec8:	4276      	negs	r6, r6
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	2e1b      	cmp	r6, #27
 8000ece:	dc53      	bgt.n	8000f78 <__aeabi_fsub+0x36c>
 8000ed0:	2520      	movs	r5, #32
 8000ed2:	1bad      	subs	r5, r5, r6
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	40ab      	lsls	r3, r5
 8000ed8:	40f2      	lsrs	r2, r6
 8000eda:	1e5c      	subs	r4, r3, #1
 8000edc:	41a3      	sbcs	r3, r4
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	444b      	add	r3, r9
 8000ee2:	0005      	movs	r5, r0
 8000ee4:	e721      	b.n	8000d2a <__aeabi_fsub+0x11e>
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0d8      	beq.n	8000e9c <__aeabi_fsub+0x290>
 8000eea:	4649      	mov	r1, r9
 8000eec:	2900      	cmp	r1, #0
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_fsub+0x2e6>
 8000ef0:	e752      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000ef2:	2180      	movs	r1, #128	; 0x80
 8000ef4:	03c9      	lsls	r1, r1, #15
 8000ef6:	420f      	tst	r7, r1
 8000ef8:	d100      	bne.n	8000efc <__aeabi_fsub+0x2f0>
 8000efa:	e74d      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000efc:	4660      	mov	r0, ip
 8000efe:	4208      	tst	r0, r1
 8000f00:	d000      	beq.n	8000f04 <__aeabi_fsub+0x2f8>
 8000f02:	e749      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000f04:	464b      	mov	r3, r9
 8000f06:	e747      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000f08:	4648      	mov	r0, r9
 8000f0a:	25ff      	movs	r5, #255	; 0xff
 8000f0c:	2800      	cmp	r0, #0
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_fsub+0x306>
 8000f10:	e74f      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000f12:	2280      	movs	r2, #128	; 0x80
 8000f14:	03d2      	lsls	r2, r2, #15
 8000f16:	4217      	tst	r7, r2
 8000f18:	d004      	beq.n	8000f24 <__aeabi_fsub+0x318>
 8000f1a:	4660      	mov	r0, ip
 8000f1c:	4210      	tst	r0, r2
 8000f1e:	d101      	bne.n	8000f24 <__aeabi_fsub+0x318>
 8000f20:	464b      	mov	r3, r9
 8000f22:	4688      	mov	r8, r1
 8000f24:	2201      	movs	r2, #1
 8000f26:	4641      	mov	r1, r8
 8000f28:	25ff      	movs	r5, #255	; 0xff
 8000f2a:	400a      	ands	r2, r1
 8000f2c:	e741      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000f2e:	4648      	mov	r0, r9
 8000f30:	2800      	cmp	r0, #0
 8000f32:	d01f      	beq.n	8000f74 <__aeabi_fsub+0x368>
 8000f34:	1a1a      	subs	r2, r3, r0
 8000f36:	0150      	lsls	r0, r2, #5
 8000f38:	d520      	bpl.n	8000f7c <__aeabi_fsub+0x370>
 8000f3a:	464a      	mov	r2, r9
 8000f3c:	2407      	movs	r4, #7
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	401c      	ands	r4, r3
 8000f42:	4688      	mov	r8, r1
 8000f44:	2500      	movs	r5, #0
 8000f46:	e6a6      	b.n	8000c96 <__aeabi_fsub+0x8a>
 8000f48:	1c74      	adds	r4, r6, #1
 8000f4a:	d0c9      	beq.n	8000ee0 <__aeabi_fsub+0x2d4>
 8000f4c:	43f6      	mvns	r6, r6
 8000f4e:	28ff      	cmp	r0, #255	; 0xff
 8000f50:	d1bc      	bne.n	8000ecc <__aeabi_fsub+0x2c0>
 8000f52:	464b      	mov	r3, r9
 8000f54:	e720      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000f56:	4699      	mov	r9, r3
 8000f58:	464b      	mov	r3, r9
 8000f5a:	2500      	movs	r5, #0
 8000f5c:	08db      	lsrs	r3, r3, #3
 8000f5e:	e72b      	b.n	8000db8 <__aeabi_fsub+0x1ac>
 8000f60:	2301      	movs	r3, #1
 8000f62:	e740      	b.n	8000de6 <__aeabi_fsub+0x1da>
 8000f64:	2200      	movs	r2, #0
 8000f66:	2300      	movs	r3, #0
 8000f68:	e6a9      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	03db      	lsls	r3, r3, #15
 8000f70:	24ff      	movs	r4, #255	; 0xff
 8000f72:	e6a4      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000f74:	2500      	movs	r5, #0
 8000f76:	e71c      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e7b1      	b.n	8000ee0 <__aeabi_fsub+0x2d4>
 8000f7c:	2a00      	cmp	r2, #0
 8000f7e:	d0f1      	beq.n	8000f64 <__aeabi_fsub+0x358>
 8000f80:	0013      	movs	r3, r2
 8000f82:	2500      	movs	r5, #0
 8000f84:	e6fc      	b.n	8000d80 <__aeabi_fsub+0x174>
 8000f86:	2500      	movs	r5, #0
 8000f88:	e6fa      	b.n	8000d80 <__aeabi_fsub+0x174>
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	7dffffff 	.word	0x7dffffff
 8000f90:	fbffffff 	.word	0xfbffffff

08000f94 <__aeabi_f2iz>:
 8000f94:	0241      	lsls	r1, r0, #9
 8000f96:	0042      	lsls	r2, r0, #1
 8000f98:	0fc3      	lsrs	r3, r0, #31
 8000f9a:	0a49      	lsrs	r1, r1, #9
 8000f9c:	0e12      	lsrs	r2, r2, #24
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	2a7e      	cmp	r2, #126	; 0x7e
 8000fa2:	d90d      	bls.n	8000fc0 <__aeabi_f2iz+0x2c>
 8000fa4:	2a9d      	cmp	r2, #157	; 0x9d
 8000fa6:	d80c      	bhi.n	8000fc2 <__aeabi_f2iz+0x2e>
 8000fa8:	2080      	movs	r0, #128	; 0x80
 8000faa:	0400      	lsls	r0, r0, #16
 8000fac:	4301      	orrs	r1, r0
 8000fae:	2a95      	cmp	r2, #149	; 0x95
 8000fb0:	dc0a      	bgt.n	8000fc8 <__aeabi_f2iz+0x34>
 8000fb2:	2096      	movs	r0, #150	; 0x96
 8000fb4:	1a82      	subs	r2, r0, r2
 8000fb6:	40d1      	lsrs	r1, r2
 8000fb8:	4248      	negs	r0, r1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d100      	bne.n	8000fc0 <__aeabi_f2iz+0x2c>
 8000fbe:	0008      	movs	r0, r1
 8000fc0:	4770      	bx	lr
 8000fc2:	4a03      	ldr	r2, [pc, #12]	; (8000fd0 <__aeabi_f2iz+0x3c>)
 8000fc4:	1898      	adds	r0, r3, r2
 8000fc6:	e7fb      	b.n	8000fc0 <__aeabi_f2iz+0x2c>
 8000fc8:	3a96      	subs	r2, #150	; 0x96
 8000fca:	4091      	lsls	r1, r2
 8000fcc:	e7f4      	b.n	8000fb8 <__aeabi_f2iz+0x24>
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	7fffffff 	.word	0x7fffffff

08000fd4 <__aeabi_i2f>:
 8000fd4:	b570      	push	{r4, r5, r6, lr}
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	d03d      	beq.n	8001056 <__aeabi_i2f+0x82>
 8000fda:	17c3      	asrs	r3, r0, #31
 8000fdc:	18c5      	adds	r5, r0, r3
 8000fde:	405d      	eors	r5, r3
 8000fe0:	0fc4      	lsrs	r4, r0, #31
 8000fe2:	0028      	movs	r0, r5
 8000fe4:	f000 ff34 	bl	8001e50 <__clzsi2>
 8000fe8:	229e      	movs	r2, #158	; 0x9e
 8000fea:	1a12      	subs	r2, r2, r0
 8000fec:	2a96      	cmp	r2, #150	; 0x96
 8000fee:	dc07      	bgt.n	8001000 <__aeabi_i2f+0x2c>
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	2808      	cmp	r0, #8
 8000ff4:	dd33      	ble.n	800105e <__aeabi_i2f+0x8a>
 8000ff6:	3808      	subs	r0, #8
 8000ff8:	4085      	lsls	r5, r0
 8000ffa:	0268      	lsls	r0, r5, #9
 8000ffc:	0a40      	lsrs	r0, r0, #9
 8000ffe:	e023      	b.n	8001048 <__aeabi_i2f+0x74>
 8001000:	2a99      	cmp	r2, #153	; 0x99
 8001002:	dd0b      	ble.n	800101c <__aeabi_i2f+0x48>
 8001004:	2305      	movs	r3, #5
 8001006:	0029      	movs	r1, r5
 8001008:	1a1b      	subs	r3, r3, r0
 800100a:	40d9      	lsrs	r1, r3
 800100c:	0003      	movs	r3, r0
 800100e:	331b      	adds	r3, #27
 8001010:	409d      	lsls	r5, r3
 8001012:	002b      	movs	r3, r5
 8001014:	1e5d      	subs	r5, r3, #1
 8001016:	41ab      	sbcs	r3, r5
 8001018:	4319      	orrs	r1, r3
 800101a:	000d      	movs	r5, r1
 800101c:	2805      	cmp	r0, #5
 800101e:	dd01      	ble.n	8001024 <__aeabi_i2f+0x50>
 8001020:	1f43      	subs	r3, r0, #5
 8001022:	409d      	lsls	r5, r3
 8001024:	002b      	movs	r3, r5
 8001026:	490f      	ldr	r1, [pc, #60]	; (8001064 <__aeabi_i2f+0x90>)
 8001028:	400b      	ands	r3, r1
 800102a:	076e      	lsls	r6, r5, #29
 800102c:	d009      	beq.n	8001042 <__aeabi_i2f+0x6e>
 800102e:	260f      	movs	r6, #15
 8001030:	4035      	ands	r5, r6
 8001032:	2d04      	cmp	r5, #4
 8001034:	d005      	beq.n	8001042 <__aeabi_i2f+0x6e>
 8001036:	3304      	adds	r3, #4
 8001038:	015d      	lsls	r5, r3, #5
 800103a:	d502      	bpl.n	8001042 <__aeabi_i2f+0x6e>
 800103c:	229f      	movs	r2, #159	; 0x9f
 800103e:	400b      	ands	r3, r1
 8001040:	1a12      	subs	r2, r2, r0
 8001042:	019b      	lsls	r3, r3, #6
 8001044:	0a58      	lsrs	r0, r3, #9
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	0240      	lsls	r0, r0, #9
 800104a:	05d2      	lsls	r2, r2, #23
 800104c:	0a40      	lsrs	r0, r0, #9
 800104e:	07e4      	lsls	r4, r4, #31
 8001050:	4310      	orrs	r0, r2
 8001052:	4320      	orrs	r0, r4
 8001054:	bd70      	pop	{r4, r5, r6, pc}
 8001056:	2400      	movs	r4, #0
 8001058:	2200      	movs	r2, #0
 800105a:	2000      	movs	r0, #0
 800105c:	e7f4      	b.n	8001048 <__aeabi_i2f+0x74>
 800105e:	0268      	lsls	r0, r5, #9
 8001060:	0a40      	lsrs	r0, r0, #9
 8001062:	e7f1      	b.n	8001048 <__aeabi_i2f+0x74>
 8001064:	fbffffff 	.word	0xfbffffff

08001068 <__aeabi_dadd>:
 8001068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800106a:	464f      	mov	r7, r9
 800106c:	4646      	mov	r6, r8
 800106e:	46d6      	mov	lr, sl
 8001070:	000c      	movs	r4, r1
 8001072:	0309      	lsls	r1, r1, #12
 8001074:	b5c0      	push	{r6, r7, lr}
 8001076:	0a49      	lsrs	r1, r1, #9
 8001078:	0f47      	lsrs	r7, r0, #29
 800107a:	005e      	lsls	r6, r3, #1
 800107c:	4339      	orrs	r1, r7
 800107e:	031f      	lsls	r7, r3, #12
 8001080:	0fdb      	lsrs	r3, r3, #31
 8001082:	469c      	mov	ip, r3
 8001084:	0065      	lsls	r5, r4, #1
 8001086:	0a7b      	lsrs	r3, r7, #9
 8001088:	0f57      	lsrs	r7, r2, #29
 800108a:	431f      	orrs	r7, r3
 800108c:	0d6d      	lsrs	r5, r5, #21
 800108e:	0fe4      	lsrs	r4, r4, #31
 8001090:	0d76      	lsrs	r6, r6, #21
 8001092:	46a1      	mov	r9, r4
 8001094:	00c0      	lsls	r0, r0, #3
 8001096:	46b8      	mov	r8, r7
 8001098:	00d2      	lsls	r2, r2, #3
 800109a:	1bab      	subs	r3, r5, r6
 800109c:	4564      	cmp	r4, ip
 800109e:	d07b      	beq.n	8001198 <__aeabi_dadd+0x130>
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	dd5f      	ble.n	8001164 <__aeabi_dadd+0xfc>
 80010a4:	2e00      	cmp	r6, #0
 80010a6:	d000      	beq.n	80010aa <__aeabi_dadd+0x42>
 80010a8:	e0a4      	b.n	80011f4 <__aeabi_dadd+0x18c>
 80010aa:	003e      	movs	r6, r7
 80010ac:	4316      	orrs	r6, r2
 80010ae:	d100      	bne.n	80010b2 <__aeabi_dadd+0x4a>
 80010b0:	e112      	b.n	80012d8 <__aeabi_dadd+0x270>
 80010b2:	1e5e      	subs	r6, r3, #1
 80010b4:	2e00      	cmp	r6, #0
 80010b6:	d000      	beq.n	80010ba <__aeabi_dadd+0x52>
 80010b8:	e19e      	b.n	80013f8 <__aeabi_dadd+0x390>
 80010ba:	1a87      	subs	r7, r0, r2
 80010bc:	4643      	mov	r3, r8
 80010be:	42b8      	cmp	r0, r7
 80010c0:	4180      	sbcs	r0, r0
 80010c2:	2501      	movs	r5, #1
 80010c4:	1ac9      	subs	r1, r1, r3
 80010c6:	4240      	negs	r0, r0
 80010c8:	1a09      	subs	r1, r1, r0
 80010ca:	020b      	lsls	r3, r1, #8
 80010cc:	d400      	bmi.n	80010d0 <__aeabi_dadd+0x68>
 80010ce:	e131      	b.n	8001334 <__aeabi_dadd+0x2cc>
 80010d0:	0249      	lsls	r1, r1, #9
 80010d2:	0a4e      	lsrs	r6, r1, #9
 80010d4:	2e00      	cmp	r6, #0
 80010d6:	d100      	bne.n	80010da <__aeabi_dadd+0x72>
 80010d8:	e16e      	b.n	80013b8 <__aeabi_dadd+0x350>
 80010da:	0030      	movs	r0, r6
 80010dc:	f000 feb8 	bl	8001e50 <__clzsi2>
 80010e0:	0003      	movs	r3, r0
 80010e2:	3b08      	subs	r3, #8
 80010e4:	2b1f      	cmp	r3, #31
 80010e6:	dd00      	ble.n	80010ea <__aeabi_dadd+0x82>
 80010e8:	e161      	b.n	80013ae <__aeabi_dadd+0x346>
 80010ea:	2220      	movs	r2, #32
 80010ec:	0039      	movs	r1, r7
 80010ee:	1ad2      	subs	r2, r2, r3
 80010f0:	409e      	lsls	r6, r3
 80010f2:	40d1      	lsrs	r1, r2
 80010f4:	409f      	lsls	r7, r3
 80010f6:	430e      	orrs	r6, r1
 80010f8:	429d      	cmp	r5, r3
 80010fa:	dd00      	ble.n	80010fe <__aeabi_dadd+0x96>
 80010fc:	e151      	b.n	80013a2 <__aeabi_dadd+0x33a>
 80010fe:	1b5d      	subs	r5, r3, r5
 8001100:	1c6b      	adds	r3, r5, #1
 8001102:	2b1f      	cmp	r3, #31
 8001104:	dd00      	ble.n	8001108 <__aeabi_dadd+0xa0>
 8001106:	e17c      	b.n	8001402 <__aeabi_dadd+0x39a>
 8001108:	2120      	movs	r1, #32
 800110a:	1ac9      	subs	r1, r1, r3
 800110c:	003d      	movs	r5, r7
 800110e:	0030      	movs	r0, r6
 8001110:	408f      	lsls	r7, r1
 8001112:	4088      	lsls	r0, r1
 8001114:	40dd      	lsrs	r5, r3
 8001116:	1e79      	subs	r1, r7, #1
 8001118:	418f      	sbcs	r7, r1
 800111a:	0031      	movs	r1, r6
 800111c:	2207      	movs	r2, #7
 800111e:	4328      	orrs	r0, r5
 8001120:	40d9      	lsrs	r1, r3
 8001122:	2500      	movs	r5, #0
 8001124:	4307      	orrs	r7, r0
 8001126:	403a      	ands	r2, r7
 8001128:	2a00      	cmp	r2, #0
 800112a:	d009      	beq.n	8001140 <__aeabi_dadd+0xd8>
 800112c:	230f      	movs	r3, #15
 800112e:	403b      	ands	r3, r7
 8001130:	2b04      	cmp	r3, #4
 8001132:	d005      	beq.n	8001140 <__aeabi_dadd+0xd8>
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	42bb      	cmp	r3, r7
 8001138:	41bf      	sbcs	r7, r7
 800113a:	427f      	negs	r7, r7
 800113c:	19c9      	adds	r1, r1, r7
 800113e:	001f      	movs	r7, r3
 8001140:	020b      	lsls	r3, r1, #8
 8001142:	d400      	bmi.n	8001146 <__aeabi_dadd+0xde>
 8001144:	e226      	b.n	8001594 <__aeabi_dadd+0x52c>
 8001146:	1c6a      	adds	r2, r5, #1
 8001148:	4bc6      	ldr	r3, [pc, #792]	; (8001464 <__aeabi_dadd+0x3fc>)
 800114a:	0555      	lsls	r5, r2, #21
 800114c:	0d6d      	lsrs	r5, r5, #21
 800114e:	429a      	cmp	r2, r3
 8001150:	d100      	bne.n	8001154 <__aeabi_dadd+0xec>
 8001152:	e106      	b.n	8001362 <__aeabi_dadd+0x2fa>
 8001154:	4ac4      	ldr	r2, [pc, #784]	; (8001468 <__aeabi_dadd+0x400>)
 8001156:	08ff      	lsrs	r7, r7, #3
 8001158:	400a      	ands	r2, r1
 800115a:	0753      	lsls	r3, r2, #29
 800115c:	0252      	lsls	r2, r2, #9
 800115e:	433b      	orrs	r3, r7
 8001160:	0b12      	lsrs	r2, r2, #12
 8001162:	e08e      	b.n	8001282 <__aeabi_dadd+0x21a>
 8001164:	2b00      	cmp	r3, #0
 8001166:	d000      	beq.n	800116a <__aeabi_dadd+0x102>
 8001168:	e0b8      	b.n	80012dc <__aeabi_dadd+0x274>
 800116a:	1c6b      	adds	r3, r5, #1
 800116c:	055b      	lsls	r3, r3, #21
 800116e:	0d5b      	lsrs	r3, r3, #21
 8001170:	2b01      	cmp	r3, #1
 8001172:	dc00      	bgt.n	8001176 <__aeabi_dadd+0x10e>
 8001174:	e130      	b.n	80013d8 <__aeabi_dadd+0x370>
 8001176:	1a87      	subs	r7, r0, r2
 8001178:	4643      	mov	r3, r8
 800117a:	42b8      	cmp	r0, r7
 800117c:	41b6      	sbcs	r6, r6
 800117e:	1acb      	subs	r3, r1, r3
 8001180:	4276      	negs	r6, r6
 8001182:	1b9e      	subs	r6, r3, r6
 8001184:	0233      	lsls	r3, r6, #8
 8001186:	d500      	bpl.n	800118a <__aeabi_dadd+0x122>
 8001188:	e14c      	b.n	8001424 <__aeabi_dadd+0x3bc>
 800118a:	003b      	movs	r3, r7
 800118c:	4333      	orrs	r3, r6
 800118e:	d1a1      	bne.n	80010d4 <__aeabi_dadd+0x6c>
 8001190:	2200      	movs	r2, #0
 8001192:	2400      	movs	r4, #0
 8001194:	2500      	movs	r5, #0
 8001196:	e070      	b.n	800127a <__aeabi_dadd+0x212>
 8001198:	2b00      	cmp	r3, #0
 800119a:	dc00      	bgt.n	800119e <__aeabi_dadd+0x136>
 800119c:	e0e5      	b.n	800136a <__aeabi_dadd+0x302>
 800119e:	2e00      	cmp	r6, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_dadd+0x13c>
 80011a2:	e083      	b.n	80012ac <__aeabi_dadd+0x244>
 80011a4:	4eaf      	ldr	r6, [pc, #700]	; (8001464 <__aeabi_dadd+0x3fc>)
 80011a6:	42b5      	cmp	r5, r6
 80011a8:	d060      	beq.n	800126c <__aeabi_dadd+0x204>
 80011aa:	2680      	movs	r6, #128	; 0x80
 80011ac:	0436      	lsls	r6, r6, #16
 80011ae:	4337      	orrs	r7, r6
 80011b0:	46b8      	mov	r8, r7
 80011b2:	2b38      	cmp	r3, #56	; 0x38
 80011b4:	dc00      	bgt.n	80011b8 <__aeabi_dadd+0x150>
 80011b6:	e13e      	b.n	8001436 <__aeabi_dadd+0x3ce>
 80011b8:	4643      	mov	r3, r8
 80011ba:	4313      	orrs	r3, r2
 80011bc:	001f      	movs	r7, r3
 80011be:	1e7a      	subs	r2, r7, #1
 80011c0:	4197      	sbcs	r7, r2
 80011c2:	183f      	adds	r7, r7, r0
 80011c4:	4287      	cmp	r7, r0
 80011c6:	4180      	sbcs	r0, r0
 80011c8:	4240      	negs	r0, r0
 80011ca:	1809      	adds	r1, r1, r0
 80011cc:	020b      	lsls	r3, r1, #8
 80011ce:	d400      	bmi.n	80011d2 <__aeabi_dadd+0x16a>
 80011d0:	e0b0      	b.n	8001334 <__aeabi_dadd+0x2cc>
 80011d2:	4ba4      	ldr	r3, [pc, #656]	; (8001464 <__aeabi_dadd+0x3fc>)
 80011d4:	3501      	adds	r5, #1
 80011d6:	429d      	cmp	r5, r3
 80011d8:	d100      	bne.n	80011dc <__aeabi_dadd+0x174>
 80011da:	e0c3      	b.n	8001364 <__aeabi_dadd+0x2fc>
 80011dc:	4aa2      	ldr	r2, [pc, #648]	; (8001468 <__aeabi_dadd+0x400>)
 80011de:	087b      	lsrs	r3, r7, #1
 80011e0:	400a      	ands	r2, r1
 80011e2:	2101      	movs	r1, #1
 80011e4:	400f      	ands	r7, r1
 80011e6:	431f      	orrs	r7, r3
 80011e8:	0851      	lsrs	r1, r2, #1
 80011ea:	07d3      	lsls	r3, r2, #31
 80011ec:	2207      	movs	r2, #7
 80011ee:	431f      	orrs	r7, r3
 80011f0:	403a      	ands	r2, r7
 80011f2:	e799      	b.n	8001128 <__aeabi_dadd+0xc0>
 80011f4:	4e9b      	ldr	r6, [pc, #620]	; (8001464 <__aeabi_dadd+0x3fc>)
 80011f6:	42b5      	cmp	r5, r6
 80011f8:	d038      	beq.n	800126c <__aeabi_dadd+0x204>
 80011fa:	2680      	movs	r6, #128	; 0x80
 80011fc:	0436      	lsls	r6, r6, #16
 80011fe:	4337      	orrs	r7, r6
 8001200:	46b8      	mov	r8, r7
 8001202:	2b38      	cmp	r3, #56	; 0x38
 8001204:	dd00      	ble.n	8001208 <__aeabi_dadd+0x1a0>
 8001206:	e0dc      	b.n	80013c2 <__aeabi_dadd+0x35a>
 8001208:	2b1f      	cmp	r3, #31
 800120a:	dc00      	bgt.n	800120e <__aeabi_dadd+0x1a6>
 800120c:	e130      	b.n	8001470 <__aeabi_dadd+0x408>
 800120e:	001e      	movs	r6, r3
 8001210:	4647      	mov	r7, r8
 8001212:	3e20      	subs	r6, #32
 8001214:	40f7      	lsrs	r7, r6
 8001216:	46bc      	mov	ip, r7
 8001218:	2b20      	cmp	r3, #32
 800121a:	d004      	beq.n	8001226 <__aeabi_dadd+0x1be>
 800121c:	2640      	movs	r6, #64	; 0x40
 800121e:	1af3      	subs	r3, r6, r3
 8001220:	4646      	mov	r6, r8
 8001222:	409e      	lsls	r6, r3
 8001224:	4332      	orrs	r2, r6
 8001226:	0017      	movs	r7, r2
 8001228:	4663      	mov	r3, ip
 800122a:	1e7a      	subs	r2, r7, #1
 800122c:	4197      	sbcs	r7, r2
 800122e:	431f      	orrs	r7, r3
 8001230:	e0cc      	b.n	80013cc <__aeabi_dadd+0x364>
 8001232:	2b00      	cmp	r3, #0
 8001234:	d100      	bne.n	8001238 <__aeabi_dadd+0x1d0>
 8001236:	e204      	b.n	8001642 <__aeabi_dadd+0x5da>
 8001238:	4643      	mov	r3, r8
 800123a:	4313      	orrs	r3, r2
 800123c:	d100      	bne.n	8001240 <__aeabi_dadd+0x1d8>
 800123e:	e159      	b.n	80014f4 <__aeabi_dadd+0x48c>
 8001240:	074b      	lsls	r3, r1, #29
 8001242:	08c0      	lsrs	r0, r0, #3
 8001244:	4318      	orrs	r0, r3
 8001246:	2380      	movs	r3, #128	; 0x80
 8001248:	08c9      	lsrs	r1, r1, #3
 800124a:	031b      	lsls	r3, r3, #12
 800124c:	4219      	tst	r1, r3
 800124e:	d008      	beq.n	8001262 <__aeabi_dadd+0x1fa>
 8001250:	4645      	mov	r5, r8
 8001252:	08ed      	lsrs	r5, r5, #3
 8001254:	421d      	tst	r5, r3
 8001256:	d104      	bne.n	8001262 <__aeabi_dadd+0x1fa>
 8001258:	4643      	mov	r3, r8
 800125a:	08d0      	lsrs	r0, r2, #3
 800125c:	0759      	lsls	r1, r3, #29
 800125e:	4308      	orrs	r0, r1
 8001260:	0029      	movs	r1, r5
 8001262:	0f42      	lsrs	r2, r0, #29
 8001264:	00c9      	lsls	r1, r1, #3
 8001266:	4d7f      	ldr	r5, [pc, #508]	; (8001464 <__aeabi_dadd+0x3fc>)
 8001268:	4311      	orrs	r1, r2
 800126a:	00c0      	lsls	r0, r0, #3
 800126c:	074b      	lsls	r3, r1, #29
 800126e:	08ca      	lsrs	r2, r1, #3
 8001270:	497c      	ldr	r1, [pc, #496]	; (8001464 <__aeabi_dadd+0x3fc>)
 8001272:	08c0      	lsrs	r0, r0, #3
 8001274:	4303      	orrs	r3, r0
 8001276:	428d      	cmp	r5, r1
 8001278:	d068      	beq.n	800134c <__aeabi_dadd+0x2e4>
 800127a:	0312      	lsls	r2, r2, #12
 800127c:	056d      	lsls	r5, r5, #21
 800127e:	0b12      	lsrs	r2, r2, #12
 8001280:	0d6d      	lsrs	r5, r5, #21
 8001282:	2100      	movs	r1, #0
 8001284:	0312      	lsls	r2, r2, #12
 8001286:	0018      	movs	r0, r3
 8001288:	0b13      	lsrs	r3, r2, #12
 800128a:	0d0a      	lsrs	r2, r1, #20
 800128c:	0512      	lsls	r2, r2, #20
 800128e:	431a      	orrs	r2, r3
 8001290:	4b76      	ldr	r3, [pc, #472]	; (800146c <__aeabi_dadd+0x404>)
 8001292:	052d      	lsls	r5, r5, #20
 8001294:	4013      	ands	r3, r2
 8001296:	432b      	orrs	r3, r5
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	07e4      	lsls	r4, r4, #31
 800129c:	085b      	lsrs	r3, r3, #1
 800129e:	4323      	orrs	r3, r4
 80012a0:	0019      	movs	r1, r3
 80012a2:	bc1c      	pop	{r2, r3, r4}
 80012a4:	4690      	mov	r8, r2
 80012a6:	4699      	mov	r9, r3
 80012a8:	46a2      	mov	sl, r4
 80012aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ac:	003e      	movs	r6, r7
 80012ae:	4316      	orrs	r6, r2
 80012b0:	d012      	beq.n	80012d8 <__aeabi_dadd+0x270>
 80012b2:	1e5e      	subs	r6, r3, #1
 80012b4:	2e00      	cmp	r6, #0
 80012b6:	d000      	beq.n	80012ba <__aeabi_dadd+0x252>
 80012b8:	e100      	b.n	80014bc <__aeabi_dadd+0x454>
 80012ba:	1887      	adds	r7, r0, r2
 80012bc:	4287      	cmp	r7, r0
 80012be:	4180      	sbcs	r0, r0
 80012c0:	4441      	add	r1, r8
 80012c2:	4240      	negs	r0, r0
 80012c4:	1809      	adds	r1, r1, r0
 80012c6:	2501      	movs	r5, #1
 80012c8:	020b      	lsls	r3, r1, #8
 80012ca:	d533      	bpl.n	8001334 <__aeabi_dadd+0x2cc>
 80012cc:	2502      	movs	r5, #2
 80012ce:	e785      	b.n	80011dc <__aeabi_dadd+0x174>
 80012d0:	4664      	mov	r4, ip
 80012d2:	0033      	movs	r3, r6
 80012d4:	4641      	mov	r1, r8
 80012d6:	0010      	movs	r0, r2
 80012d8:	001d      	movs	r5, r3
 80012da:	e7c7      	b.n	800126c <__aeabi_dadd+0x204>
 80012dc:	2d00      	cmp	r5, #0
 80012de:	d000      	beq.n	80012e2 <__aeabi_dadd+0x27a>
 80012e0:	e0da      	b.n	8001498 <__aeabi_dadd+0x430>
 80012e2:	000c      	movs	r4, r1
 80012e4:	4304      	orrs	r4, r0
 80012e6:	d0f3      	beq.n	80012d0 <__aeabi_dadd+0x268>
 80012e8:	1c5c      	adds	r4, r3, #1
 80012ea:	d100      	bne.n	80012ee <__aeabi_dadd+0x286>
 80012ec:	e19f      	b.n	800162e <__aeabi_dadd+0x5c6>
 80012ee:	4c5d      	ldr	r4, [pc, #372]	; (8001464 <__aeabi_dadd+0x3fc>)
 80012f0:	42a6      	cmp	r6, r4
 80012f2:	d100      	bne.n	80012f6 <__aeabi_dadd+0x28e>
 80012f4:	e12f      	b.n	8001556 <__aeabi_dadd+0x4ee>
 80012f6:	43db      	mvns	r3, r3
 80012f8:	2b38      	cmp	r3, #56	; 0x38
 80012fa:	dd00      	ble.n	80012fe <__aeabi_dadd+0x296>
 80012fc:	e166      	b.n	80015cc <__aeabi_dadd+0x564>
 80012fe:	2b1f      	cmp	r3, #31
 8001300:	dd00      	ble.n	8001304 <__aeabi_dadd+0x29c>
 8001302:	e183      	b.n	800160c <__aeabi_dadd+0x5a4>
 8001304:	2420      	movs	r4, #32
 8001306:	0005      	movs	r5, r0
 8001308:	1ae4      	subs	r4, r4, r3
 800130a:	000f      	movs	r7, r1
 800130c:	40dd      	lsrs	r5, r3
 800130e:	40d9      	lsrs	r1, r3
 8001310:	40a0      	lsls	r0, r4
 8001312:	4643      	mov	r3, r8
 8001314:	40a7      	lsls	r7, r4
 8001316:	1a5b      	subs	r3, r3, r1
 8001318:	1e44      	subs	r4, r0, #1
 800131a:	41a0      	sbcs	r0, r4
 800131c:	4698      	mov	r8, r3
 800131e:	432f      	orrs	r7, r5
 8001320:	4338      	orrs	r0, r7
 8001322:	1a17      	subs	r7, r2, r0
 8001324:	42ba      	cmp	r2, r7
 8001326:	4192      	sbcs	r2, r2
 8001328:	4643      	mov	r3, r8
 800132a:	4252      	negs	r2, r2
 800132c:	1a99      	subs	r1, r3, r2
 800132e:	4664      	mov	r4, ip
 8001330:	0035      	movs	r5, r6
 8001332:	e6ca      	b.n	80010ca <__aeabi_dadd+0x62>
 8001334:	2207      	movs	r2, #7
 8001336:	403a      	ands	r2, r7
 8001338:	2a00      	cmp	r2, #0
 800133a:	d000      	beq.n	800133e <__aeabi_dadd+0x2d6>
 800133c:	e6f6      	b.n	800112c <__aeabi_dadd+0xc4>
 800133e:	074b      	lsls	r3, r1, #29
 8001340:	08ca      	lsrs	r2, r1, #3
 8001342:	4948      	ldr	r1, [pc, #288]	; (8001464 <__aeabi_dadd+0x3fc>)
 8001344:	08ff      	lsrs	r7, r7, #3
 8001346:	433b      	orrs	r3, r7
 8001348:	428d      	cmp	r5, r1
 800134a:	d196      	bne.n	800127a <__aeabi_dadd+0x212>
 800134c:	0019      	movs	r1, r3
 800134e:	4311      	orrs	r1, r2
 8001350:	d100      	bne.n	8001354 <__aeabi_dadd+0x2ec>
 8001352:	e19e      	b.n	8001692 <__aeabi_dadd+0x62a>
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	0309      	lsls	r1, r1, #12
 8001358:	430a      	orrs	r2, r1
 800135a:	0312      	lsls	r2, r2, #12
 800135c:	0b12      	lsrs	r2, r2, #12
 800135e:	4d41      	ldr	r5, [pc, #260]	; (8001464 <__aeabi_dadd+0x3fc>)
 8001360:	e78f      	b.n	8001282 <__aeabi_dadd+0x21a>
 8001362:	0015      	movs	r5, r2
 8001364:	2200      	movs	r2, #0
 8001366:	2300      	movs	r3, #0
 8001368:	e78b      	b.n	8001282 <__aeabi_dadd+0x21a>
 800136a:	2b00      	cmp	r3, #0
 800136c:	d000      	beq.n	8001370 <__aeabi_dadd+0x308>
 800136e:	e0c7      	b.n	8001500 <__aeabi_dadd+0x498>
 8001370:	1c6b      	adds	r3, r5, #1
 8001372:	055f      	lsls	r7, r3, #21
 8001374:	0d7f      	lsrs	r7, r7, #21
 8001376:	2f01      	cmp	r7, #1
 8001378:	dc00      	bgt.n	800137c <__aeabi_dadd+0x314>
 800137a:	e0f1      	b.n	8001560 <__aeabi_dadd+0x4f8>
 800137c:	4d39      	ldr	r5, [pc, #228]	; (8001464 <__aeabi_dadd+0x3fc>)
 800137e:	42ab      	cmp	r3, r5
 8001380:	d100      	bne.n	8001384 <__aeabi_dadd+0x31c>
 8001382:	e0b9      	b.n	80014f8 <__aeabi_dadd+0x490>
 8001384:	1885      	adds	r5, r0, r2
 8001386:	000a      	movs	r2, r1
 8001388:	4285      	cmp	r5, r0
 800138a:	4189      	sbcs	r1, r1
 800138c:	4442      	add	r2, r8
 800138e:	4249      	negs	r1, r1
 8001390:	1851      	adds	r1, r2, r1
 8001392:	2207      	movs	r2, #7
 8001394:	07cf      	lsls	r7, r1, #31
 8001396:	086d      	lsrs	r5, r5, #1
 8001398:	432f      	orrs	r7, r5
 800139a:	0849      	lsrs	r1, r1, #1
 800139c:	403a      	ands	r2, r7
 800139e:	001d      	movs	r5, r3
 80013a0:	e6c2      	b.n	8001128 <__aeabi_dadd+0xc0>
 80013a2:	2207      	movs	r2, #7
 80013a4:	4930      	ldr	r1, [pc, #192]	; (8001468 <__aeabi_dadd+0x400>)
 80013a6:	1aed      	subs	r5, r5, r3
 80013a8:	4031      	ands	r1, r6
 80013aa:	403a      	ands	r2, r7
 80013ac:	e6bc      	b.n	8001128 <__aeabi_dadd+0xc0>
 80013ae:	003e      	movs	r6, r7
 80013b0:	3828      	subs	r0, #40	; 0x28
 80013b2:	4086      	lsls	r6, r0
 80013b4:	2700      	movs	r7, #0
 80013b6:	e69f      	b.n	80010f8 <__aeabi_dadd+0x90>
 80013b8:	0038      	movs	r0, r7
 80013ba:	f000 fd49 	bl	8001e50 <__clzsi2>
 80013be:	3020      	adds	r0, #32
 80013c0:	e68e      	b.n	80010e0 <__aeabi_dadd+0x78>
 80013c2:	4643      	mov	r3, r8
 80013c4:	4313      	orrs	r3, r2
 80013c6:	001f      	movs	r7, r3
 80013c8:	1e7a      	subs	r2, r7, #1
 80013ca:	4197      	sbcs	r7, r2
 80013cc:	1bc7      	subs	r7, r0, r7
 80013ce:	42b8      	cmp	r0, r7
 80013d0:	4180      	sbcs	r0, r0
 80013d2:	4240      	negs	r0, r0
 80013d4:	1a09      	subs	r1, r1, r0
 80013d6:	e678      	b.n	80010ca <__aeabi_dadd+0x62>
 80013d8:	000e      	movs	r6, r1
 80013da:	003b      	movs	r3, r7
 80013dc:	4306      	orrs	r6, r0
 80013de:	4313      	orrs	r3, r2
 80013e0:	2d00      	cmp	r5, #0
 80013e2:	d161      	bne.n	80014a8 <__aeabi_dadd+0x440>
 80013e4:	2e00      	cmp	r6, #0
 80013e6:	d000      	beq.n	80013ea <__aeabi_dadd+0x382>
 80013e8:	e0f4      	b.n	80015d4 <__aeabi_dadd+0x56c>
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dadd+0x388>
 80013ee:	e11b      	b.n	8001628 <__aeabi_dadd+0x5c0>
 80013f0:	4664      	mov	r4, ip
 80013f2:	0039      	movs	r1, r7
 80013f4:	0010      	movs	r0, r2
 80013f6:	e739      	b.n	800126c <__aeabi_dadd+0x204>
 80013f8:	4f1a      	ldr	r7, [pc, #104]	; (8001464 <__aeabi_dadd+0x3fc>)
 80013fa:	42bb      	cmp	r3, r7
 80013fc:	d07a      	beq.n	80014f4 <__aeabi_dadd+0x48c>
 80013fe:	0033      	movs	r3, r6
 8001400:	e6ff      	b.n	8001202 <__aeabi_dadd+0x19a>
 8001402:	0030      	movs	r0, r6
 8001404:	3d1f      	subs	r5, #31
 8001406:	40e8      	lsrs	r0, r5
 8001408:	2b20      	cmp	r3, #32
 800140a:	d003      	beq.n	8001414 <__aeabi_dadd+0x3ac>
 800140c:	2140      	movs	r1, #64	; 0x40
 800140e:	1acb      	subs	r3, r1, r3
 8001410:	409e      	lsls	r6, r3
 8001412:	4337      	orrs	r7, r6
 8001414:	1e7b      	subs	r3, r7, #1
 8001416:	419f      	sbcs	r7, r3
 8001418:	2207      	movs	r2, #7
 800141a:	4307      	orrs	r7, r0
 800141c:	403a      	ands	r2, r7
 800141e:	2100      	movs	r1, #0
 8001420:	2500      	movs	r5, #0
 8001422:	e789      	b.n	8001338 <__aeabi_dadd+0x2d0>
 8001424:	1a17      	subs	r7, r2, r0
 8001426:	4643      	mov	r3, r8
 8001428:	42ba      	cmp	r2, r7
 800142a:	41b6      	sbcs	r6, r6
 800142c:	1a59      	subs	r1, r3, r1
 800142e:	4276      	negs	r6, r6
 8001430:	1b8e      	subs	r6, r1, r6
 8001432:	4664      	mov	r4, ip
 8001434:	e64e      	b.n	80010d4 <__aeabi_dadd+0x6c>
 8001436:	2b1f      	cmp	r3, #31
 8001438:	dd00      	ble.n	800143c <__aeabi_dadd+0x3d4>
 800143a:	e0ad      	b.n	8001598 <__aeabi_dadd+0x530>
 800143c:	2620      	movs	r6, #32
 800143e:	4647      	mov	r7, r8
 8001440:	1af6      	subs	r6, r6, r3
 8001442:	40b7      	lsls	r7, r6
 8001444:	46b9      	mov	r9, r7
 8001446:	0017      	movs	r7, r2
 8001448:	46b2      	mov	sl, r6
 800144a:	40df      	lsrs	r7, r3
 800144c:	464e      	mov	r6, r9
 800144e:	433e      	orrs	r6, r7
 8001450:	0037      	movs	r7, r6
 8001452:	4656      	mov	r6, sl
 8001454:	40b2      	lsls	r2, r6
 8001456:	1e56      	subs	r6, r2, #1
 8001458:	41b2      	sbcs	r2, r6
 800145a:	4317      	orrs	r7, r2
 800145c:	4642      	mov	r2, r8
 800145e:	40da      	lsrs	r2, r3
 8001460:	1889      	adds	r1, r1, r2
 8001462:	e6ae      	b.n	80011c2 <__aeabi_dadd+0x15a>
 8001464:	000007ff 	.word	0x000007ff
 8001468:	ff7fffff 	.word	0xff7fffff
 800146c:	800fffff 	.word	0x800fffff
 8001470:	2620      	movs	r6, #32
 8001472:	4647      	mov	r7, r8
 8001474:	1af6      	subs	r6, r6, r3
 8001476:	40b7      	lsls	r7, r6
 8001478:	46b9      	mov	r9, r7
 800147a:	0017      	movs	r7, r2
 800147c:	46b2      	mov	sl, r6
 800147e:	40df      	lsrs	r7, r3
 8001480:	464e      	mov	r6, r9
 8001482:	433e      	orrs	r6, r7
 8001484:	0037      	movs	r7, r6
 8001486:	4656      	mov	r6, sl
 8001488:	40b2      	lsls	r2, r6
 800148a:	1e56      	subs	r6, r2, #1
 800148c:	41b2      	sbcs	r2, r6
 800148e:	4317      	orrs	r7, r2
 8001490:	4642      	mov	r2, r8
 8001492:	40da      	lsrs	r2, r3
 8001494:	1a89      	subs	r1, r1, r2
 8001496:	e799      	b.n	80013cc <__aeabi_dadd+0x364>
 8001498:	4c7f      	ldr	r4, [pc, #508]	; (8001698 <__aeabi_dadd+0x630>)
 800149a:	42a6      	cmp	r6, r4
 800149c:	d05b      	beq.n	8001556 <__aeabi_dadd+0x4ee>
 800149e:	2480      	movs	r4, #128	; 0x80
 80014a0:	0424      	lsls	r4, r4, #16
 80014a2:	425b      	negs	r3, r3
 80014a4:	4321      	orrs	r1, r4
 80014a6:	e727      	b.n	80012f8 <__aeabi_dadd+0x290>
 80014a8:	2e00      	cmp	r6, #0
 80014aa:	d10c      	bne.n	80014c6 <__aeabi_dadd+0x45e>
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d100      	bne.n	80014b2 <__aeabi_dadd+0x44a>
 80014b0:	e0cb      	b.n	800164a <__aeabi_dadd+0x5e2>
 80014b2:	4664      	mov	r4, ip
 80014b4:	0039      	movs	r1, r7
 80014b6:	0010      	movs	r0, r2
 80014b8:	4d77      	ldr	r5, [pc, #476]	; (8001698 <__aeabi_dadd+0x630>)
 80014ba:	e6d7      	b.n	800126c <__aeabi_dadd+0x204>
 80014bc:	4f76      	ldr	r7, [pc, #472]	; (8001698 <__aeabi_dadd+0x630>)
 80014be:	42bb      	cmp	r3, r7
 80014c0:	d018      	beq.n	80014f4 <__aeabi_dadd+0x48c>
 80014c2:	0033      	movs	r3, r6
 80014c4:	e675      	b.n	80011b2 <__aeabi_dadd+0x14a>
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d014      	beq.n	80014f4 <__aeabi_dadd+0x48c>
 80014ca:	074b      	lsls	r3, r1, #29
 80014cc:	08c0      	lsrs	r0, r0, #3
 80014ce:	4318      	orrs	r0, r3
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	08c9      	lsrs	r1, r1, #3
 80014d4:	031b      	lsls	r3, r3, #12
 80014d6:	4219      	tst	r1, r3
 80014d8:	d007      	beq.n	80014ea <__aeabi_dadd+0x482>
 80014da:	08fc      	lsrs	r4, r7, #3
 80014dc:	421c      	tst	r4, r3
 80014de:	d104      	bne.n	80014ea <__aeabi_dadd+0x482>
 80014e0:	0779      	lsls	r1, r7, #29
 80014e2:	08d0      	lsrs	r0, r2, #3
 80014e4:	4308      	orrs	r0, r1
 80014e6:	46e1      	mov	r9, ip
 80014e8:	0021      	movs	r1, r4
 80014ea:	464c      	mov	r4, r9
 80014ec:	0f42      	lsrs	r2, r0, #29
 80014ee:	00c9      	lsls	r1, r1, #3
 80014f0:	4311      	orrs	r1, r2
 80014f2:	00c0      	lsls	r0, r0, #3
 80014f4:	4d68      	ldr	r5, [pc, #416]	; (8001698 <__aeabi_dadd+0x630>)
 80014f6:	e6b9      	b.n	800126c <__aeabi_dadd+0x204>
 80014f8:	001d      	movs	r5, r3
 80014fa:	2200      	movs	r2, #0
 80014fc:	2300      	movs	r3, #0
 80014fe:	e6c0      	b.n	8001282 <__aeabi_dadd+0x21a>
 8001500:	2d00      	cmp	r5, #0
 8001502:	d15b      	bne.n	80015bc <__aeabi_dadd+0x554>
 8001504:	000d      	movs	r5, r1
 8001506:	4305      	orrs	r5, r0
 8001508:	d100      	bne.n	800150c <__aeabi_dadd+0x4a4>
 800150a:	e6e2      	b.n	80012d2 <__aeabi_dadd+0x26a>
 800150c:	1c5d      	adds	r5, r3, #1
 800150e:	d100      	bne.n	8001512 <__aeabi_dadd+0x4aa>
 8001510:	e0b0      	b.n	8001674 <__aeabi_dadd+0x60c>
 8001512:	4d61      	ldr	r5, [pc, #388]	; (8001698 <__aeabi_dadd+0x630>)
 8001514:	42ae      	cmp	r6, r5
 8001516:	d01f      	beq.n	8001558 <__aeabi_dadd+0x4f0>
 8001518:	43db      	mvns	r3, r3
 800151a:	2b38      	cmp	r3, #56	; 0x38
 800151c:	dc71      	bgt.n	8001602 <__aeabi_dadd+0x59a>
 800151e:	2b1f      	cmp	r3, #31
 8001520:	dd00      	ble.n	8001524 <__aeabi_dadd+0x4bc>
 8001522:	e096      	b.n	8001652 <__aeabi_dadd+0x5ea>
 8001524:	2520      	movs	r5, #32
 8001526:	000f      	movs	r7, r1
 8001528:	1aed      	subs	r5, r5, r3
 800152a:	40af      	lsls	r7, r5
 800152c:	46b9      	mov	r9, r7
 800152e:	0007      	movs	r7, r0
 8001530:	46aa      	mov	sl, r5
 8001532:	40df      	lsrs	r7, r3
 8001534:	464d      	mov	r5, r9
 8001536:	433d      	orrs	r5, r7
 8001538:	002f      	movs	r7, r5
 800153a:	4655      	mov	r5, sl
 800153c:	40a8      	lsls	r0, r5
 800153e:	40d9      	lsrs	r1, r3
 8001540:	1e45      	subs	r5, r0, #1
 8001542:	41a8      	sbcs	r0, r5
 8001544:	4488      	add	r8, r1
 8001546:	4307      	orrs	r7, r0
 8001548:	18bf      	adds	r7, r7, r2
 800154a:	4297      	cmp	r7, r2
 800154c:	4192      	sbcs	r2, r2
 800154e:	4251      	negs	r1, r2
 8001550:	4441      	add	r1, r8
 8001552:	0035      	movs	r5, r6
 8001554:	e63a      	b.n	80011cc <__aeabi_dadd+0x164>
 8001556:	4664      	mov	r4, ip
 8001558:	0035      	movs	r5, r6
 800155a:	4641      	mov	r1, r8
 800155c:	0010      	movs	r0, r2
 800155e:	e685      	b.n	800126c <__aeabi_dadd+0x204>
 8001560:	000b      	movs	r3, r1
 8001562:	4303      	orrs	r3, r0
 8001564:	2d00      	cmp	r5, #0
 8001566:	d000      	beq.n	800156a <__aeabi_dadd+0x502>
 8001568:	e663      	b.n	8001232 <__aeabi_dadd+0x1ca>
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f5      	beq.n	800155a <__aeabi_dadd+0x4f2>
 800156e:	4643      	mov	r3, r8
 8001570:	4313      	orrs	r3, r2
 8001572:	d100      	bne.n	8001576 <__aeabi_dadd+0x50e>
 8001574:	e67a      	b.n	800126c <__aeabi_dadd+0x204>
 8001576:	1887      	adds	r7, r0, r2
 8001578:	4287      	cmp	r7, r0
 800157a:	4180      	sbcs	r0, r0
 800157c:	2207      	movs	r2, #7
 800157e:	4441      	add	r1, r8
 8001580:	4240      	negs	r0, r0
 8001582:	1809      	adds	r1, r1, r0
 8001584:	403a      	ands	r2, r7
 8001586:	020b      	lsls	r3, r1, #8
 8001588:	d400      	bmi.n	800158c <__aeabi_dadd+0x524>
 800158a:	e6d5      	b.n	8001338 <__aeabi_dadd+0x2d0>
 800158c:	4b43      	ldr	r3, [pc, #268]	; (800169c <__aeabi_dadd+0x634>)
 800158e:	3501      	adds	r5, #1
 8001590:	4019      	ands	r1, r3
 8001592:	e5c9      	b.n	8001128 <__aeabi_dadd+0xc0>
 8001594:	0038      	movs	r0, r7
 8001596:	e669      	b.n	800126c <__aeabi_dadd+0x204>
 8001598:	001e      	movs	r6, r3
 800159a:	4647      	mov	r7, r8
 800159c:	3e20      	subs	r6, #32
 800159e:	40f7      	lsrs	r7, r6
 80015a0:	46bc      	mov	ip, r7
 80015a2:	2b20      	cmp	r3, #32
 80015a4:	d004      	beq.n	80015b0 <__aeabi_dadd+0x548>
 80015a6:	2640      	movs	r6, #64	; 0x40
 80015a8:	1af3      	subs	r3, r6, r3
 80015aa:	4646      	mov	r6, r8
 80015ac:	409e      	lsls	r6, r3
 80015ae:	4332      	orrs	r2, r6
 80015b0:	0017      	movs	r7, r2
 80015b2:	4663      	mov	r3, ip
 80015b4:	1e7a      	subs	r2, r7, #1
 80015b6:	4197      	sbcs	r7, r2
 80015b8:	431f      	orrs	r7, r3
 80015ba:	e602      	b.n	80011c2 <__aeabi_dadd+0x15a>
 80015bc:	4d36      	ldr	r5, [pc, #216]	; (8001698 <__aeabi_dadd+0x630>)
 80015be:	42ae      	cmp	r6, r5
 80015c0:	d0ca      	beq.n	8001558 <__aeabi_dadd+0x4f0>
 80015c2:	2580      	movs	r5, #128	; 0x80
 80015c4:	042d      	lsls	r5, r5, #16
 80015c6:	425b      	negs	r3, r3
 80015c8:	4329      	orrs	r1, r5
 80015ca:	e7a6      	b.n	800151a <__aeabi_dadd+0x4b2>
 80015cc:	4308      	orrs	r0, r1
 80015ce:	1e41      	subs	r1, r0, #1
 80015d0:	4188      	sbcs	r0, r1
 80015d2:	e6a6      	b.n	8001322 <__aeabi_dadd+0x2ba>
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d100      	bne.n	80015da <__aeabi_dadd+0x572>
 80015d8:	e648      	b.n	800126c <__aeabi_dadd+0x204>
 80015da:	1a87      	subs	r7, r0, r2
 80015dc:	4643      	mov	r3, r8
 80015de:	42b8      	cmp	r0, r7
 80015e0:	41b6      	sbcs	r6, r6
 80015e2:	1acb      	subs	r3, r1, r3
 80015e4:	4276      	negs	r6, r6
 80015e6:	1b9e      	subs	r6, r3, r6
 80015e8:	0233      	lsls	r3, r6, #8
 80015ea:	d54b      	bpl.n	8001684 <__aeabi_dadd+0x61c>
 80015ec:	1a17      	subs	r7, r2, r0
 80015ee:	4643      	mov	r3, r8
 80015f0:	42ba      	cmp	r2, r7
 80015f2:	4192      	sbcs	r2, r2
 80015f4:	1a59      	subs	r1, r3, r1
 80015f6:	4252      	negs	r2, r2
 80015f8:	1a89      	subs	r1, r1, r2
 80015fa:	2207      	movs	r2, #7
 80015fc:	4664      	mov	r4, ip
 80015fe:	403a      	ands	r2, r7
 8001600:	e592      	b.n	8001128 <__aeabi_dadd+0xc0>
 8001602:	4301      	orrs	r1, r0
 8001604:	000f      	movs	r7, r1
 8001606:	1e79      	subs	r1, r7, #1
 8001608:	418f      	sbcs	r7, r1
 800160a:	e79d      	b.n	8001548 <__aeabi_dadd+0x4e0>
 800160c:	001c      	movs	r4, r3
 800160e:	000f      	movs	r7, r1
 8001610:	3c20      	subs	r4, #32
 8001612:	40e7      	lsrs	r7, r4
 8001614:	2b20      	cmp	r3, #32
 8001616:	d003      	beq.n	8001620 <__aeabi_dadd+0x5b8>
 8001618:	2440      	movs	r4, #64	; 0x40
 800161a:	1ae3      	subs	r3, r4, r3
 800161c:	4099      	lsls	r1, r3
 800161e:	4308      	orrs	r0, r1
 8001620:	1e41      	subs	r1, r0, #1
 8001622:	4188      	sbcs	r0, r1
 8001624:	4338      	orrs	r0, r7
 8001626:	e67c      	b.n	8001322 <__aeabi_dadd+0x2ba>
 8001628:	2200      	movs	r2, #0
 800162a:	2400      	movs	r4, #0
 800162c:	e625      	b.n	800127a <__aeabi_dadd+0x212>
 800162e:	1a17      	subs	r7, r2, r0
 8001630:	4643      	mov	r3, r8
 8001632:	42ba      	cmp	r2, r7
 8001634:	4192      	sbcs	r2, r2
 8001636:	1a59      	subs	r1, r3, r1
 8001638:	4252      	negs	r2, r2
 800163a:	1a89      	subs	r1, r1, r2
 800163c:	4664      	mov	r4, ip
 800163e:	0035      	movs	r5, r6
 8001640:	e543      	b.n	80010ca <__aeabi_dadd+0x62>
 8001642:	4641      	mov	r1, r8
 8001644:	0010      	movs	r0, r2
 8001646:	4d14      	ldr	r5, [pc, #80]	; (8001698 <__aeabi_dadd+0x630>)
 8001648:	e610      	b.n	800126c <__aeabi_dadd+0x204>
 800164a:	2280      	movs	r2, #128	; 0x80
 800164c:	2400      	movs	r4, #0
 800164e:	0312      	lsls	r2, r2, #12
 8001650:	e680      	b.n	8001354 <__aeabi_dadd+0x2ec>
 8001652:	001d      	movs	r5, r3
 8001654:	000f      	movs	r7, r1
 8001656:	3d20      	subs	r5, #32
 8001658:	40ef      	lsrs	r7, r5
 800165a:	46bc      	mov	ip, r7
 800165c:	2b20      	cmp	r3, #32
 800165e:	d003      	beq.n	8001668 <__aeabi_dadd+0x600>
 8001660:	2540      	movs	r5, #64	; 0x40
 8001662:	1aeb      	subs	r3, r5, r3
 8001664:	4099      	lsls	r1, r3
 8001666:	4308      	orrs	r0, r1
 8001668:	0007      	movs	r7, r0
 800166a:	4663      	mov	r3, ip
 800166c:	1e78      	subs	r0, r7, #1
 800166e:	4187      	sbcs	r7, r0
 8001670:	431f      	orrs	r7, r3
 8001672:	e769      	b.n	8001548 <__aeabi_dadd+0x4e0>
 8001674:	1887      	adds	r7, r0, r2
 8001676:	4297      	cmp	r7, r2
 8001678:	419b      	sbcs	r3, r3
 800167a:	4441      	add	r1, r8
 800167c:	425b      	negs	r3, r3
 800167e:	18c9      	adds	r1, r1, r3
 8001680:	0035      	movs	r5, r6
 8001682:	e5a3      	b.n	80011cc <__aeabi_dadd+0x164>
 8001684:	003b      	movs	r3, r7
 8001686:	4333      	orrs	r3, r6
 8001688:	d0ce      	beq.n	8001628 <__aeabi_dadd+0x5c0>
 800168a:	2207      	movs	r2, #7
 800168c:	0031      	movs	r1, r6
 800168e:	403a      	ands	r2, r7
 8001690:	e652      	b.n	8001338 <__aeabi_dadd+0x2d0>
 8001692:	2300      	movs	r3, #0
 8001694:	001a      	movs	r2, r3
 8001696:	e5f4      	b.n	8001282 <__aeabi_dadd+0x21a>
 8001698:	000007ff 	.word	0x000007ff
 800169c:	ff7fffff 	.word	0xff7fffff

080016a0 <__aeabi_ddiv>:
 80016a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a2:	4657      	mov	r7, sl
 80016a4:	46de      	mov	lr, fp
 80016a6:	464e      	mov	r6, r9
 80016a8:	4645      	mov	r5, r8
 80016aa:	b5e0      	push	{r5, r6, r7, lr}
 80016ac:	4683      	mov	fp, r0
 80016ae:	0007      	movs	r7, r0
 80016b0:	030e      	lsls	r6, r1, #12
 80016b2:	0048      	lsls	r0, r1, #1
 80016b4:	b085      	sub	sp, #20
 80016b6:	4692      	mov	sl, r2
 80016b8:	001c      	movs	r4, r3
 80016ba:	0b36      	lsrs	r6, r6, #12
 80016bc:	0d40      	lsrs	r0, r0, #21
 80016be:	0fcd      	lsrs	r5, r1, #31
 80016c0:	2800      	cmp	r0, #0
 80016c2:	d100      	bne.n	80016c6 <__aeabi_ddiv+0x26>
 80016c4:	e09d      	b.n	8001802 <__aeabi_ddiv+0x162>
 80016c6:	4b95      	ldr	r3, [pc, #596]	; (800191c <__aeabi_ddiv+0x27c>)
 80016c8:	4298      	cmp	r0, r3
 80016ca:	d039      	beq.n	8001740 <__aeabi_ddiv+0xa0>
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	00f6      	lsls	r6, r6, #3
 80016d0:	041b      	lsls	r3, r3, #16
 80016d2:	431e      	orrs	r6, r3
 80016d4:	4a92      	ldr	r2, [pc, #584]	; (8001920 <__aeabi_ddiv+0x280>)
 80016d6:	0f7b      	lsrs	r3, r7, #29
 80016d8:	4333      	orrs	r3, r6
 80016da:	4699      	mov	r9, r3
 80016dc:	4694      	mov	ip, r2
 80016de:	0003      	movs	r3, r0
 80016e0:	4463      	add	r3, ip
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2300      	movs	r3, #0
 80016e6:	2600      	movs	r6, #0
 80016e8:	00ff      	lsls	r7, r7, #3
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	0323      	lsls	r3, r4, #12
 80016ee:	0b1b      	lsrs	r3, r3, #12
 80016f0:	4698      	mov	r8, r3
 80016f2:	0063      	lsls	r3, r4, #1
 80016f4:	0fe4      	lsrs	r4, r4, #31
 80016f6:	4652      	mov	r2, sl
 80016f8:	0d5b      	lsrs	r3, r3, #21
 80016fa:	9401      	str	r4, [sp, #4]
 80016fc:	d100      	bne.n	8001700 <__aeabi_ddiv+0x60>
 80016fe:	e0b3      	b.n	8001868 <__aeabi_ddiv+0x1c8>
 8001700:	4986      	ldr	r1, [pc, #536]	; (800191c <__aeabi_ddiv+0x27c>)
 8001702:	428b      	cmp	r3, r1
 8001704:	d100      	bne.n	8001708 <__aeabi_ddiv+0x68>
 8001706:	e09e      	b.n	8001846 <__aeabi_ddiv+0x1a6>
 8001708:	4642      	mov	r2, r8
 800170a:	00d1      	lsls	r1, r2, #3
 800170c:	2280      	movs	r2, #128	; 0x80
 800170e:	0412      	lsls	r2, r2, #16
 8001710:	430a      	orrs	r2, r1
 8001712:	4651      	mov	r1, sl
 8001714:	0f49      	lsrs	r1, r1, #29
 8001716:	4311      	orrs	r1, r2
 8001718:	468b      	mov	fp, r1
 800171a:	4981      	ldr	r1, [pc, #516]	; (8001920 <__aeabi_ddiv+0x280>)
 800171c:	4652      	mov	r2, sl
 800171e:	468c      	mov	ip, r1
 8001720:	9900      	ldr	r1, [sp, #0]
 8001722:	4463      	add	r3, ip
 8001724:	1acb      	subs	r3, r1, r3
 8001726:	2100      	movs	r1, #0
 8001728:	00d2      	lsls	r2, r2, #3
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	002b      	movs	r3, r5
 800172e:	4063      	eors	r3, r4
 8001730:	469a      	mov	sl, r3
 8001732:	2e0f      	cmp	r6, #15
 8001734:	d900      	bls.n	8001738 <__aeabi_ddiv+0x98>
 8001736:	e105      	b.n	8001944 <__aeabi_ddiv+0x2a4>
 8001738:	4b7a      	ldr	r3, [pc, #488]	; (8001924 <__aeabi_ddiv+0x284>)
 800173a:	00b6      	lsls	r6, r6, #2
 800173c:	599b      	ldr	r3, [r3, r6]
 800173e:	469f      	mov	pc, r3
 8001740:	465b      	mov	r3, fp
 8001742:	4333      	orrs	r3, r6
 8001744:	4699      	mov	r9, r3
 8001746:	d000      	beq.n	800174a <__aeabi_ddiv+0xaa>
 8001748:	e0b8      	b.n	80018bc <__aeabi_ddiv+0x21c>
 800174a:	2302      	movs	r3, #2
 800174c:	2608      	movs	r6, #8
 800174e:	2700      	movs	r7, #0
 8001750:	9000      	str	r0, [sp, #0]
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	e7ca      	b.n	80016ec <__aeabi_ddiv+0x4c>
 8001756:	46cb      	mov	fp, r9
 8001758:	003a      	movs	r2, r7
 800175a:	9902      	ldr	r1, [sp, #8]
 800175c:	9501      	str	r5, [sp, #4]
 800175e:	9b01      	ldr	r3, [sp, #4]
 8001760:	469a      	mov	sl, r3
 8001762:	2902      	cmp	r1, #2
 8001764:	d027      	beq.n	80017b6 <__aeabi_ddiv+0x116>
 8001766:	2903      	cmp	r1, #3
 8001768:	d100      	bne.n	800176c <__aeabi_ddiv+0xcc>
 800176a:	e280      	b.n	8001c6e <__aeabi_ddiv+0x5ce>
 800176c:	2901      	cmp	r1, #1
 800176e:	d044      	beq.n	80017fa <__aeabi_ddiv+0x15a>
 8001770:	496d      	ldr	r1, [pc, #436]	; (8001928 <__aeabi_ddiv+0x288>)
 8001772:	9b00      	ldr	r3, [sp, #0]
 8001774:	468c      	mov	ip, r1
 8001776:	4463      	add	r3, ip
 8001778:	001c      	movs	r4, r3
 800177a:	2c00      	cmp	r4, #0
 800177c:	dd38      	ble.n	80017f0 <__aeabi_ddiv+0x150>
 800177e:	0753      	lsls	r3, r2, #29
 8001780:	d000      	beq.n	8001784 <__aeabi_ddiv+0xe4>
 8001782:	e213      	b.n	8001bac <__aeabi_ddiv+0x50c>
 8001784:	08d2      	lsrs	r2, r2, #3
 8001786:	465b      	mov	r3, fp
 8001788:	01db      	lsls	r3, r3, #7
 800178a:	d509      	bpl.n	80017a0 <__aeabi_ddiv+0x100>
 800178c:	4659      	mov	r1, fp
 800178e:	4b67      	ldr	r3, [pc, #412]	; (800192c <__aeabi_ddiv+0x28c>)
 8001790:	4019      	ands	r1, r3
 8001792:	468b      	mov	fp, r1
 8001794:	2180      	movs	r1, #128	; 0x80
 8001796:	00c9      	lsls	r1, r1, #3
 8001798:	468c      	mov	ip, r1
 800179a:	9b00      	ldr	r3, [sp, #0]
 800179c:	4463      	add	r3, ip
 800179e:	001c      	movs	r4, r3
 80017a0:	4b63      	ldr	r3, [pc, #396]	; (8001930 <__aeabi_ddiv+0x290>)
 80017a2:	429c      	cmp	r4, r3
 80017a4:	dc07      	bgt.n	80017b6 <__aeabi_ddiv+0x116>
 80017a6:	465b      	mov	r3, fp
 80017a8:	0564      	lsls	r4, r4, #21
 80017aa:	075f      	lsls	r7, r3, #29
 80017ac:	025b      	lsls	r3, r3, #9
 80017ae:	4317      	orrs	r7, r2
 80017b0:	0b1b      	lsrs	r3, r3, #12
 80017b2:	0d62      	lsrs	r2, r4, #21
 80017b4:	e002      	b.n	80017bc <__aeabi_ddiv+0x11c>
 80017b6:	2300      	movs	r3, #0
 80017b8:	2700      	movs	r7, #0
 80017ba:	4a58      	ldr	r2, [pc, #352]	; (800191c <__aeabi_ddiv+0x27c>)
 80017bc:	2100      	movs	r1, #0
 80017be:	031b      	lsls	r3, r3, #12
 80017c0:	0b1c      	lsrs	r4, r3, #12
 80017c2:	0d0b      	lsrs	r3, r1, #20
 80017c4:	051b      	lsls	r3, r3, #20
 80017c6:	4323      	orrs	r3, r4
 80017c8:	0514      	lsls	r4, r2, #20
 80017ca:	4a5a      	ldr	r2, [pc, #360]	; (8001934 <__aeabi_ddiv+0x294>)
 80017cc:	0038      	movs	r0, r7
 80017ce:	4013      	ands	r3, r2
 80017d0:	431c      	orrs	r4, r3
 80017d2:	4653      	mov	r3, sl
 80017d4:	0064      	lsls	r4, r4, #1
 80017d6:	07db      	lsls	r3, r3, #31
 80017d8:	0864      	lsrs	r4, r4, #1
 80017da:	431c      	orrs	r4, r3
 80017dc:	0021      	movs	r1, r4
 80017de:	b005      	add	sp, #20
 80017e0:	bc3c      	pop	{r2, r3, r4, r5}
 80017e2:	4690      	mov	r8, r2
 80017e4:	4699      	mov	r9, r3
 80017e6:	46a2      	mov	sl, r4
 80017e8:	46ab      	mov	fp, r5
 80017ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ec:	2201      	movs	r2, #1
 80017ee:	4252      	negs	r2, r2
 80017f0:	2301      	movs	r3, #1
 80017f2:	1b1b      	subs	r3, r3, r4
 80017f4:	2b38      	cmp	r3, #56	; 0x38
 80017f6:	dc00      	bgt.n	80017fa <__aeabi_ddiv+0x15a>
 80017f8:	e1ad      	b.n	8001b56 <__aeabi_ddiv+0x4b6>
 80017fa:	2200      	movs	r2, #0
 80017fc:	2300      	movs	r3, #0
 80017fe:	2700      	movs	r7, #0
 8001800:	e7dc      	b.n	80017bc <__aeabi_ddiv+0x11c>
 8001802:	465b      	mov	r3, fp
 8001804:	4333      	orrs	r3, r6
 8001806:	4699      	mov	r9, r3
 8001808:	d05e      	beq.n	80018c8 <__aeabi_ddiv+0x228>
 800180a:	2e00      	cmp	r6, #0
 800180c:	d100      	bne.n	8001810 <__aeabi_ddiv+0x170>
 800180e:	e18a      	b.n	8001b26 <__aeabi_ddiv+0x486>
 8001810:	0030      	movs	r0, r6
 8001812:	f000 fb1d 	bl	8001e50 <__clzsi2>
 8001816:	0003      	movs	r3, r0
 8001818:	3b0b      	subs	r3, #11
 800181a:	2b1c      	cmp	r3, #28
 800181c:	dd00      	ble.n	8001820 <__aeabi_ddiv+0x180>
 800181e:	e17b      	b.n	8001b18 <__aeabi_ddiv+0x478>
 8001820:	221d      	movs	r2, #29
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	465a      	mov	r2, fp
 8001826:	0001      	movs	r1, r0
 8001828:	40da      	lsrs	r2, r3
 800182a:	3908      	subs	r1, #8
 800182c:	408e      	lsls	r6, r1
 800182e:	0013      	movs	r3, r2
 8001830:	465f      	mov	r7, fp
 8001832:	4333      	orrs	r3, r6
 8001834:	4699      	mov	r9, r3
 8001836:	408f      	lsls	r7, r1
 8001838:	4b3f      	ldr	r3, [pc, #252]	; (8001938 <__aeabi_ddiv+0x298>)
 800183a:	2600      	movs	r6, #0
 800183c:	1a1b      	subs	r3, r3, r0
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2300      	movs	r3, #0
 8001842:	9302      	str	r3, [sp, #8]
 8001844:	e752      	b.n	80016ec <__aeabi_ddiv+0x4c>
 8001846:	4641      	mov	r1, r8
 8001848:	4653      	mov	r3, sl
 800184a:	430b      	orrs	r3, r1
 800184c:	493b      	ldr	r1, [pc, #236]	; (800193c <__aeabi_ddiv+0x29c>)
 800184e:	469b      	mov	fp, r3
 8001850:	468c      	mov	ip, r1
 8001852:	9b00      	ldr	r3, [sp, #0]
 8001854:	4463      	add	r3, ip
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	465b      	mov	r3, fp
 800185a:	2b00      	cmp	r3, #0
 800185c:	d13b      	bne.n	80018d6 <__aeabi_ddiv+0x236>
 800185e:	2302      	movs	r3, #2
 8001860:	2200      	movs	r2, #0
 8001862:	431e      	orrs	r6, r3
 8001864:	2102      	movs	r1, #2
 8001866:	e761      	b.n	800172c <__aeabi_ddiv+0x8c>
 8001868:	4643      	mov	r3, r8
 800186a:	4313      	orrs	r3, r2
 800186c:	469b      	mov	fp, r3
 800186e:	d037      	beq.n	80018e0 <__aeabi_ddiv+0x240>
 8001870:	4643      	mov	r3, r8
 8001872:	2b00      	cmp	r3, #0
 8001874:	d100      	bne.n	8001878 <__aeabi_ddiv+0x1d8>
 8001876:	e162      	b.n	8001b3e <__aeabi_ddiv+0x49e>
 8001878:	4640      	mov	r0, r8
 800187a:	f000 fae9 	bl	8001e50 <__clzsi2>
 800187e:	0003      	movs	r3, r0
 8001880:	3b0b      	subs	r3, #11
 8001882:	2b1c      	cmp	r3, #28
 8001884:	dd00      	ble.n	8001888 <__aeabi_ddiv+0x1e8>
 8001886:	e153      	b.n	8001b30 <__aeabi_ddiv+0x490>
 8001888:	0002      	movs	r2, r0
 800188a:	4641      	mov	r1, r8
 800188c:	3a08      	subs	r2, #8
 800188e:	4091      	lsls	r1, r2
 8001890:	4688      	mov	r8, r1
 8001892:	211d      	movs	r1, #29
 8001894:	1acb      	subs	r3, r1, r3
 8001896:	4651      	mov	r1, sl
 8001898:	40d9      	lsrs	r1, r3
 800189a:	000b      	movs	r3, r1
 800189c:	4641      	mov	r1, r8
 800189e:	430b      	orrs	r3, r1
 80018a0:	469b      	mov	fp, r3
 80018a2:	4653      	mov	r3, sl
 80018a4:	4093      	lsls	r3, r2
 80018a6:	001a      	movs	r2, r3
 80018a8:	9b00      	ldr	r3, [sp, #0]
 80018aa:	4925      	ldr	r1, [pc, #148]	; (8001940 <__aeabi_ddiv+0x2a0>)
 80018ac:	469c      	mov	ip, r3
 80018ae:	4460      	add	r0, ip
 80018b0:	0003      	movs	r3, r0
 80018b2:	468c      	mov	ip, r1
 80018b4:	4463      	add	r3, ip
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	2100      	movs	r1, #0
 80018ba:	e737      	b.n	800172c <__aeabi_ddiv+0x8c>
 80018bc:	2303      	movs	r3, #3
 80018be:	46b1      	mov	r9, r6
 80018c0:	9000      	str	r0, [sp, #0]
 80018c2:	260c      	movs	r6, #12
 80018c4:	9302      	str	r3, [sp, #8]
 80018c6:	e711      	b.n	80016ec <__aeabi_ddiv+0x4c>
 80018c8:	2300      	movs	r3, #0
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	3301      	adds	r3, #1
 80018ce:	2604      	movs	r6, #4
 80018d0:	2700      	movs	r7, #0
 80018d2:	9302      	str	r3, [sp, #8]
 80018d4:	e70a      	b.n	80016ec <__aeabi_ddiv+0x4c>
 80018d6:	2303      	movs	r3, #3
 80018d8:	46c3      	mov	fp, r8
 80018da:	431e      	orrs	r6, r3
 80018dc:	2103      	movs	r1, #3
 80018de:	e725      	b.n	800172c <__aeabi_ddiv+0x8c>
 80018e0:	3301      	adds	r3, #1
 80018e2:	431e      	orrs	r6, r3
 80018e4:	2200      	movs	r2, #0
 80018e6:	2101      	movs	r1, #1
 80018e8:	e720      	b.n	800172c <__aeabi_ddiv+0x8c>
 80018ea:	2300      	movs	r3, #0
 80018ec:	469a      	mov	sl, r3
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	2700      	movs	r7, #0
 80018f2:	031b      	lsls	r3, r3, #12
 80018f4:	4a09      	ldr	r2, [pc, #36]	; (800191c <__aeabi_ddiv+0x27c>)
 80018f6:	e761      	b.n	80017bc <__aeabi_ddiv+0x11c>
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	4649      	mov	r1, r9
 80018fc:	031b      	lsls	r3, r3, #12
 80018fe:	4219      	tst	r1, r3
 8001900:	d100      	bne.n	8001904 <__aeabi_ddiv+0x264>
 8001902:	e0e2      	b.n	8001aca <__aeabi_ddiv+0x42a>
 8001904:	4659      	mov	r1, fp
 8001906:	4219      	tst	r1, r3
 8001908:	d000      	beq.n	800190c <__aeabi_ddiv+0x26c>
 800190a:	e0de      	b.n	8001aca <__aeabi_ddiv+0x42a>
 800190c:	430b      	orrs	r3, r1
 800190e:	031b      	lsls	r3, r3, #12
 8001910:	0017      	movs	r7, r2
 8001912:	0b1b      	lsrs	r3, r3, #12
 8001914:	46a2      	mov	sl, r4
 8001916:	4a01      	ldr	r2, [pc, #4]	; (800191c <__aeabi_ddiv+0x27c>)
 8001918:	e750      	b.n	80017bc <__aeabi_ddiv+0x11c>
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	000007ff 	.word	0x000007ff
 8001920:	fffffc01 	.word	0xfffffc01
 8001924:	080073cc 	.word	0x080073cc
 8001928:	000003ff 	.word	0x000003ff
 800192c:	feffffff 	.word	0xfeffffff
 8001930:	000007fe 	.word	0x000007fe
 8001934:	800fffff 	.word	0x800fffff
 8001938:	fffffc0d 	.word	0xfffffc0d
 800193c:	fffff801 	.word	0xfffff801
 8001940:	000003f3 	.word	0x000003f3
 8001944:	45d9      	cmp	r9, fp
 8001946:	d900      	bls.n	800194a <__aeabi_ddiv+0x2aa>
 8001948:	e0cb      	b.n	8001ae2 <__aeabi_ddiv+0x442>
 800194a:	d100      	bne.n	800194e <__aeabi_ddiv+0x2ae>
 800194c:	e0c6      	b.n	8001adc <__aeabi_ddiv+0x43c>
 800194e:	003c      	movs	r4, r7
 8001950:	4648      	mov	r0, r9
 8001952:	2700      	movs	r7, #0
 8001954:	9b00      	ldr	r3, [sp, #0]
 8001956:	3b01      	subs	r3, #1
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	465b      	mov	r3, fp
 800195c:	0e16      	lsrs	r6, r2, #24
 800195e:	021b      	lsls	r3, r3, #8
 8001960:	431e      	orrs	r6, r3
 8001962:	0213      	lsls	r3, r2, #8
 8001964:	4698      	mov	r8, r3
 8001966:	0433      	lsls	r3, r6, #16
 8001968:	0c1b      	lsrs	r3, r3, #16
 800196a:	4699      	mov	r9, r3
 800196c:	0c31      	lsrs	r1, r6, #16
 800196e:	9101      	str	r1, [sp, #4]
 8001970:	f7fe fc50 	bl	8000214 <__aeabi_uidivmod>
 8001974:	464a      	mov	r2, r9
 8001976:	4342      	muls	r2, r0
 8001978:	040b      	lsls	r3, r1, #16
 800197a:	0c21      	lsrs	r1, r4, #16
 800197c:	0005      	movs	r5, r0
 800197e:	4319      	orrs	r1, r3
 8001980:	428a      	cmp	r2, r1
 8001982:	d907      	bls.n	8001994 <__aeabi_ddiv+0x2f4>
 8001984:	1989      	adds	r1, r1, r6
 8001986:	3d01      	subs	r5, #1
 8001988:	428e      	cmp	r6, r1
 800198a:	d803      	bhi.n	8001994 <__aeabi_ddiv+0x2f4>
 800198c:	428a      	cmp	r2, r1
 800198e:	d901      	bls.n	8001994 <__aeabi_ddiv+0x2f4>
 8001990:	1e85      	subs	r5, r0, #2
 8001992:	1989      	adds	r1, r1, r6
 8001994:	1a88      	subs	r0, r1, r2
 8001996:	9901      	ldr	r1, [sp, #4]
 8001998:	f7fe fc3c 	bl	8000214 <__aeabi_uidivmod>
 800199c:	0409      	lsls	r1, r1, #16
 800199e:	468c      	mov	ip, r1
 80019a0:	464a      	mov	r2, r9
 80019a2:	0421      	lsls	r1, r4, #16
 80019a4:	4664      	mov	r4, ip
 80019a6:	4342      	muls	r2, r0
 80019a8:	0c09      	lsrs	r1, r1, #16
 80019aa:	0003      	movs	r3, r0
 80019ac:	4321      	orrs	r1, r4
 80019ae:	428a      	cmp	r2, r1
 80019b0:	d904      	bls.n	80019bc <__aeabi_ddiv+0x31c>
 80019b2:	1989      	adds	r1, r1, r6
 80019b4:	3b01      	subs	r3, #1
 80019b6:	428e      	cmp	r6, r1
 80019b8:	d800      	bhi.n	80019bc <__aeabi_ddiv+0x31c>
 80019ba:	e0f1      	b.n	8001ba0 <__aeabi_ddiv+0x500>
 80019bc:	042d      	lsls	r5, r5, #16
 80019be:	431d      	orrs	r5, r3
 80019c0:	46ab      	mov	fp, r5
 80019c2:	4643      	mov	r3, r8
 80019c4:	1a89      	subs	r1, r1, r2
 80019c6:	4642      	mov	r2, r8
 80019c8:	0c28      	lsrs	r0, r5, #16
 80019ca:	0412      	lsls	r2, r2, #16
 80019cc:	0c1d      	lsrs	r5, r3, #16
 80019ce:	465b      	mov	r3, fp
 80019d0:	0c14      	lsrs	r4, r2, #16
 80019d2:	0022      	movs	r2, r4
 80019d4:	041b      	lsls	r3, r3, #16
 80019d6:	0c1b      	lsrs	r3, r3, #16
 80019d8:	435a      	muls	r2, r3
 80019da:	9403      	str	r4, [sp, #12]
 80019dc:	436b      	muls	r3, r5
 80019de:	4344      	muls	r4, r0
 80019e0:	9502      	str	r5, [sp, #8]
 80019e2:	4368      	muls	r0, r5
 80019e4:	191b      	adds	r3, r3, r4
 80019e6:	0c15      	lsrs	r5, r2, #16
 80019e8:	18eb      	adds	r3, r5, r3
 80019ea:	429c      	cmp	r4, r3
 80019ec:	d903      	bls.n	80019f6 <__aeabi_ddiv+0x356>
 80019ee:	2480      	movs	r4, #128	; 0x80
 80019f0:	0264      	lsls	r4, r4, #9
 80019f2:	46a4      	mov	ip, r4
 80019f4:	4460      	add	r0, ip
 80019f6:	0c1c      	lsrs	r4, r3, #16
 80019f8:	0415      	lsls	r5, r2, #16
 80019fa:	041b      	lsls	r3, r3, #16
 80019fc:	0c2d      	lsrs	r5, r5, #16
 80019fe:	1820      	adds	r0, r4, r0
 8001a00:	195d      	adds	r5, r3, r5
 8001a02:	4281      	cmp	r1, r0
 8001a04:	d377      	bcc.n	8001af6 <__aeabi_ddiv+0x456>
 8001a06:	d073      	beq.n	8001af0 <__aeabi_ddiv+0x450>
 8001a08:	1a0c      	subs	r4, r1, r0
 8001a0a:	4aa2      	ldr	r2, [pc, #648]	; (8001c94 <__aeabi_ddiv+0x5f4>)
 8001a0c:	1b7d      	subs	r5, r7, r5
 8001a0e:	42af      	cmp	r7, r5
 8001a10:	41bf      	sbcs	r7, r7
 8001a12:	4694      	mov	ip, r2
 8001a14:	9b00      	ldr	r3, [sp, #0]
 8001a16:	427f      	negs	r7, r7
 8001a18:	4463      	add	r3, ip
 8001a1a:	1be0      	subs	r0, r4, r7
 8001a1c:	001c      	movs	r4, r3
 8001a1e:	4286      	cmp	r6, r0
 8001a20:	d100      	bne.n	8001a24 <__aeabi_ddiv+0x384>
 8001a22:	e0db      	b.n	8001bdc <__aeabi_ddiv+0x53c>
 8001a24:	9901      	ldr	r1, [sp, #4]
 8001a26:	f7fe fbf5 	bl	8000214 <__aeabi_uidivmod>
 8001a2a:	464a      	mov	r2, r9
 8001a2c:	4342      	muls	r2, r0
 8001a2e:	040b      	lsls	r3, r1, #16
 8001a30:	0c29      	lsrs	r1, r5, #16
 8001a32:	0007      	movs	r7, r0
 8001a34:	4319      	orrs	r1, r3
 8001a36:	428a      	cmp	r2, r1
 8001a38:	d907      	bls.n	8001a4a <__aeabi_ddiv+0x3aa>
 8001a3a:	1989      	adds	r1, r1, r6
 8001a3c:	3f01      	subs	r7, #1
 8001a3e:	428e      	cmp	r6, r1
 8001a40:	d803      	bhi.n	8001a4a <__aeabi_ddiv+0x3aa>
 8001a42:	428a      	cmp	r2, r1
 8001a44:	d901      	bls.n	8001a4a <__aeabi_ddiv+0x3aa>
 8001a46:	1e87      	subs	r7, r0, #2
 8001a48:	1989      	adds	r1, r1, r6
 8001a4a:	1a88      	subs	r0, r1, r2
 8001a4c:	9901      	ldr	r1, [sp, #4]
 8001a4e:	f7fe fbe1 	bl	8000214 <__aeabi_uidivmod>
 8001a52:	0409      	lsls	r1, r1, #16
 8001a54:	464a      	mov	r2, r9
 8001a56:	4689      	mov	r9, r1
 8001a58:	0429      	lsls	r1, r5, #16
 8001a5a:	464d      	mov	r5, r9
 8001a5c:	4342      	muls	r2, r0
 8001a5e:	0c09      	lsrs	r1, r1, #16
 8001a60:	0003      	movs	r3, r0
 8001a62:	4329      	orrs	r1, r5
 8001a64:	428a      	cmp	r2, r1
 8001a66:	d907      	bls.n	8001a78 <__aeabi_ddiv+0x3d8>
 8001a68:	1989      	adds	r1, r1, r6
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	428e      	cmp	r6, r1
 8001a6e:	d803      	bhi.n	8001a78 <__aeabi_ddiv+0x3d8>
 8001a70:	428a      	cmp	r2, r1
 8001a72:	d901      	bls.n	8001a78 <__aeabi_ddiv+0x3d8>
 8001a74:	1e83      	subs	r3, r0, #2
 8001a76:	1989      	adds	r1, r1, r6
 8001a78:	043f      	lsls	r7, r7, #16
 8001a7a:	1a89      	subs	r1, r1, r2
 8001a7c:	003a      	movs	r2, r7
 8001a7e:	9f03      	ldr	r7, [sp, #12]
 8001a80:	431a      	orrs	r2, r3
 8001a82:	0038      	movs	r0, r7
 8001a84:	0413      	lsls	r3, r2, #16
 8001a86:	0c1b      	lsrs	r3, r3, #16
 8001a88:	4358      	muls	r0, r3
 8001a8a:	4681      	mov	r9, r0
 8001a8c:	9802      	ldr	r0, [sp, #8]
 8001a8e:	0c15      	lsrs	r5, r2, #16
 8001a90:	436f      	muls	r7, r5
 8001a92:	4343      	muls	r3, r0
 8001a94:	4345      	muls	r5, r0
 8001a96:	4648      	mov	r0, r9
 8001a98:	0c00      	lsrs	r0, r0, #16
 8001a9a:	4684      	mov	ip, r0
 8001a9c:	19db      	adds	r3, r3, r7
 8001a9e:	4463      	add	r3, ip
 8001aa0:	429f      	cmp	r7, r3
 8001aa2:	d903      	bls.n	8001aac <__aeabi_ddiv+0x40c>
 8001aa4:	2080      	movs	r0, #128	; 0x80
 8001aa6:	0240      	lsls	r0, r0, #9
 8001aa8:	4684      	mov	ip, r0
 8001aaa:	4465      	add	r5, ip
 8001aac:	4648      	mov	r0, r9
 8001aae:	0c1f      	lsrs	r7, r3, #16
 8001ab0:	0400      	lsls	r0, r0, #16
 8001ab2:	041b      	lsls	r3, r3, #16
 8001ab4:	0c00      	lsrs	r0, r0, #16
 8001ab6:	197d      	adds	r5, r7, r5
 8001ab8:	1818      	adds	r0, r3, r0
 8001aba:	42a9      	cmp	r1, r5
 8001abc:	d200      	bcs.n	8001ac0 <__aeabi_ddiv+0x420>
 8001abe:	e084      	b.n	8001bca <__aeabi_ddiv+0x52a>
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_ddiv+0x424>
 8001ac2:	e07f      	b.n	8001bc4 <__aeabi_ddiv+0x524>
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	e657      	b.n	800177a <__aeabi_ddiv+0xda>
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	464a      	mov	r2, r9
 8001ace:	031b      	lsls	r3, r3, #12
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	031b      	lsls	r3, r3, #12
 8001ad4:	0b1b      	lsrs	r3, r3, #12
 8001ad6:	46aa      	mov	sl, r5
 8001ad8:	4a6f      	ldr	r2, [pc, #444]	; (8001c98 <__aeabi_ddiv+0x5f8>)
 8001ada:	e66f      	b.n	80017bc <__aeabi_ddiv+0x11c>
 8001adc:	42ba      	cmp	r2, r7
 8001ade:	d900      	bls.n	8001ae2 <__aeabi_ddiv+0x442>
 8001ae0:	e735      	b.n	800194e <__aeabi_ddiv+0x2ae>
 8001ae2:	464b      	mov	r3, r9
 8001ae4:	07dc      	lsls	r4, r3, #31
 8001ae6:	0858      	lsrs	r0, r3, #1
 8001ae8:	087b      	lsrs	r3, r7, #1
 8001aea:	431c      	orrs	r4, r3
 8001aec:	07ff      	lsls	r7, r7, #31
 8001aee:	e734      	b.n	800195a <__aeabi_ddiv+0x2ba>
 8001af0:	2400      	movs	r4, #0
 8001af2:	42af      	cmp	r7, r5
 8001af4:	d289      	bcs.n	8001a0a <__aeabi_ddiv+0x36a>
 8001af6:	4447      	add	r7, r8
 8001af8:	4547      	cmp	r7, r8
 8001afa:	41a4      	sbcs	r4, r4
 8001afc:	465b      	mov	r3, fp
 8001afe:	4264      	negs	r4, r4
 8001b00:	19a4      	adds	r4, r4, r6
 8001b02:	1864      	adds	r4, r4, r1
 8001b04:	3b01      	subs	r3, #1
 8001b06:	42a6      	cmp	r6, r4
 8001b08:	d21e      	bcs.n	8001b48 <__aeabi_ddiv+0x4a8>
 8001b0a:	42a0      	cmp	r0, r4
 8001b0c:	d86d      	bhi.n	8001bea <__aeabi_ddiv+0x54a>
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_ddiv+0x472>
 8001b10:	e0b6      	b.n	8001c80 <__aeabi_ddiv+0x5e0>
 8001b12:	1a24      	subs	r4, r4, r0
 8001b14:	469b      	mov	fp, r3
 8001b16:	e778      	b.n	8001a0a <__aeabi_ddiv+0x36a>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	465a      	mov	r2, fp
 8001b1c:	3b28      	subs	r3, #40	; 0x28
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	2700      	movs	r7, #0
 8001b22:	4691      	mov	r9, r2
 8001b24:	e688      	b.n	8001838 <__aeabi_ddiv+0x198>
 8001b26:	4658      	mov	r0, fp
 8001b28:	f000 f992 	bl	8001e50 <__clzsi2>
 8001b2c:	3020      	adds	r0, #32
 8001b2e:	e672      	b.n	8001816 <__aeabi_ddiv+0x176>
 8001b30:	0003      	movs	r3, r0
 8001b32:	4652      	mov	r2, sl
 8001b34:	3b28      	subs	r3, #40	; 0x28
 8001b36:	409a      	lsls	r2, r3
 8001b38:	4693      	mov	fp, r2
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	e6b4      	b.n	80018a8 <__aeabi_ddiv+0x208>
 8001b3e:	4650      	mov	r0, sl
 8001b40:	f000 f986 	bl	8001e50 <__clzsi2>
 8001b44:	3020      	adds	r0, #32
 8001b46:	e69a      	b.n	800187e <__aeabi_ddiv+0x1de>
 8001b48:	42a6      	cmp	r6, r4
 8001b4a:	d1e2      	bne.n	8001b12 <__aeabi_ddiv+0x472>
 8001b4c:	45b8      	cmp	r8, r7
 8001b4e:	d9dc      	bls.n	8001b0a <__aeabi_ddiv+0x46a>
 8001b50:	1a34      	subs	r4, r6, r0
 8001b52:	469b      	mov	fp, r3
 8001b54:	e759      	b.n	8001a0a <__aeabi_ddiv+0x36a>
 8001b56:	2b1f      	cmp	r3, #31
 8001b58:	dc65      	bgt.n	8001c26 <__aeabi_ddiv+0x586>
 8001b5a:	4c50      	ldr	r4, [pc, #320]	; (8001c9c <__aeabi_ddiv+0x5fc>)
 8001b5c:	9900      	ldr	r1, [sp, #0]
 8001b5e:	46a4      	mov	ip, r4
 8001b60:	465c      	mov	r4, fp
 8001b62:	4461      	add	r1, ip
 8001b64:	0008      	movs	r0, r1
 8001b66:	408c      	lsls	r4, r1
 8001b68:	0011      	movs	r1, r2
 8001b6a:	4082      	lsls	r2, r0
 8001b6c:	40d9      	lsrs	r1, r3
 8001b6e:	1e50      	subs	r0, r2, #1
 8001b70:	4182      	sbcs	r2, r0
 8001b72:	430c      	orrs	r4, r1
 8001b74:	4314      	orrs	r4, r2
 8001b76:	465a      	mov	r2, fp
 8001b78:	40da      	lsrs	r2, r3
 8001b7a:	0013      	movs	r3, r2
 8001b7c:	0762      	lsls	r2, r4, #29
 8001b7e:	d009      	beq.n	8001b94 <__aeabi_ddiv+0x4f4>
 8001b80:	220f      	movs	r2, #15
 8001b82:	4022      	ands	r2, r4
 8001b84:	2a04      	cmp	r2, #4
 8001b86:	d005      	beq.n	8001b94 <__aeabi_ddiv+0x4f4>
 8001b88:	0022      	movs	r2, r4
 8001b8a:	1d14      	adds	r4, r2, #4
 8001b8c:	4294      	cmp	r4, r2
 8001b8e:	4189      	sbcs	r1, r1
 8001b90:	4249      	negs	r1, r1
 8001b92:	185b      	adds	r3, r3, r1
 8001b94:	021a      	lsls	r2, r3, #8
 8001b96:	d562      	bpl.n	8001c5e <__aeabi_ddiv+0x5be>
 8001b98:	2201      	movs	r2, #1
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	2700      	movs	r7, #0
 8001b9e:	e60d      	b.n	80017bc <__aeabi_ddiv+0x11c>
 8001ba0:	428a      	cmp	r2, r1
 8001ba2:	d800      	bhi.n	8001ba6 <__aeabi_ddiv+0x506>
 8001ba4:	e70a      	b.n	80019bc <__aeabi_ddiv+0x31c>
 8001ba6:	1e83      	subs	r3, r0, #2
 8001ba8:	1989      	adds	r1, r1, r6
 8001baa:	e707      	b.n	80019bc <__aeabi_ddiv+0x31c>
 8001bac:	230f      	movs	r3, #15
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d100      	bne.n	8001bb6 <__aeabi_ddiv+0x516>
 8001bb4:	e5e6      	b.n	8001784 <__aeabi_ddiv+0xe4>
 8001bb6:	1d17      	adds	r7, r2, #4
 8001bb8:	4297      	cmp	r7, r2
 8001bba:	4192      	sbcs	r2, r2
 8001bbc:	4253      	negs	r3, r2
 8001bbe:	449b      	add	fp, r3
 8001bc0:	08fa      	lsrs	r2, r7, #3
 8001bc2:	e5e0      	b.n	8001786 <__aeabi_ddiv+0xe6>
 8001bc4:	2800      	cmp	r0, #0
 8001bc6:	d100      	bne.n	8001bca <__aeabi_ddiv+0x52a>
 8001bc8:	e5d7      	b.n	800177a <__aeabi_ddiv+0xda>
 8001bca:	1871      	adds	r1, r6, r1
 8001bcc:	1e53      	subs	r3, r2, #1
 8001bce:	42b1      	cmp	r1, r6
 8001bd0:	d327      	bcc.n	8001c22 <__aeabi_ddiv+0x582>
 8001bd2:	42a9      	cmp	r1, r5
 8001bd4:	d315      	bcc.n	8001c02 <__aeabi_ddiv+0x562>
 8001bd6:	d058      	beq.n	8001c8a <__aeabi_ddiv+0x5ea>
 8001bd8:	001a      	movs	r2, r3
 8001bda:	e773      	b.n	8001ac4 <__aeabi_ddiv+0x424>
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	dc00      	bgt.n	8001be2 <__aeabi_ddiv+0x542>
 8001be0:	e604      	b.n	80017ec <__aeabi_ddiv+0x14c>
 8001be2:	2301      	movs	r3, #1
 8001be4:	2200      	movs	r2, #0
 8001be6:	449b      	add	fp, r3
 8001be8:	e5cd      	b.n	8001786 <__aeabi_ddiv+0xe6>
 8001bea:	2302      	movs	r3, #2
 8001bec:	4447      	add	r7, r8
 8001bee:	4547      	cmp	r7, r8
 8001bf0:	4189      	sbcs	r1, r1
 8001bf2:	425b      	negs	r3, r3
 8001bf4:	469c      	mov	ip, r3
 8001bf6:	4249      	negs	r1, r1
 8001bf8:	1989      	adds	r1, r1, r6
 8001bfa:	190c      	adds	r4, r1, r4
 8001bfc:	44e3      	add	fp, ip
 8001bfe:	1a24      	subs	r4, r4, r0
 8001c00:	e703      	b.n	8001a0a <__aeabi_ddiv+0x36a>
 8001c02:	4643      	mov	r3, r8
 8001c04:	005f      	lsls	r7, r3, #1
 8001c06:	4547      	cmp	r7, r8
 8001c08:	419b      	sbcs	r3, r3
 8001c0a:	46b8      	mov	r8, r7
 8001c0c:	425b      	negs	r3, r3
 8001c0e:	199e      	adds	r6, r3, r6
 8001c10:	3a02      	subs	r2, #2
 8001c12:	1989      	adds	r1, r1, r6
 8001c14:	42a9      	cmp	r1, r5
 8001c16:	d000      	beq.n	8001c1a <__aeabi_ddiv+0x57a>
 8001c18:	e754      	b.n	8001ac4 <__aeabi_ddiv+0x424>
 8001c1a:	4540      	cmp	r0, r8
 8001c1c:	d000      	beq.n	8001c20 <__aeabi_ddiv+0x580>
 8001c1e:	e751      	b.n	8001ac4 <__aeabi_ddiv+0x424>
 8001c20:	e5ab      	b.n	800177a <__aeabi_ddiv+0xda>
 8001c22:	001a      	movs	r2, r3
 8001c24:	e7f6      	b.n	8001c14 <__aeabi_ddiv+0x574>
 8001c26:	211f      	movs	r1, #31
 8001c28:	465f      	mov	r7, fp
 8001c2a:	4249      	negs	r1, r1
 8001c2c:	1b0c      	subs	r4, r1, r4
 8001c2e:	40e7      	lsrs	r7, r4
 8001c30:	2b20      	cmp	r3, #32
 8001c32:	d007      	beq.n	8001c44 <__aeabi_ddiv+0x5a4>
 8001c34:	491a      	ldr	r1, [pc, #104]	; (8001ca0 <__aeabi_ddiv+0x600>)
 8001c36:	9b00      	ldr	r3, [sp, #0]
 8001c38:	468c      	mov	ip, r1
 8001c3a:	4463      	add	r3, ip
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	465b      	mov	r3, fp
 8001c40:	4083      	lsls	r3, r0
 8001c42:	431a      	orrs	r2, r3
 8001c44:	1e50      	subs	r0, r2, #1
 8001c46:	4182      	sbcs	r2, r0
 8001c48:	433a      	orrs	r2, r7
 8001c4a:	2707      	movs	r7, #7
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	4017      	ands	r7, r2
 8001c50:	d009      	beq.n	8001c66 <__aeabi_ddiv+0x5c6>
 8001c52:	210f      	movs	r1, #15
 8001c54:	2300      	movs	r3, #0
 8001c56:	4011      	ands	r1, r2
 8001c58:	0014      	movs	r4, r2
 8001c5a:	2904      	cmp	r1, #4
 8001c5c:	d195      	bne.n	8001b8a <__aeabi_ddiv+0x4ea>
 8001c5e:	0022      	movs	r2, r4
 8001c60:	075f      	lsls	r7, r3, #29
 8001c62:	025b      	lsls	r3, r3, #9
 8001c64:	0b1b      	lsrs	r3, r3, #12
 8001c66:	08d2      	lsrs	r2, r2, #3
 8001c68:	4317      	orrs	r7, r2
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	e5a6      	b.n	80017bc <__aeabi_ddiv+0x11c>
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	4659      	mov	r1, fp
 8001c72:	031b      	lsls	r3, r3, #12
 8001c74:	430b      	orrs	r3, r1
 8001c76:	031b      	lsls	r3, r3, #12
 8001c78:	0017      	movs	r7, r2
 8001c7a:	0b1b      	lsrs	r3, r3, #12
 8001c7c:	4a06      	ldr	r2, [pc, #24]	; (8001c98 <__aeabi_ddiv+0x5f8>)
 8001c7e:	e59d      	b.n	80017bc <__aeabi_ddiv+0x11c>
 8001c80:	42bd      	cmp	r5, r7
 8001c82:	d8b2      	bhi.n	8001bea <__aeabi_ddiv+0x54a>
 8001c84:	469b      	mov	fp, r3
 8001c86:	2400      	movs	r4, #0
 8001c88:	e6bf      	b.n	8001a0a <__aeabi_ddiv+0x36a>
 8001c8a:	4580      	cmp	r8, r0
 8001c8c:	d3b9      	bcc.n	8001c02 <__aeabi_ddiv+0x562>
 8001c8e:	001a      	movs	r2, r3
 8001c90:	e7c3      	b.n	8001c1a <__aeabi_ddiv+0x57a>
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	000003ff 	.word	0x000003ff
 8001c98:	000007ff 	.word	0x000007ff
 8001c9c:	0000041e 	.word	0x0000041e
 8001ca0:	0000043e 	.word	0x0000043e

08001ca4 <__aeabi_f2d>:
 8001ca4:	0041      	lsls	r1, r0, #1
 8001ca6:	0e09      	lsrs	r1, r1, #24
 8001ca8:	1c4b      	adds	r3, r1, #1
 8001caa:	b570      	push	{r4, r5, r6, lr}
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	0246      	lsls	r6, r0, #9
 8001cb0:	0a75      	lsrs	r5, r6, #9
 8001cb2:	0fc4      	lsrs	r4, r0, #31
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	dd14      	ble.n	8001ce2 <__aeabi_f2d+0x3e>
 8001cb8:	23e0      	movs	r3, #224	; 0xe0
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	076d      	lsls	r5, r5, #29
 8001cbe:	0b36      	lsrs	r6, r6, #12
 8001cc0:	18cb      	adds	r3, r1, r3
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	0d0a      	lsrs	r2, r1, #20
 8001cc6:	0028      	movs	r0, r5
 8001cc8:	0512      	lsls	r2, r2, #20
 8001cca:	4d1c      	ldr	r5, [pc, #112]	; (8001d3c <__aeabi_f2d+0x98>)
 8001ccc:	4332      	orrs	r2, r6
 8001cce:	055b      	lsls	r3, r3, #21
 8001cd0:	402a      	ands	r2, r5
 8001cd2:	085b      	lsrs	r3, r3, #1
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	07e4      	lsls	r4, r4, #31
 8001cda:	085b      	lsrs	r3, r3, #1
 8001cdc:	4323      	orrs	r3, r4
 8001cde:	0019      	movs	r1, r3
 8001ce0:	bd70      	pop	{r4, r5, r6, pc}
 8001ce2:	2900      	cmp	r1, #0
 8001ce4:	d114      	bne.n	8001d10 <__aeabi_f2d+0x6c>
 8001ce6:	2d00      	cmp	r5, #0
 8001ce8:	d01e      	beq.n	8001d28 <__aeabi_f2d+0x84>
 8001cea:	0028      	movs	r0, r5
 8001cec:	f000 f8b0 	bl	8001e50 <__clzsi2>
 8001cf0:	280a      	cmp	r0, #10
 8001cf2:	dc1c      	bgt.n	8001d2e <__aeabi_f2d+0x8a>
 8001cf4:	230b      	movs	r3, #11
 8001cf6:	002a      	movs	r2, r5
 8001cf8:	1a1b      	subs	r3, r3, r0
 8001cfa:	40da      	lsrs	r2, r3
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	3315      	adds	r3, #21
 8001d00:	409d      	lsls	r5, r3
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <__aeabi_f2d+0x9c>)
 8001d04:	0312      	lsls	r2, r2, #12
 8001d06:	1a1b      	subs	r3, r3, r0
 8001d08:	055b      	lsls	r3, r3, #21
 8001d0a:	0b16      	lsrs	r6, r2, #12
 8001d0c:	0d5b      	lsrs	r3, r3, #21
 8001d0e:	e7d8      	b.n	8001cc2 <__aeabi_f2d+0x1e>
 8001d10:	2d00      	cmp	r5, #0
 8001d12:	d006      	beq.n	8001d22 <__aeabi_f2d+0x7e>
 8001d14:	0b32      	lsrs	r2, r6, #12
 8001d16:	2680      	movs	r6, #128	; 0x80
 8001d18:	0336      	lsls	r6, r6, #12
 8001d1a:	076d      	lsls	r5, r5, #29
 8001d1c:	4316      	orrs	r6, r2
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <__aeabi_f2d+0xa0>)
 8001d20:	e7cf      	b.n	8001cc2 <__aeabi_f2d+0x1e>
 8001d22:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <__aeabi_f2d+0xa0>)
 8001d24:	2600      	movs	r6, #0
 8001d26:	e7cc      	b.n	8001cc2 <__aeabi_f2d+0x1e>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	2600      	movs	r6, #0
 8001d2c:	e7c9      	b.n	8001cc2 <__aeabi_f2d+0x1e>
 8001d2e:	0003      	movs	r3, r0
 8001d30:	002a      	movs	r2, r5
 8001d32:	3b0b      	subs	r3, #11
 8001d34:	409a      	lsls	r2, r3
 8001d36:	2500      	movs	r5, #0
 8001d38:	e7e3      	b.n	8001d02 <__aeabi_f2d+0x5e>
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	800fffff 	.word	0x800fffff
 8001d40:	00000389 	.word	0x00000389
 8001d44:	000007ff 	.word	0x000007ff

08001d48 <__aeabi_d2f>:
 8001d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d4a:	004c      	lsls	r4, r1, #1
 8001d4c:	0d64      	lsrs	r4, r4, #21
 8001d4e:	030b      	lsls	r3, r1, #12
 8001d50:	1c62      	adds	r2, r4, #1
 8001d52:	0a5b      	lsrs	r3, r3, #9
 8001d54:	0f46      	lsrs	r6, r0, #29
 8001d56:	0552      	lsls	r2, r2, #21
 8001d58:	0fc9      	lsrs	r1, r1, #31
 8001d5a:	431e      	orrs	r6, r3
 8001d5c:	00c5      	lsls	r5, r0, #3
 8001d5e:	0d52      	lsrs	r2, r2, #21
 8001d60:	2a01      	cmp	r2, #1
 8001d62:	dd29      	ble.n	8001db8 <__aeabi_d2f+0x70>
 8001d64:	4b37      	ldr	r3, [pc, #220]	; (8001e44 <__aeabi_d2f+0xfc>)
 8001d66:	18e7      	adds	r7, r4, r3
 8001d68:	2ffe      	cmp	r7, #254	; 0xfe
 8001d6a:	dc1c      	bgt.n	8001da6 <__aeabi_d2f+0x5e>
 8001d6c:	2f00      	cmp	r7, #0
 8001d6e:	dd3b      	ble.n	8001de8 <__aeabi_d2f+0xa0>
 8001d70:	0180      	lsls	r0, r0, #6
 8001d72:	1e43      	subs	r3, r0, #1
 8001d74:	4198      	sbcs	r0, r3
 8001d76:	2207      	movs	r2, #7
 8001d78:	00f3      	lsls	r3, r6, #3
 8001d7a:	0f6d      	lsrs	r5, r5, #29
 8001d7c:	4303      	orrs	r3, r0
 8001d7e:	432b      	orrs	r3, r5
 8001d80:	401a      	ands	r2, r3
 8001d82:	2a00      	cmp	r2, #0
 8001d84:	d004      	beq.n	8001d90 <__aeabi_d2f+0x48>
 8001d86:	220f      	movs	r2, #15
 8001d88:	401a      	ands	r2, r3
 8001d8a:	2a04      	cmp	r2, #4
 8001d8c:	d000      	beq.n	8001d90 <__aeabi_d2f+0x48>
 8001d8e:	3304      	adds	r3, #4
 8001d90:	2280      	movs	r2, #128	; 0x80
 8001d92:	04d2      	lsls	r2, r2, #19
 8001d94:	401a      	ands	r2, r3
 8001d96:	d024      	beq.n	8001de2 <__aeabi_d2f+0x9a>
 8001d98:	3701      	adds	r7, #1
 8001d9a:	b2fa      	uxtb	r2, r7
 8001d9c:	2fff      	cmp	r7, #255	; 0xff
 8001d9e:	d002      	beq.n	8001da6 <__aeabi_d2f+0x5e>
 8001da0:	019b      	lsls	r3, r3, #6
 8001da2:	0a58      	lsrs	r0, r3, #9
 8001da4:	e001      	b.n	8001daa <__aeabi_d2f+0x62>
 8001da6:	22ff      	movs	r2, #255	; 0xff
 8001da8:	2000      	movs	r0, #0
 8001daa:	0240      	lsls	r0, r0, #9
 8001dac:	05d2      	lsls	r2, r2, #23
 8001dae:	0a40      	lsrs	r0, r0, #9
 8001db0:	07c9      	lsls	r1, r1, #31
 8001db2:	4310      	orrs	r0, r2
 8001db4:	4308      	orrs	r0, r1
 8001db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001db8:	4335      	orrs	r5, r6
 8001dba:	2c00      	cmp	r4, #0
 8001dbc:	d104      	bne.n	8001dc8 <__aeabi_d2f+0x80>
 8001dbe:	2d00      	cmp	r5, #0
 8001dc0:	d10a      	bne.n	8001dd8 <__aeabi_d2f+0x90>
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	e7f0      	b.n	8001daa <__aeabi_d2f+0x62>
 8001dc8:	2d00      	cmp	r5, #0
 8001dca:	d0ec      	beq.n	8001da6 <__aeabi_d2f+0x5e>
 8001dcc:	2080      	movs	r0, #128	; 0x80
 8001dce:	03c0      	lsls	r0, r0, #15
 8001dd0:	4330      	orrs	r0, r6
 8001dd2:	22ff      	movs	r2, #255	; 0xff
 8001dd4:	e7e9      	b.n	8001daa <__aeabi_d2f+0x62>
 8001dd6:	2400      	movs	r4, #0
 8001dd8:	2300      	movs	r3, #0
 8001dda:	025b      	lsls	r3, r3, #9
 8001ddc:	0a58      	lsrs	r0, r3, #9
 8001dde:	b2e2      	uxtb	r2, r4
 8001de0:	e7e3      	b.n	8001daa <__aeabi_d2f+0x62>
 8001de2:	08db      	lsrs	r3, r3, #3
 8001de4:	003c      	movs	r4, r7
 8001de6:	e7f8      	b.n	8001dda <__aeabi_d2f+0x92>
 8001de8:	003b      	movs	r3, r7
 8001dea:	3317      	adds	r3, #23
 8001dec:	dbf3      	blt.n	8001dd6 <__aeabi_d2f+0x8e>
 8001dee:	2380      	movs	r3, #128	; 0x80
 8001df0:	041b      	lsls	r3, r3, #16
 8001df2:	4333      	orrs	r3, r6
 8001df4:	261e      	movs	r6, #30
 8001df6:	1bf6      	subs	r6, r6, r7
 8001df8:	2e1f      	cmp	r6, #31
 8001dfa:	dd14      	ble.n	8001e26 <__aeabi_d2f+0xde>
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	4252      	negs	r2, r2
 8001e00:	1bd7      	subs	r7, r2, r7
 8001e02:	001a      	movs	r2, r3
 8001e04:	40fa      	lsrs	r2, r7
 8001e06:	0017      	movs	r7, r2
 8001e08:	2e20      	cmp	r6, #32
 8001e0a:	d004      	beq.n	8001e16 <__aeabi_d2f+0xce>
 8001e0c:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <__aeabi_d2f+0x100>)
 8001e0e:	4694      	mov	ip, r2
 8001e10:	4464      	add	r4, ip
 8001e12:	40a3      	lsls	r3, r4
 8001e14:	431d      	orrs	r5, r3
 8001e16:	002b      	movs	r3, r5
 8001e18:	1e5d      	subs	r5, r3, #1
 8001e1a:	41ab      	sbcs	r3, r5
 8001e1c:	2207      	movs	r2, #7
 8001e1e:	433b      	orrs	r3, r7
 8001e20:	401a      	ands	r2, r3
 8001e22:	2700      	movs	r7, #0
 8001e24:	e7ad      	b.n	8001d82 <__aeabi_d2f+0x3a>
 8001e26:	4a09      	ldr	r2, [pc, #36]	; (8001e4c <__aeabi_d2f+0x104>)
 8001e28:	0028      	movs	r0, r5
 8001e2a:	18a2      	adds	r2, r4, r2
 8001e2c:	4095      	lsls	r5, r2
 8001e2e:	4093      	lsls	r3, r2
 8001e30:	1e6c      	subs	r4, r5, #1
 8001e32:	41a5      	sbcs	r5, r4
 8001e34:	40f0      	lsrs	r0, r6
 8001e36:	2207      	movs	r2, #7
 8001e38:	432b      	orrs	r3, r5
 8001e3a:	4303      	orrs	r3, r0
 8001e3c:	401a      	ands	r2, r3
 8001e3e:	2700      	movs	r7, #0
 8001e40:	e79f      	b.n	8001d82 <__aeabi_d2f+0x3a>
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	fffffc80 	.word	0xfffffc80
 8001e48:	fffffca2 	.word	0xfffffca2
 8001e4c:	fffffc82 	.word	0xfffffc82

08001e50 <__clzsi2>:
 8001e50:	211c      	movs	r1, #28
 8001e52:	2301      	movs	r3, #1
 8001e54:	041b      	lsls	r3, r3, #16
 8001e56:	4298      	cmp	r0, r3
 8001e58:	d301      	bcc.n	8001e5e <__clzsi2+0xe>
 8001e5a:	0c00      	lsrs	r0, r0, #16
 8001e5c:	3910      	subs	r1, #16
 8001e5e:	0a1b      	lsrs	r3, r3, #8
 8001e60:	4298      	cmp	r0, r3
 8001e62:	d301      	bcc.n	8001e68 <__clzsi2+0x18>
 8001e64:	0a00      	lsrs	r0, r0, #8
 8001e66:	3908      	subs	r1, #8
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	4298      	cmp	r0, r3
 8001e6c:	d301      	bcc.n	8001e72 <__clzsi2+0x22>
 8001e6e:	0900      	lsrs	r0, r0, #4
 8001e70:	3904      	subs	r1, #4
 8001e72:	a202      	add	r2, pc, #8	; (adr r2, 8001e7c <__clzsi2+0x2c>)
 8001e74:	5c10      	ldrb	r0, [r2, r0]
 8001e76:	1840      	adds	r0, r0, r1
 8001e78:	4770      	bx	lr
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	02020304 	.word	0x02020304
 8001e80:	01010101 	.word	0x01010101
	...

08001e8c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	60f8      	str	r0, [r7, #12]
 8001e94:	60b9      	str	r1, [r7, #8]
 8001e96:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	4a06      	ldr	r2, [pc, #24]	; (8001eb4 <vApplicationGetIdleTaskMemory+0x28>)
 8001e9c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	4a05      	ldr	r2, [pc, #20]	; (8001eb8 <vApplicationGetIdleTaskMemory+0x2c>)
 8001ea2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2280      	movs	r2, #128	; 0x80
 8001ea8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b004      	add	sp, #16
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	46c0      	nop			; (mov r8, r8)
 8001eb4:	20000028 	.word	0x20000028
 8001eb8:	2000007c 	.word	0x2000007c

08001ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ebc:	b5b0      	push	{r4, r5, r7, lr}
 8001ebe:	b08e      	sub	sp, #56	; 0x38
 8001ec0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ec2:	f000 ff4b 	bl	8002d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ec6:	f000 f837 	bl	8001f38 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eca:	f000 f9db 	bl	8002284 <_ZL12MX_GPIO_Initv>
  MX_ADC_Init();
 8001ece:	f000 f8a3 	bl	8002018 <_ZL11MX_ADC_Initv>
  MX_I2C1_Init();
 8001ed2:	f000 f915 	bl	8002100 <_ZL12MX_I2C1_Initv>
  MX_SPI1_Init();
 8001ed6:	f000 f95f 	bl	8002198 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 8001eda:	f000 f99f 	bl	800221c <_ZL19MX_USART1_UART_Initv>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001ede:	211c      	movs	r1, #28
 8001ee0:	187b      	adds	r3, r7, r1
 8001ee2:	4a11      	ldr	r2, [pc, #68]	; (8001f28 <main+0x6c>)
 8001ee4:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001ee6:	c331      	stmia	r3!, {r0, r4, r5}
 8001ee8:	ca31      	ldmia	r2!, {r0, r4, r5}
 8001eea:	c331      	stmia	r3!, {r0, r4, r5}
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001ef0:	187b      	adds	r3, r7, r1
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f003 ff30 	bl	8005d5a <osThreadCreate>
 8001efa:	0002      	movs	r2, r0
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <main+0x70>)
 8001efe:	601a      	str	r2, [r3, #0]

  /* definition and creation of updateLeds */
  osThreadDef(updateLeds, startUpdateLeds, osPriorityLow, 0, 128);
 8001f00:	003b      	movs	r3, r7
 8001f02:	4a0b      	ldr	r2, [pc, #44]	; (8001f30 <main+0x74>)
 8001f04:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001f06:	c313      	stmia	r3!, {r0, r1, r4}
 8001f08:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001f0a:	c313      	stmia	r3!, {r0, r1, r4}
 8001f0c:	6812      	ldr	r2, [r2, #0]
 8001f0e:	601a      	str	r2, [r3, #0]
  updateLedsHandle = osThreadCreate(osThread(updateLeds), NULL);
 8001f10:	003b      	movs	r3, r7
 8001f12:	2100      	movs	r1, #0
 8001f14:	0018      	movs	r0, r3
 8001f16:	f003 ff20 	bl	8005d5a <osThreadCreate>
 8001f1a:	0002      	movs	r2, r0
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <main+0x78>)
 8001f1e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001f20:	f003 ff13 	bl	8005d4a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 8001f24:	e7fe      	b.n	8001f24 <main+0x68>
 8001f26:	46c0      	nop			; (mov r8, r8)
 8001f28:	08007298 	.word	0x08007298
 8001f2c:	200003ec 	.word	0x200003ec
 8001f30:	080072c0 	.word	0x080072c0
 8001f34:	200003f0 	.word	0x200003f0

08001f38 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f38:	b590      	push	{r4, r7, lr}
 8001f3a:	b095      	sub	sp, #84	; 0x54
 8001f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f3e:	2420      	movs	r4, #32
 8001f40:	193b      	adds	r3, r7, r4
 8001f42:	0018      	movs	r0, r3
 8001f44:	2330      	movs	r3, #48	; 0x30
 8001f46:	001a      	movs	r2, r3
 8001f48:	2100      	movs	r1, #0
 8001f4a:	f005 f98b 	bl	8007264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f4e:	2310      	movs	r3, #16
 8001f50:	18fb      	adds	r3, r7, r3
 8001f52:	0018      	movs	r0, r3
 8001f54:	2310      	movs	r3, #16
 8001f56:	001a      	movs	r2, r3
 8001f58:	2100      	movs	r1, #0
 8001f5a:	f005 f983 	bl	8007264 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f5e:	003b      	movs	r3, r7
 8001f60:	0018      	movs	r0, r3
 8001f62:	2310      	movs	r3, #16
 8001f64:	001a      	movs	r2, r3
 8001f66:	2100      	movs	r1, #0
 8001f68:	f005 f97c 	bl	8007264 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8001f6c:	0021      	movs	r1, r4
 8001f6e:	187b      	adds	r3, r7, r1
 8001f70:	2213      	movs	r2, #19
 8001f72:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f74:	187b      	adds	r3, r7, r1
 8001f76:	2201      	movs	r2, #1
 8001f78:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f7a:	187b      	adds	r3, r7, r1
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001f80:	187b      	adds	r3, r7, r1
 8001f82:	2201      	movs	r2, #1
 8001f84:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f86:	187b      	adds	r3, r7, r1
 8001f88:	2210      	movs	r2, #16
 8001f8a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001f8c:	187b      	adds	r3, r7, r1
 8001f8e:	2210      	movs	r2, #16
 8001f90:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f92:	187b      	adds	r3, r7, r1
 8001f94:	2200      	movs	r2, #0
 8001f96:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f98:	187b      	adds	r3, r7, r1
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f001 fcd0 	bl	8003940 <HAL_RCC_OscConfig>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	1e5a      	subs	r2, r3, #1
 8001fa4:	4193      	sbcs	r3, r2
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 8001fac:	f000 fa42 	bl	8002434 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fb0:	2110      	movs	r1, #16
 8001fb2:	187b      	adds	r3, r7, r1
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001fb8:	187b      	adds	r3, r7, r1
 8001fba:	2201      	movs	r2, #1
 8001fbc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fbe:	187b      	adds	r3, r7, r1
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fc4:	187b      	adds	r3, r7, r1
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001fca:	187b      	adds	r3, r7, r1
 8001fcc:	2100      	movs	r1, #0
 8001fce:	0018      	movs	r0, r3
 8001fd0:	f001 ffd2 	bl	8003f78 <HAL_RCC_ClockConfig>
 8001fd4:	0003      	movs	r3, r0
 8001fd6:	1e5a      	subs	r2, r3, #1
 8001fd8:	4193      	sbcs	r3, r2
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8001fe0:	f000 fa28 	bl	8002434 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001fe4:	003b      	movs	r3, r7
 8001fe6:	2221      	movs	r2, #33	; 0x21
 8001fe8:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001fea:	003b      	movs	r3, r7
 8001fec:	2200      	movs	r2, #0
 8001fee:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001ff0:	003b      	movs	r3, r7
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ff6:	003b      	movs	r3, r7
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	f002 f939 	bl	8004270 <HAL_RCCEx_PeriphCLKConfig>
 8001ffe:	0003      	movs	r3, r0
 8002000:	1e5a      	subs	r2, r3, #1
 8002002:	4193      	sbcs	r3, r2
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 800200a:	f000 fa13 	bl	8002434 <Error_Handler>
  }
}
 800200e:	46c0      	nop			; (mov r8, r8)
 8002010:	46bd      	mov	sp, r7
 8002012:	b015      	add	sp, #84	; 0x54
 8002014:	bd90      	pop	{r4, r7, pc}
	...

08002018 <_ZL11MX_ADC_Initv>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800201e:	1d3b      	adds	r3, r7, #4
 8002020:	0018      	movs	r0, r3
 8002022:	230c      	movs	r3, #12
 8002024:	001a      	movs	r2, r3
 8002026:	2100      	movs	r1, #0
 8002028:	f005 f91c 	bl	8007264 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 800202c:	4b32      	ldr	r3, [pc, #200]	; (80020f8 <_ZL11MX_ADC_Initv+0xe0>)
 800202e:	4a33      	ldr	r2, [pc, #204]	; (80020fc <_ZL11MX_ADC_Initv+0xe4>)
 8002030:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002032:	4b31      	ldr	r3, [pc, #196]	; (80020f8 <_ZL11MX_ADC_Initv+0xe0>)
 8002034:	2200      	movs	r2, #0
 8002036:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002038:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <_ZL11MX_ADC_Initv+0xe0>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800203e:	4b2e      	ldr	r3, [pc, #184]	; (80020f8 <_ZL11MX_ADC_Initv+0xe0>)
 8002040:	2200      	movs	r2, #0
 8002042:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002044:	4b2c      	ldr	r3, [pc, #176]	; (80020f8 <_ZL11MX_ADC_Initv+0xe0>)
 8002046:	2201      	movs	r2, #1
 8002048:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800204a:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <_ZL11MX_ADC_Initv+0xe0>)
 800204c:	2204      	movs	r2, #4
 800204e:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002050:	4b29      	ldr	r3, [pc, #164]	; (80020f8 <_ZL11MX_ADC_Initv+0xe0>)
 8002052:	2200      	movs	r2, #0
 8002054:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002056:	4b28      	ldr	r3, [pc, #160]	; (80020f8 <_ZL11MX_ADC_Initv+0xe0>)
 8002058:	2200      	movs	r2, #0
 800205a:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800205c:	4b26      	ldr	r3, [pc, #152]	; (80020f8 <_ZL11MX_ADC_Initv+0xe0>)
 800205e:	2200      	movs	r2, #0
 8002060:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002062:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <_ZL11MX_ADC_Initv+0xe0>)
 8002064:	2200      	movs	r2, #0
 8002066:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002068:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <_ZL11MX_ADC_Initv+0xe0>)
 800206a:	22c2      	movs	r2, #194	; 0xc2
 800206c:	32ff      	adds	r2, #255	; 0xff
 800206e:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002070:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <_ZL11MX_ADC_Initv+0xe0>)
 8002072:	2200      	movs	r2, #0
 8002074:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <_ZL11MX_ADC_Initv+0xe0>)
 8002078:	2224      	movs	r2, #36	; 0x24
 800207a:	2100      	movs	r1, #0
 800207c:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800207e:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <_ZL11MX_ADC_Initv+0xe0>)
 8002080:	2201      	movs	r2, #1
 8002082:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002084:	4b1c      	ldr	r3, [pc, #112]	; (80020f8 <_ZL11MX_ADC_Initv+0xe0>)
 8002086:	0018      	movs	r0, r3
 8002088:	f000 feba 	bl	8002e00 <HAL_ADC_Init>
 800208c:	0003      	movs	r3, r0
 800208e:	1e5a      	subs	r2, r3, #1
 8002090:	4193      	sbcs	r3, r2
 8002092:	b2db      	uxtb	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d001      	beq.n	800209c <_ZL11MX_ADC_Initv+0x84>
  {
    Error_Handler();
 8002098:	f000 f9cc 	bl	8002434 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800209c:	1d3b      	adds	r3, r7, #4
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80020a2:	1d3b      	adds	r3, r7, #4
 80020a4:	2280      	movs	r2, #128	; 0x80
 80020a6:	0152      	lsls	r2, r2, #5
 80020a8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	2280      	movs	r2, #128	; 0x80
 80020ae:	0552      	lsls	r2, r2, #21
 80020b0:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80020b2:	1d3a      	adds	r2, r7, #4
 80020b4:	4b10      	ldr	r3, [pc, #64]	; (80020f8 <_ZL11MX_ADC_Initv+0xe0>)
 80020b6:	0011      	movs	r1, r2
 80020b8:	0018      	movs	r0, r3
 80020ba:	f000 ffe1 	bl	8003080 <HAL_ADC_ConfigChannel>
 80020be:	0003      	movs	r3, r0
 80020c0:	1e5a      	subs	r2, r3, #1
 80020c2:	4193      	sbcs	r3, r2
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <_ZL11MX_ADC_Initv+0xb6>
  {
    Error_Handler();
 80020ca:	f000 f9b3 	bl	8002434 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80020ce:	1d3b      	adds	r3, r7, #4
 80020d0:	2201      	movs	r2, #1
 80020d2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80020d4:	1d3a      	adds	r2, r7, #4
 80020d6:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <_ZL11MX_ADC_Initv+0xe0>)
 80020d8:	0011      	movs	r1, r2
 80020da:	0018      	movs	r0, r3
 80020dc:	f000 ffd0 	bl	8003080 <HAL_ADC_ConfigChannel>
 80020e0:	0003      	movs	r3, r0
 80020e2:	1e5a      	subs	r2, r3, #1
 80020e4:	4193      	sbcs	r3, r2
 80020e6:	b2db      	uxtb	r3, r3
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <_ZL11MX_ADC_Initv+0xd8>
  {
    Error_Handler();
 80020ec:	f000 f9a2 	bl	8002434 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80020f0:	46c0      	nop			; (mov r8, r8)
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b004      	add	sp, #16
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	2000027c 	.word	0x2000027c
 80020fc:	40012400 	.word	0x40012400

08002100 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002104:	4b21      	ldr	r3, [pc, #132]	; (800218c <_ZL12MX_I2C1_Initv+0x8c>)
 8002106:	4a22      	ldr	r2, [pc, #136]	; (8002190 <_ZL12MX_I2C1_Initv+0x90>)
 8002108:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <_ZL12MX_I2C1_Initv+0x8c>)
 800210c:	4a21      	ldr	r2, [pc, #132]	; (8002194 <_ZL12MX_I2C1_Initv+0x94>)
 800210e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002110:	4b1e      	ldr	r3, [pc, #120]	; (800218c <_ZL12MX_I2C1_Initv+0x8c>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002116:	4b1d      	ldr	r3, [pc, #116]	; (800218c <_ZL12MX_I2C1_Initv+0x8c>)
 8002118:	2201      	movs	r2, #1
 800211a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800211c:	4b1b      	ldr	r3, [pc, #108]	; (800218c <_ZL12MX_I2C1_Initv+0x8c>)
 800211e:	2200      	movs	r2, #0
 8002120:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002122:	4b1a      	ldr	r3, [pc, #104]	; (800218c <_ZL12MX_I2C1_Initv+0x8c>)
 8002124:	2200      	movs	r2, #0
 8002126:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002128:	4b18      	ldr	r3, [pc, #96]	; (800218c <_ZL12MX_I2C1_Initv+0x8c>)
 800212a:	2200      	movs	r2, #0
 800212c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800212e:	4b17      	ldr	r3, [pc, #92]	; (800218c <_ZL12MX_I2C1_Initv+0x8c>)
 8002130:	2200      	movs	r2, #0
 8002132:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002134:	4b15      	ldr	r3, [pc, #84]	; (800218c <_ZL12MX_I2C1_Initv+0x8c>)
 8002136:	2200      	movs	r2, #0
 8002138:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800213a:	4b14      	ldr	r3, [pc, #80]	; (800218c <_ZL12MX_I2C1_Initv+0x8c>)
 800213c:	0018      	movs	r0, r3
 800213e:	f001 fad1 	bl	80036e4 <HAL_I2C_Init>
 8002142:	0003      	movs	r3, r0
 8002144:	1e5a      	subs	r2, r3, #1
 8002146:	4193      	sbcs	r3, r2
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b00      	cmp	r3, #0
 800214c:	d001      	beq.n	8002152 <_ZL12MX_I2C1_Initv+0x52>
  {
    Error_Handler();
 800214e:	f000 f971 	bl	8002434 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <_ZL12MX_I2C1_Initv+0x8c>)
 8002154:	2100      	movs	r1, #0
 8002156:	0018      	movs	r0, r3
 8002158:	f001 fb5a 	bl	8003810 <HAL_I2CEx_ConfigAnalogFilter>
 800215c:	0003      	movs	r3, r0
 800215e:	1e5a      	subs	r2, r3, #1
 8002160:	4193      	sbcs	r3, r2
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <_ZL12MX_I2C1_Initv+0x6c>
  {
    Error_Handler();
 8002168:	f000 f964 	bl	8002434 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800216c:	4b07      	ldr	r3, [pc, #28]	; (800218c <_ZL12MX_I2C1_Initv+0x8c>)
 800216e:	2100      	movs	r1, #0
 8002170:	0018      	movs	r0, r3
 8002172:	f001 fb99 	bl	80038a8 <HAL_I2CEx_ConfigDigitalFilter>
 8002176:	0003      	movs	r3, r0
 8002178:	1e5a      	subs	r2, r3, #1
 800217a:	4193      	sbcs	r3, r2
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <_ZL12MX_I2C1_Initv+0x86>
  {
    Error_Handler();
 8002182:	f000 f957 	bl	8002434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	200002bc 	.word	0x200002bc
 8002190:	40005400 	.word	0x40005400
 8002194:	2000090e 	.word	0x2000090e

08002198 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800219c:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <_ZL12MX_SPI1_Initv+0x7c>)
 800219e:	4a1e      	ldr	r2, [pc, #120]	; (8002218 <_ZL12MX_SPI1_Initv+0x80>)
 80021a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80021a2:	4b1c      	ldr	r3, [pc, #112]	; (8002214 <_ZL12MX_SPI1_Initv+0x7c>)
 80021a4:	2282      	movs	r2, #130	; 0x82
 80021a6:	0052      	lsls	r2, r2, #1
 80021a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021aa:	4b1a      	ldr	r3, [pc, #104]	; (8002214 <_ZL12MX_SPI1_Initv+0x7c>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021b0:	4b18      	ldr	r3, [pc, #96]	; (8002214 <_ZL12MX_SPI1_Initv+0x7c>)
 80021b2:	22e0      	movs	r2, #224	; 0xe0
 80021b4:	00d2      	lsls	r2, r2, #3
 80021b6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80021b8:	4b16      	ldr	r3, [pc, #88]	; (8002214 <_ZL12MX_SPI1_Initv+0x7c>)
 80021ba:	2202      	movs	r2, #2
 80021bc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80021be:	4b15      	ldr	r3, [pc, #84]	; (8002214 <_ZL12MX_SPI1_Initv+0x7c>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021c4:	4b13      	ldr	r3, [pc, #76]	; (8002214 <_ZL12MX_SPI1_Initv+0x7c>)
 80021c6:	2280      	movs	r2, #128	; 0x80
 80021c8:	0092      	lsls	r2, r2, #2
 80021ca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80021cc:	4b11      	ldr	r3, [pc, #68]	; (8002214 <_ZL12MX_SPI1_Initv+0x7c>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021d2:	4b10      	ldr	r3, [pc, #64]	; (8002214 <_ZL12MX_SPI1_Initv+0x7c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021d8:	4b0e      	ldr	r3, [pc, #56]	; (8002214 <_ZL12MX_SPI1_Initv+0x7c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021de:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <_ZL12MX_SPI1_Initv+0x7c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <_ZL12MX_SPI1_Initv+0x7c>)
 80021e6:	2207      	movs	r2, #7
 80021e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80021ea:	4b0a      	ldr	r3, [pc, #40]	; (8002214 <_ZL12MX_SPI1_Initv+0x7c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80021f0:	4b08      	ldr	r3, [pc, #32]	; (8002214 <_ZL12MX_SPI1_Initv+0x7c>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80021f6:	4b07      	ldr	r3, [pc, #28]	; (8002214 <_ZL12MX_SPI1_Initv+0x7c>)
 80021f8:	0018      	movs	r0, r3
 80021fa:	f002 f907 	bl	800440c <HAL_SPI_Init>
 80021fe:	0003      	movs	r3, r0
 8002200:	1e5a      	subs	r2, r3, #1
 8002202:	4193      	sbcs	r3, r2
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <_ZL12MX_SPI1_Initv+0x76>
  {
    Error_Handler();
 800220a:	f000 f913 	bl	8002434 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000308 	.word	0x20000308
 8002218:	40013000 	.word	0x40013000

0800221c <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002220:	4b16      	ldr	r3, [pc, #88]	; (800227c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002222:	4a17      	ldr	r2, [pc, #92]	; (8002280 <_ZL19MX_USART1_UART_Initv+0x64>)
 8002224:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8002226:	4b15      	ldr	r3, [pc, #84]	; (800227c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002228:	2296      	movs	r2, #150	; 0x96
 800222a:	0212      	lsls	r2, r2, #8
 800222c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800222e:	4b13      	ldr	r3, [pc, #76]	; (800227c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002230:	2200      	movs	r2, #0
 8002232:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002234:	4b11      	ldr	r3, [pc, #68]	; (800227c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002236:	2200      	movs	r2, #0
 8002238:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <_ZL19MX_USART1_UART_Initv+0x60>)
 800223c:	2200      	movs	r2, #0
 800223e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002240:	4b0e      	ldr	r3, [pc, #56]	; (800227c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002242:	220c      	movs	r2, #12
 8002244:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002246:	4b0d      	ldr	r3, [pc, #52]	; (800227c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800224c:	4b0b      	ldr	r3, [pc, #44]	; (800227c <_ZL19MX_USART1_UART_Initv+0x60>)
 800224e:	2200      	movs	r2, #0
 8002250:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002254:	2200      	movs	r2, #0
 8002256:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002258:	4b08      	ldr	r3, [pc, #32]	; (800227c <_ZL19MX_USART1_UART_Initv+0x60>)
 800225a:	2200      	movs	r2, #0
 800225c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800225e:	4b07      	ldr	r3, [pc, #28]	; (800227c <_ZL19MX_USART1_UART_Initv+0x60>)
 8002260:	0018      	movs	r0, r3
 8002262:	f003 fa07 	bl	8005674 <HAL_UART_Init>
 8002266:	0003      	movs	r3, r0
 8002268:	1e5a      	subs	r2, r3, #1
 800226a:	4193      	sbcs	r3, r2
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <_ZL19MX_USART1_UART_Initv+0x5a>
  {
    Error_Handler();
 8002272:	f000 f8df 	bl	8002434 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002276:	46c0      	nop			; (mov r8, r8)
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	2000036c 	.word	0x2000036c
 8002280:	40013800 	.word	0x40013800

08002284 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002284:	b590      	push	{r4, r7, lr}
 8002286:	b08b      	sub	sp, #44	; 0x2c
 8002288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228a:	2414      	movs	r4, #20
 800228c:	193b      	adds	r3, r7, r4
 800228e:	0018      	movs	r0, r3
 8002290:	2314      	movs	r3, #20
 8002292:	001a      	movs	r2, r3
 8002294:	2100      	movs	r1, #0
 8002296:	f004 ffe5 	bl	8007264 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800229a:	4b4f      	ldr	r3, [pc, #316]	; (80023d8 <_ZL12MX_GPIO_Initv+0x154>)
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	4b4e      	ldr	r3, [pc, #312]	; (80023d8 <_ZL12MX_GPIO_Initv+0x154>)
 80022a0:	2180      	movs	r1, #128	; 0x80
 80022a2:	0309      	lsls	r1, r1, #12
 80022a4:	430a      	orrs	r2, r1
 80022a6:	615a      	str	r2, [r3, #20]
 80022a8:	4b4b      	ldr	r3, [pc, #300]	; (80023d8 <_ZL12MX_GPIO_Initv+0x154>)
 80022aa:	695a      	ldr	r2, [r3, #20]
 80022ac:	2380      	movs	r3, #128	; 0x80
 80022ae:	031b      	lsls	r3, r3, #12
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80022b6:	4b48      	ldr	r3, [pc, #288]	; (80023d8 <_ZL12MX_GPIO_Initv+0x154>)
 80022b8:	695a      	ldr	r2, [r3, #20]
 80022ba:	4b47      	ldr	r3, [pc, #284]	; (80023d8 <_ZL12MX_GPIO_Initv+0x154>)
 80022bc:	2180      	movs	r1, #128	; 0x80
 80022be:	03c9      	lsls	r1, r1, #15
 80022c0:	430a      	orrs	r2, r1
 80022c2:	615a      	str	r2, [r3, #20]
 80022c4:	4b44      	ldr	r3, [pc, #272]	; (80023d8 <_ZL12MX_GPIO_Initv+0x154>)
 80022c6:	695a      	ldr	r2, [r3, #20]
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	03db      	lsls	r3, r3, #15
 80022cc:	4013      	ands	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d2:	4b41      	ldr	r3, [pc, #260]	; (80023d8 <_ZL12MX_GPIO_Initv+0x154>)
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	4b40      	ldr	r3, [pc, #256]	; (80023d8 <_ZL12MX_GPIO_Initv+0x154>)
 80022d8:	2180      	movs	r1, #128	; 0x80
 80022da:	0289      	lsls	r1, r1, #10
 80022dc:	430a      	orrs	r2, r1
 80022de:	615a      	str	r2, [r3, #20]
 80022e0:	4b3d      	ldr	r3, [pc, #244]	; (80023d8 <_ZL12MX_GPIO_Initv+0x154>)
 80022e2:	695a      	ldr	r2, [r3, #20]
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	029b      	lsls	r3, r3, #10
 80022e8:	4013      	ands	r3, r2
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ee:	4b3a      	ldr	r3, [pc, #232]	; (80023d8 <_ZL12MX_GPIO_Initv+0x154>)
 80022f0:	695a      	ldr	r2, [r3, #20]
 80022f2:	4b39      	ldr	r3, [pc, #228]	; (80023d8 <_ZL12MX_GPIO_Initv+0x154>)
 80022f4:	2180      	movs	r1, #128	; 0x80
 80022f6:	02c9      	lsls	r1, r1, #11
 80022f8:	430a      	orrs	r2, r1
 80022fa:	615a      	str	r2, [r3, #20]
 80022fc:	4b36      	ldr	r3, [pc, #216]	; (80023d8 <_ZL12MX_GPIO_Initv+0x154>)
 80022fe:	695a      	ldr	r2, [r3, #20]
 8002300:	2380      	movs	r3, #128	; 0x80
 8002302:	02db      	lsls	r3, r3, #11
 8002304:	4013      	ands	r3, r2
 8002306:	607b      	str	r3, [r7, #4]
 8002308:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800230a:	23e0      	movs	r3, #224	; 0xe0
 800230c:	021b      	lsls	r3, r3, #8
 800230e:	4833      	ldr	r0, [pc, #204]	; (80023dc <_ZL12MX_GPIO_Initv+0x158>)
 8002310:	2200      	movs	r2, #0
 8002312:	0019      	movs	r1, r3
 8002314:	f001 f9c8 	bl	80036a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 8002318:	4931      	ldr	r1, [pc, #196]	; (80023e0 <_ZL12MX_GPIO_Initv+0x15c>)
 800231a:	2390      	movs	r3, #144	; 0x90
 800231c:	05db      	lsls	r3, r3, #23
 800231e:	2200      	movs	r2, #0
 8002320:	0018      	movs	r0, r3
 8002322:	f001 f9c1 	bl	80036a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8002326:	492f      	ldr	r1, [pc, #188]	; (80023e4 <_ZL12MX_GPIO_Initv+0x160>)
 8002328:	4b2f      	ldr	r3, [pc, #188]	; (80023e8 <_ZL12MX_GPIO_Initv+0x164>)
 800232a:	2200      	movs	r2, #0
 800232c:	0018      	movs	r0, r3
 800232e:	f001 f9bb 	bl	80036a8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002332:	193b      	adds	r3, r7, r4
 8002334:	22e0      	movs	r2, #224	; 0xe0
 8002336:	0212      	lsls	r2, r2, #8
 8002338:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800233a:	193b      	adds	r3, r7, r4
 800233c:	2201      	movs	r2, #1
 800233e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002340:	193b      	adds	r3, r7, r4
 8002342:	2202      	movs	r2, #2
 8002344:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002346:	193b      	adds	r3, r7, r4
 8002348:	2200      	movs	r2, #0
 800234a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800234c:	193b      	adds	r3, r7, r4
 800234e:	4a23      	ldr	r2, [pc, #140]	; (80023dc <_ZL12MX_GPIO_Initv+0x158>)
 8002350:	0019      	movs	r1, r3
 8002352:	0010      	movs	r0, r2
 8002354:	f001 f838 	bl	80033c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002358:	193b      	adds	r3, r7, r4
 800235a:	2210      	movs	r2, #16
 800235c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800235e:	193b      	adds	r3, r7, r4
 8002360:	2201      	movs	r2, #1
 8002362:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	193b      	adds	r3, r7, r4
 8002366:	2200      	movs	r2, #0
 8002368:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800236a:	193b      	adds	r3, r7, r4
 800236c:	2200      	movs	r2, #0
 800236e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002370:	193a      	adds	r2, r7, r4
 8002372:	2390      	movs	r3, #144	; 0x90
 8002374:	05db      	lsls	r3, r3, #23
 8002376:	0011      	movs	r1, r2
 8002378:	0018      	movs	r0, r3
 800237a:	f001 f825 	bl	80033c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800237e:	0021      	movs	r1, r4
 8002380:	187b      	adds	r3, r7, r1
 8002382:	4a18      	ldr	r2, [pc, #96]	; (80023e4 <_ZL12MX_GPIO_Initv+0x160>)
 8002384:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002386:	187b      	adds	r3, r7, r1
 8002388:	2201      	movs	r2, #1
 800238a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800238c:	187b      	adds	r3, r7, r1
 800238e:	2202      	movs	r2, #2
 8002390:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002392:	187b      	adds	r3, r7, r1
 8002394:	2200      	movs	r2, #0
 8002396:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002398:	000c      	movs	r4, r1
 800239a:	187b      	adds	r3, r7, r1
 800239c:	4a12      	ldr	r2, [pc, #72]	; (80023e8 <_ZL12MX_GPIO_Initv+0x164>)
 800239e:	0019      	movs	r1, r3
 80023a0:	0010      	movs	r0, r2
 80023a2:	f001 f811 	bl	80033c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 80023a6:	0021      	movs	r1, r4
 80023a8:	187b      	adds	r3, r7, r1
 80023aa:	2298      	movs	r2, #152	; 0x98
 80023ac:	0212      	lsls	r2, r2, #8
 80023ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b0:	187b      	adds	r3, r7, r1
 80023b2:	2201      	movs	r2, #1
 80023b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80023b6:	187b      	adds	r3, r7, r1
 80023b8:	2202      	movs	r2, #2
 80023ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023bc:	187b      	adds	r3, r7, r1
 80023be:	2200      	movs	r2, #0
 80023c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c2:	187a      	adds	r2, r7, r1
 80023c4:	2390      	movs	r3, #144	; 0x90
 80023c6:	05db      	lsls	r3, r3, #23
 80023c8:	0011      	movs	r1, r2
 80023ca:	0018      	movs	r0, r3
 80023cc:	f000 fffc 	bl	80033c8 <HAL_GPIO_Init>

}
 80023d0:	46c0      	nop			; (mov r8, r8)
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b00b      	add	sp, #44	; 0x2c
 80023d6:	bd90      	pop	{r4, r7, pc}
 80023d8:	40021000 	.word	0x40021000
 80023dc:	48000800 	.word	0x48000800
 80023e0:	00009810 	.word	0x00009810
 80023e4:	0000ff3f 	.word	0x0000ff3f
 80023e8:	48000400 	.word	0x48000400

080023ec <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80023f4:	2001      	movs	r0, #1
 80023f6:	f003 fcfd 	bl	8005df4 <osDelay>
 80023fa:	e7fb      	b.n	80023f4 <_Z16StartDefaultTaskPKv+0x8>

080023fc <_Z15startUpdateLedsPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startUpdateLeds */
void startUpdateLeds(void const * argument)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startUpdateLeds */
  /* Infinite loop */
	run();
 8002404:	f000 f9a8 	bl	8002758 <_Z3runv>
  /* USER CODE END startUpdateLeds */
}
 8002408:	46c0      	nop			; (mov r8, r8)
 800240a:	46bd      	mov	sp, r7
 800240c:	b002      	add	sp, #8
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a04      	ldr	r2, [pc, #16]	; (8002430 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d101      	bne.n	8002426 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002422:	f000 fcaf 	bl	8002d84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002426:	46c0      	nop			; (mov r8, r8)
 8002428:	46bd      	mov	sp, r7
 800242a:	b002      	add	sp, #8
 800242c:	bd80      	pop	{r7, pc}
 800242e:	46c0      	nop			; (mov r8, r8)
 8002430:	40012c00 	.word	0x40012c00

08002434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002438:	46c0      	nop			; (mov r8, r8)
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <_ZN3pinC1EP12GPIO_TypeDeft>:
#include "stm32f0xx_hal.h"

class pin
{
public:
	pin(GPIO_TypeDef* port, uint16_t pinNum) : m_port(port), m_pinNum(pinNum){
 800243e:	b580      	push	{r7, lr}
 8002440:	b084      	sub	sp, #16
 8002442:	af00      	add	r7, sp, #0
 8002444:	60f8      	str	r0, [r7, #12]
 8002446:	60b9      	str	r1, [r7, #8]
 8002448:	1dbb      	adds	r3, r7, #6
 800244a:	801a      	strh	r2, [r3, #0]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	68ba      	ldr	r2, [r7, #8]
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1dba      	adds	r2, r7, #6
 8002456:	8812      	ldrh	r2, [r2, #0]
 8002458:	809a      	strh	r2, [r3, #4]
		//Initialize Everything of being off
		setLow();
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	0018      	movs	r0, r3
 800245e:	f000 f805 	bl	800246c <_ZN3pin6setLowEv>
	};
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	0018      	movs	r0, r3
 8002466:	46bd      	mov	sp, r7
 8002468:	b004      	add	sp, #16
 800246a:	bd80      	pop	{r7, pc}

0800246c <_ZN3pin6setLowEv>:
	const void toggle(){ HAL_GPIO_TogglePin(m_port, m_pinNum); }
	const void setLow(){ HAL_GPIO_WritePin(m_port, m_pinNum, GPIO_PIN_RESET); }
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6818      	ldr	r0, [r3, #0]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	889b      	ldrh	r3, [r3, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	0019      	movs	r1, r3
 8002480:	f001 f912 	bl	80036a8 <HAL_GPIO_WritePin>
 8002484:	46c0      	nop			; (mov r8, r8)
 8002486:	46bd      	mov	sp, r7
 8002488:	b002      	add	sp, #8
 800248a:	bd80      	pop	{r7, pc}

0800248c <_ZN3pin7setHighEv>:
	const void setHigh(){ HAL_GPIO_WritePin(m_port, m_pinNum, GPIO_PIN_SET); }
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6818      	ldr	r0, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	889b      	ldrh	r3, [r3, #4]
 800249c:	2201      	movs	r2, #1
 800249e:	0019      	movs	r1, r3
 80024a0:	f001 f902 	bl	80036a8 <HAL_GPIO_WritePin>
 80024a4:	46c0      	nop			; (mov r8, r8)
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b002      	add	sp, #8
 80024aa:	bd80      	pop	{r7, pc}

080024ac <_ZN6LIS3DHC1E3pin>:

#include <array>

class LIS3DH{
public:
	LIS3DH(pin CS_PIN) : m_CS_PIN(CS_PIN) {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	60f8      	str	r0, [r7, #12]
 80024b4:	1d3b      	adds	r3, r7, #4
 80024b6:	6019      	str	r1, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1d3a      	adds	r2, r7, #4
 80024be:	ca03      	ldmia	r2!, {r0, r1}
 80024c0:	c303      	stmia	r3!, {r0, r1}
		m_CS_PIN.setHigh();
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	0018      	movs	r0, r3
 80024c6:	f7ff ffe1 	bl	800248c <_ZN3pin7setHighEv>
		write({0x20, 0x77}); // write some stuff, cant remember. Need to look at datasheet.
 80024ca:	2110      	movs	r1, #16
 80024cc:	187b      	adds	r3, r7, r1
 80024ce:	4a0c      	ldr	r2, [pc, #48]	; (8002500 <_ZN6LIS3DHC1E3pin+0x54>)
 80024d0:	8812      	ldrh	r2, [r2, #0]
 80024d2:	801a      	strh	r2, [r3, #0]
 80024d4:	187b      	adds	r3, r7, r1
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	6819      	ldr	r1, [r3, #0]
 80024da:	0010      	movs	r0, r2
 80024dc:	f000 f87a 	bl	80025d4 <_ZN6LIS3DH5writeESt5arrayIhLj2EE>
		write({0x23, 0x08});
 80024e0:	2114      	movs	r1, #20
 80024e2:	187b      	adds	r3, r7, r1
 80024e4:	4a07      	ldr	r2, [pc, #28]	; (8002504 <_ZN6LIS3DHC1E3pin+0x58>)
 80024e6:	8812      	ldrh	r2, [r2, #0]
 80024e8:	801a      	strh	r2, [r3, #0]
 80024ea:	187b      	adds	r3, r7, r1
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	6819      	ldr	r1, [r3, #0]
 80024f0:	0010      	movs	r0, r2
 80024f2:	f000 f86f 	bl	80025d4 <_ZN6LIS3DH5writeESt5arrayIhLj2EE>
	};
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	0018      	movs	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	b006      	add	sp, #24
 80024fe:	bd80      	pop	{r7, pc}
 8002500:	080072dc 	.word	0x080072dc
 8002504:	080072e0 	.word	0x080072e0

08002508 <_ZN6LIS3DH4getXEv>:

	const int8_t getX(){
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
		return (int8_t)read(0x29);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2129      	movs	r1, #41	; 0x29
 8002514:	0018      	movs	r0, r3
 8002516:	f000 f815 	bl	8002544 <_ZN6LIS3DH4readEh>
 800251a:	0003      	movs	r3, r0
 800251c:	b25b      	sxtb	r3, r3
	}
 800251e:	0018      	movs	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	b002      	add	sp, #8
 8002524:	bd80      	pop	{r7, pc}

08002526 <_ZN6LIS3DH4getYEv>:

	const int8_t getY(){
 8002526:	b580      	push	{r7, lr}
 8002528:	b082      	sub	sp, #8
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
		return (int8_t)read(0x2B);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	212b      	movs	r1, #43	; 0x2b
 8002532:	0018      	movs	r0, r3
 8002534:	f000 f806 	bl	8002544 <_ZN6LIS3DH4readEh>
 8002538:	0003      	movs	r3, r0
 800253a:	b25b      	sxtb	r3, r3
	}
 800253c:	0018      	movs	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	b002      	add	sp, #8
 8002542:	bd80      	pop	{r7, pc}

08002544 <_ZN6LIS3DH4readEh>:

	const uint8_t getZ(){
		return (int8_t)read(0x2D);
	}

	const uint8_t read(uint8_t txBuff){
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	000a      	movs	r2, r1
 800254e:	1cfb      	adds	r3, r7, #3
 8002550:	701a      	strb	r2, [r3, #0]

		uint8_t rxBuff;

		txBuff = txBuff | 0x80;
 8002552:	1cfb      	adds	r3, r7, #3
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2280      	movs	r2, #128	; 0x80
 8002558:	4252      	negs	r2, r2
 800255a:	4313      	orrs	r3, r2
 800255c:	b2da      	uxtb	r2, r3
 800255e:	1cfb      	adds	r3, r7, #3
 8002560:	701a      	strb	r2, [r3, #0]

		m_CS_PIN.setLow();
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	0018      	movs	r0, r3
 8002566:	f7ff ff81 	bl	800246c <_ZN3pin6setLowEv>
		HAL_Delay(1);
 800256a:	2001      	movs	r0, #1
 800256c:	f000 fc26 	bl	8002dbc <HAL_Delay>
		HAL_SPI_Transmit(&hspi1, &txBuff, 1, 1000);
 8002570:	23fa      	movs	r3, #250	; 0xfa
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	1cf9      	adds	r1, r7, #3
 8002576:	4811      	ldr	r0, [pc, #68]	; (80025bc <_ZN6LIS3DH4readEh+0x78>)
 8002578:	2201      	movs	r2, #1
 800257a:	f001 ffe1 	bl	8004540 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &rxBuff, 1, 1000);
 800257e:	23fa      	movs	r3, #250	; 0xfa
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	220f      	movs	r2, #15
 8002584:	18b9      	adds	r1, r7, r2
 8002586:	480d      	ldr	r0, [pc, #52]	; (80025bc <_ZN6LIS3DH4readEh+0x78>)
 8002588:	2201      	movs	r2, #1
 800258a:	f002 f95b 	bl	8004844 <HAL_SPI_Receive>
		while( (&hspi1)->State == HAL_SPI_STATE_BUSY );
 800258e:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <_ZN6LIS3DH4readEh+0x78>)
 8002590:	225d      	movs	r2, #93	; 0x5d
 8002592:	5c9b      	ldrb	r3, [r3, r2]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	3b02      	subs	r3, #2
 8002598:	425a      	negs	r2, r3
 800259a:	4153      	adcs	r3, r2
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d000      	beq.n	80025a4 <_ZN6LIS3DH4readEh+0x60>
 80025a2:	e7f4      	b.n	800258e <_ZN6LIS3DH4readEh+0x4a>
		m_CS_PIN.setHigh();
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	0018      	movs	r0, r3
 80025a8:	f7ff ff70 	bl	800248c <_ZN3pin7setHighEv>

		return rxBuff;
 80025ac:	230f      	movs	r3, #15
 80025ae:	18fb      	adds	r3, r7, r3
 80025b0:	781b      	ldrb	r3, [r3, #0]
	}
 80025b2:	0018      	movs	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	b004      	add	sp, #16
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	46c0      	nop			; (mov r8, r8)
 80025bc:	20000308 	.word	0x20000308

080025c0 <_ZNKSt5arrayIhLj2EE4sizeEv>:
      crend() const noexcept
      { return const_reverse_iterator(begin()); }

      // Capacity.
      constexpr size_type
      size() const noexcept { return _Nm; }
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	2302      	movs	r3, #2
 80025ca:	0018      	movs	r0, r3
 80025cc:	46bd      	mov	sp, r7
 80025ce:	b002      	add	sp, #8
 80025d0:	bd80      	pop	{r7, pc}
	...

080025d4 <_ZN6LIS3DH5writeESt5arrayIhLj2EE>:

	void write(std::array<uint8_t, 2> txBuff){
 80025d4:	b590      	push	{r4, r7, lr}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	003b      	movs	r3, r7
 80025de:	8019      	strh	r1, [r3, #0]

		m_CS_PIN.setLow();
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	0018      	movs	r0, r3
 80025e4:	f7ff ff42 	bl	800246c <_ZN3pin6setLowEv>
		HAL_Delay(1);
 80025e8:	2001      	movs	r0, #1
 80025ea:	f000 fbe7 	bl	8002dbc <HAL_Delay>
		HAL_SPI_Transmit(&hspi1, txBuff.data(), txBuff.size(), 1000);
 80025ee:	003b      	movs	r3, r7
 80025f0:	0018      	movs	r0, r3
 80025f2:	f000 f9a9 	bl	8002948 <_ZNSt5arrayIhLj2EE4dataEv>
 80025f6:	0004      	movs	r4, r0
 80025f8:	003b      	movs	r3, r7
 80025fa:	0018      	movs	r0, r3
 80025fc:	f7ff ffe0 	bl	80025c0 <_ZNKSt5arrayIhLj2EE4sizeEv>
 8002600:	0003      	movs	r3, r0
 8002602:	b29a      	uxth	r2, r3
 8002604:	23fa      	movs	r3, #250	; 0xfa
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	480b      	ldr	r0, [pc, #44]	; (8002638 <_ZN6LIS3DH5writeESt5arrayIhLj2EE+0x64>)
 800260a:	0021      	movs	r1, r4
 800260c:	f001 ff98 	bl	8004540 <HAL_SPI_Transmit>
		while( (&hspi1)->State == HAL_SPI_STATE_BUSY );
 8002610:	4b09      	ldr	r3, [pc, #36]	; (8002638 <_ZN6LIS3DH5writeESt5arrayIhLj2EE+0x64>)
 8002612:	225d      	movs	r2, #93	; 0x5d
 8002614:	5c9b      	ldrb	r3, [r3, r2]
 8002616:	b2db      	uxtb	r3, r3
 8002618:	3b02      	subs	r3, #2
 800261a:	425a      	negs	r2, r3
 800261c:	4153      	adcs	r3, r2
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d000      	beq.n	8002626 <_ZN6LIS3DH5writeESt5arrayIhLj2EE+0x52>
 8002624:	e7f4      	b.n	8002610 <_ZN6LIS3DH5writeESt5arrayIhLj2EE+0x3c>
		m_CS_PIN.setHigh();
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	0018      	movs	r0, r3
 800262a:	f7ff ff2f 	bl	800248c <_ZN3pin7setHighEv>

	}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	46bd      	mov	sp, r7
 8002632:	b003      	add	sp, #12
 8002634:	bd90      	pop	{r4, r7, pc}
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	20000308 	.word	0x20000308

0800263c <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	1c11      	adds	r1, r2, #0
 800264c:	1c18      	adds	r0, r3, #0
 800264e:	f004 fc43 	bl	8006ed8 <atan2f>
 8002652:	1c03      	adds	r3, r0, #0
 8002654:	1c18      	adds	r0, r3, #0
 8002656:	46bd      	mov	sp, r7
 8002658:	b002      	add	sp, #8
 800265a:	bd80      	pop	{r7, pc}

0800265c <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	1c18      	adds	r0, r3, #0
 8002668:	f004 fbf8 	bl	8006e5c <floorf>
 800266c:	1c03      	adds	r3, r0, #0
 800266e:	1c18      	adds	r0, r3, #0
 8002670:	46bd      	mov	sp, r7
 8002672:	b002      	add	sp, #8
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <_Z14calculateAngleaa>:
#include <math.h>

#define PI 3.14159265

// Return value from [0,360]
constexpr float calculateAngle(int8_t x, int8_t y){
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	0002      	movs	r2, r0
 8002680:	1dfb      	adds	r3, r7, #7
 8002682:	701a      	strb	r2, [r3, #0]
 8002684:	1dbb      	adds	r3, r7, #6
 8002686:	1c0a      	adds	r2, r1, #0
 8002688:	701a      	strb	r2, [r3, #0]
	float fy = -1*(float)y;
 800268a:	1dbb      	adds	r3, r7, #6
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	b25b      	sxtb	r3, r3
 8002690:	0018      	movs	r0, r3
 8002692:	f7fe fc9f 	bl	8000fd4 <__aeabi_i2f>
 8002696:	1c02      	adds	r2, r0, #0
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	061b      	lsls	r3, r3, #24
 800269c:	4053      	eors	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]
	float fx = (float)x;
 80026a0:	1dfb      	adds	r3, r7, #7
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	b25b      	sxtb	r3, r3
 80026a6:	0018      	movs	r0, r3
 80026a8:	f7fe fc94 	bl	8000fd4 <__aeabi_i2f>
 80026ac:	1c03      	adds	r3, r0, #0
 80026ae:	60bb      	str	r3, [r7, #8]
	return std::atan2(fy,fx)*180/PI+180;
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	1c11      	adds	r1, r2, #0
 80026b6:	1c18      	adds	r0, r3, #0
 80026b8:	f7ff ffc0 	bl	800263c <_ZSt5atan2ff>
 80026bc:	1c03      	adds	r3, r0, #0
 80026be:	490f      	ldr	r1, [pc, #60]	; (80026fc <_Z14calculateAngleaa+0x84>)
 80026c0:	1c18      	adds	r0, r3, #0
 80026c2:	f7fe f971 	bl	80009a8 <__aeabi_fmul>
 80026c6:	1c03      	adds	r3, r0, #0
 80026c8:	1c18      	adds	r0, r3, #0
 80026ca:	f7ff faeb 	bl	8001ca4 <__aeabi_f2d>
 80026ce:	4a0c      	ldr	r2, [pc, #48]	; (8002700 <_Z14calculateAngleaa+0x88>)
 80026d0:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <_Z14calculateAngleaa+0x8c>)
 80026d2:	f7fe ffe5 	bl	80016a0 <__aeabi_ddiv>
 80026d6:	0003      	movs	r3, r0
 80026d8:	000c      	movs	r4, r1
 80026da:	0018      	movs	r0, r3
 80026dc:	0021      	movs	r1, r4
 80026de:	2200      	movs	r2, #0
 80026e0:	4b09      	ldr	r3, [pc, #36]	; (8002708 <_Z14calculateAngleaa+0x90>)
 80026e2:	f7fe fcc1 	bl	8001068 <__aeabi_dadd>
 80026e6:	0003      	movs	r3, r0
 80026e8:	000c      	movs	r4, r1
 80026ea:	0018      	movs	r0, r3
 80026ec:	0021      	movs	r1, r4
 80026ee:	f7ff fb2b 	bl	8001d48 <__aeabi_d2f>
 80026f2:	1c03      	adds	r3, r0, #0
}
 80026f4:	1c18      	adds	r0, r3, #0
 80026f6:	46bd      	mov	sp, r7
 80026f8:	b005      	add	sp, #20
 80026fa:	bd90      	pop	{r4, r7, pc}
 80026fc:	43340000 	.word	0x43340000
 8002700:	53c8d4f1 	.word	0x53c8d4f1
 8002704:	400921fb 	.word	0x400921fb
 8002708:	40668000 	.word	0x40668000

0800270c <_Z10angleToLedf>:

// This could be better, it does not have an equal window for LED 0 or 20  compared to the others
constexpr uint8_t angleToLed(float angle){
 800270c:	b5b0      	push	{r4, r5, r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
	uint8_t pin = floor(angle/18);
 8002714:	490f      	ldr	r1, [pc, #60]	; (8002754 <_Z10angleToLedf+0x48>)
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f7fd ff6e 	bl	80005f8 <__aeabi_fdiv>
 800271c:	1c03      	adds	r3, r0, #0
 800271e:	1c18      	adds	r0, r3, #0
 8002720:	f7ff ff9c 	bl	800265c <_ZSt5floorf>
 8002724:	1c03      	adds	r3, r0, #0
 8002726:	250f      	movs	r5, #15
 8002728:	197c      	adds	r4, r7, r5
 800272a:	1c18      	adds	r0, r3, #0
 800272c:	f7fd fdb2 	bl	8000294 <__aeabi_f2uiz>
 8002730:	0003      	movs	r3, r0
 8002732:	7023      	strb	r3, [r4, #0]
	if(pin > 19) pin = 19;
 8002734:	197b      	adds	r3, r7, r5
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b13      	cmp	r3, #19
 800273a:	d903      	bls.n	8002744 <_Z10angleToLedf+0x38>
 800273c:	230f      	movs	r3, #15
 800273e:	18fb      	adds	r3, r7, r3
 8002740:	2213      	movs	r2, #19
 8002742:	701a      	strb	r2, [r3, #0]
	if(pin < 0) pin = 0;
	return pin;
 8002744:	230f      	movs	r3, #15
 8002746:	18fb      	adds	r3, r7, r3
 8002748:	781b      	ldrb	r3, [r3, #0]
}
 800274a:	0018      	movs	r0, r3
 800274c:	46bd      	mov	sp, r7
 800274e:	b004      	add	sp, #16
 8002750:	bdb0      	pop	{r4, r5, r7, pc}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	41900000 	.word	0x41900000

08002758 <_Z3runv>:

void run(){
 8002758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800275a:	b0b1      	sub	sp, #196	; 0xc4
 800275c:	af00      	add	r7, sp, #0
				pin(GPIOB, GPIO_PIN_8),
				pin(GPIOB, GPIO_PIN_5),
				pin(GPIOB, GPIO_PIN_4),
				pin(GPIOB, GPIO_PIN_3),
				pin(GPIOA, GPIO_PIN_15),
				pin(GPIOA, GPIO_PIN_12)};
 800275e:	230c      	movs	r3, #12
 8002760:	18fc      	adds	r4, r7, r3
 8002762:	2380      	movs	r3, #128	; 0x80
 8002764:	011a      	lsls	r2, r3, #4
 8002766:	2390      	movs	r3, #144	; 0x90
 8002768:	05db      	lsls	r3, r3, #23
 800276a:	0019      	movs	r1, r3
 800276c:	0020      	movs	r0, r4
 800276e:	f7ff fe66 	bl	800243e <_ZN3pinC1EP12GPIO_TypeDeft>
 8002772:	3408      	adds	r4, #8
 8002774:	2380      	movs	r3, #128	; 0x80
 8002776:	021b      	lsls	r3, r3, #8
 8002778:	4971      	ldr	r1, [pc, #452]	; (8002940 <_Z3runv+0x1e8>)
 800277a:	001a      	movs	r2, r3
 800277c:	0020      	movs	r0, r4
 800277e:	f7ff fe5e 	bl	800243e <_ZN3pinC1EP12GPIO_TypeDeft>
 8002782:	3408      	adds	r4, #8
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	01db      	lsls	r3, r3, #7
 8002788:	496d      	ldr	r1, [pc, #436]	; (8002940 <_Z3runv+0x1e8>)
 800278a:	001a      	movs	r2, r3
 800278c:	0020      	movs	r0, r4
 800278e:	f7ff fe56 	bl	800243e <_ZN3pinC1EP12GPIO_TypeDeft>
 8002792:	3408      	adds	r4, #8
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	019b      	lsls	r3, r3, #6
 8002798:	4969      	ldr	r1, [pc, #420]	; (8002940 <_Z3runv+0x1e8>)
 800279a:	001a      	movs	r2, r3
 800279c:	0020      	movs	r0, r4
 800279e:	f7ff fe4e 	bl	800243e <_ZN3pinC1EP12GPIO_TypeDeft>
 80027a2:	3408      	adds	r4, #8
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	015b      	lsls	r3, r3, #5
 80027a8:	4965      	ldr	r1, [pc, #404]	; (8002940 <_Z3runv+0x1e8>)
 80027aa:	001a      	movs	r2, r3
 80027ac:	0020      	movs	r0, r4
 80027ae:	f7ff fe46 	bl	800243e <_ZN3pinC1EP12GPIO_TypeDeft>
 80027b2:	3408      	adds	r4, #8
 80027b4:	2380      	movs	r3, #128	; 0x80
 80027b6:	011b      	lsls	r3, r3, #4
 80027b8:	4961      	ldr	r1, [pc, #388]	; (8002940 <_Z3runv+0x1e8>)
 80027ba:	001a      	movs	r2, r3
 80027bc:	0020      	movs	r0, r4
 80027be:	f7ff fe3e 	bl	800243e <_ZN3pinC1EP12GPIO_TypeDeft>
 80027c2:	3408      	adds	r4, #8
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	495d      	ldr	r1, [pc, #372]	; (8002940 <_Z3runv+0x1e8>)
 80027ca:	001a      	movs	r2, r3
 80027cc:	0020      	movs	r0, r4
 80027ce:	f7ff fe36 	bl	800243e <_ZN3pinC1EP12GPIO_TypeDeft>
 80027d2:	3408      	adds	r4, #8
 80027d4:	4b5a      	ldr	r3, [pc, #360]	; (8002940 <_Z3runv+0x1e8>)
 80027d6:	2204      	movs	r2, #4
 80027d8:	0019      	movs	r1, r3
 80027da:	0020      	movs	r0, r4
 80027dc:	f7ff fe2f 	bl	800243e <_ZN3pinC1EP12GPIO_TypeDeft>
 80027e0:	3408      	adds	r4, #8
 80027e2:	4b57      	ldr	r3, [pc, #348]	; (8002940 <_Z3runv+0x1e8>)
 80027e4:	2202      	movs	r2, #2
 80027e6:	0019      	movs	r1, r3
 80027e8:	0020      	movs	r0, r4
 80027ea:	f7ff fe28 	bl	800243e <_ZN3pinC1EP12GPIO_TypeDeft>
 80027ee:	3408      	adds	r4, #8
 80027f0:	4b53      	ldr	r3, [pc, #332]	; (8002940 <_Z3runv+0x1e8>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	0019      	movs	r1, r3
 80027f6:	0020      	movs	r0, r4
 80027f8:	f7ff fe21 	bl	800243e <_ZN3pinC1EP12GPIO_TypeDeft>
 80027fc:	3408      	adds	r4, #8
 80027fe:	2380      	movs	r3, #128	; 0x80
 8002800:	021b      	lsls	r3, r3, #8
 8002802:	4950      	ldr	r1, [pc, #320]	; (8002944 <_Z3runv+0x1ec>)
 8002804:	001a      	movs	r2, r3
 8002806:	0020      	movs	r0, r4
 8002808:	f7ff fe19 	bl	800243e <_ZN3pinC1EP12GPIO_TypeDeft>
 800280c:	3408      	adds	r4, #8
 800280e:	2380      	movs	r3, #128	; 0x80
 8002810:	01db      	lsls	r3, r3, #7
 8002812:	494c      	ldr	r1, [pc, #304]	; (8002944 <_Z3runv+0x1ec>)
 8002814:	001a      	movs	r2, r3
 8002816:	0020      	movs	r0, r4
 8002818:	f7ff fe11 	bl	800243e <_ZN3pinC1EP12GPIO_TypeDeft>
 800281c:	3408      	adds	r4, #8
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	019b      	lsls	r3, r3, #6
 8002822:	4948      	ldr	r1, [pc, #288]	; (8002944 <_Z3runv+0x1ec>)
 8002824:	001a      	movs	r2, r3
 8002826:	0020      	movs	r0, r4
 8002828:	f7ff fe09 	bl	800243e <_ZN3pinC1EP12GPIO_TypeDeft>
 800282c:	3408      	adds	r4, #8
 800282e:	2380      	movs	r3, #128	; 0x80
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4943      	ldr	r1, [pc, #268]	; (8002940 <_Z3runv+0x1e8>)
 8002834:	001a      	movs	r2, r3
 8002836:	0020      	movs	r0, r4
 8002838:	f7ff fe01 	bl	800243e <_ZN3pinC1EP12GPIO_TypeDeft>
 800283c:	3408      	adds	r4, #8
 800283e:	2380      	movs	r3, #128	; 0x80
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	493f      	ldr	r1, [pc, #252]	; (8002940 <_Z3runv+0x1e8>)
 8002844:	001a      	movs	r2, r3
 8002846:	0020      	movs	r0, r4
 8002848:	f7ff fdf9 	bl	800243e <_ZN3pinC1EP12GPIO_TypeDeft>
 800284c:	3408      	adds	r4, #8
 800284e:	4b3c      	ldr	r3, [pc, #240]	; (8002940 <_Z3runv+0x1e8>)
 8002850:	2220      	movs	r2, #32
 8002852:	0019      	movs	r1, r3
 8002854:	0020      	movs	r0, r4
 8002856:	f7ff fdf2 	bl	800243e <_ZN3pinC1EP12GPIO_TypeDeft>
 800285a:	3408      	adds	r4, #8
 800285c:	4b38      	ldr	r3, [pc, #224]	; (8002940 <_Z3runv+0x1e8>)
 800285e:	2210      	movs	r2, #16
 8002860:	0019      	movs	r1, r3
 8002862:	0020      	movs	r0, r4
 8002864:	f7ff fdeb 	bl	800243e <_ZN3pinC1EP12GPIO_TypeDeft>
 8002868:	3408      	adds	r4, #8
 800286a:	4b35      	ldr	r3, [pc, #212]	; (8002940 <_Z3runv+0x1e8>)
 800286c:	2208      	movs	r2, #8
 800286e:	0019      	movs	r1, r3
 8002870:	0020      	movs	r0, r4
 8002872:	f7ff fde4 	bl	800243e <_ZN3pinC1EP12GPIO_TypeDeft>
 8002876:	3408      	adds	r4, #8
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	021a      	lsls	r2, r3, #8
 800287c:	2390      	movs	r3, #144	; 0x90
 800287e:	05db      	lsls	r3, r3, #23
 8002880:	0019      	movs	r1, r3
 8002882:	0020      	movs	r0, r4
 8002884:	f7ff fddb 	bl	800243e <_ZN3pinC1EP12GPIO_TypeDeft>
 8002888:	0020      	movs	r0, r4
 800288a:	3008      	adds	r0, #8
 800288c:	2380      	movs	r3, #128	; 0x80
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	2390      	movs	r3, #144	; 0x90
 8002892:	05db      	lsls	r3, r3, #23
 8002894:	0019      	movs	r1, r3
 8002896:	f7ff fdd2 	bl	800243e <_ZN3pinC1EP12GPIO_TypeDeft>

	//Have to set what Pin the CS is connected to.
	LIS3DH accellerometer(pin(GPIOA, GPIO_PIN_4));
 800289a:	2390      	movs	r3, #144	; 0x90
 800289c:	05d9      	lsls	r1, r3, #23
 800289e:	24ac      	movs	r4, #172	; 0xac
 80028a0:	193b      	adds	r3, r7, r4
 80028a2:	2210      	movs	r2, #16
 80028a4:	0018      	movs	r0, r3
 80028a6:	f7ff fdca 	bl	800243e <_ZN3pinC1EP12GPIO_TypeDeft>
 80028aa:	193b      	adds	r3, r7, r4
 80028ac:	1d38      	adds	r0, r7, #4
 80028ae:	6819      	ldr	r1, [r3, #0]
 80028b0:	685a      	ldr	r2, [r3, #4]
 80028b2:	f7ff fdfb 	bl	80024ac <_ZN6LIS3DHC1E3pin>

	uint8_t lastLed=0;
 80028b6:	23bf      	movs	r3, #191	; 0xbf
 80028b8:	18fb      	adds	r3, r7, r3
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]

	for(;;){

		auto x = accellerometer.getX();
 80028be:	25be      	movs	r5, #190	; 0xbe
 80028c0:	197c      	adds	r4, r7, r5
 80028c2:	1d3b      	adds	r3, r7, #4
 80028c4:	0018      	movs	r0, r3
 80028c6:	f7ff fe1f 	bl	8002508 <_ZN6LIS3DH4getXEv>
 80028ca:	0003      	movs	r3, r0
 80028cc:	7023      	strb	r3, [r4, #0]
		auto y = accellerometer.getY();
 80028ce:	26bd      	movs	r6, #189	; 0xbd
 80028d0:	19bc      	adds	r4, r7, r6
 80028d2:	1d3b      	adds	r3, r7, #4
 80028d4:	0018      	movs	r0, r3
 80028d6:	f7ff fe26 	bl	8002526 <_ZN6LIS3DH4getYEv>
 80028da:	0003      	movs	r3, r0
 80028dc:	7023      	strb	r3, [r4, #0]
//		auto z = accellerometer.getZ(); //I dont use z-axis so I dont need it

		auto angle = calculateAngle(x,y);
 80028de:	19bb      	adds	r3, r7, r6
 80028e0:	2200      	movs	r2, #0
 80028e2:	569a      	ldrsb	r2, [r3, r2]
 80028e4:	197b      	adds	r3, r7, r5
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	b25b      	sxtb	r3, r3
 80028ea:	0011      	movs	r1, r2
 80028ec:	0018      	movs	r0, r3
 80028ee:	f7ff fec3 	bl	8002678 <_Z14calculateAngleaa>
 80028f2:	1c03      	adds	r3, r0, #0
 80028f4:	22b8      	movs	r2, #184	; 0xb8
 80028f6:	18b9      	adds	r1, r7, r2
 80028f8:	600b      	str	r3, [r1, #0]
		auto currLed = angleToLed(angle);
 80028fa:	25b7      	movs	r5, #183	; 0xb7
 80028fc:	197c      	adds	r4, r7, r5
 80028fe:	18bb      	adds	r3, r7, r2
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	1c18      	adds	r0, r3, #0
 8002904:	f7ff ff02 	bl	800270c <_Z10angleToLedf>
 8002908:	0003      	movs	r3, r0
 800290a:	7023      	strb	r3, [r4, #0]

		// Set the LED pointing down on and turn last one off.
		LEDS[lastLed].setLow();
 800290c:	24bf      	movs	r4, #191	; 0xbf
 800290e:	193b      	adds	r3, r7, r4
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	260c      	movs	r6, #12
 8002914:	19ba      	adds	r2, r7, r6
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	18d3      	adds	r3, r2, r3
 800291a:	0018      	movs	r0, r3
 800291c:	f7ff fda6 	bl	800246c <_ZN3pin6setLowEv>
		LEDS[currLed].setHigh();
 8002920:	197b      	adds	r3, r7, r5
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	19ba      	adds	r2, r7, r6
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	18d3      	adds	r3, r2, r3
 800292a:	0018      	movs	r0, r3
 800292c:	f7ff fdae 	bl	800248c <_ZN3pin7setHighEv>
		lastLed = currLed;
 8002930:	193b      	adds	r3, r7, r4
 8002932:	197a      	adds	r2, r7, r5
 8002934:	7812      	ldrb	r2, [r2, #0]
 8002936:	701a      	strb	r2, [r3, #0]

		osDelay(100);
 8002938:	2064      	movs	r0, #100	; 0x64
 800293a:	f003 fa5b 	bl	8005df4 <osDelay>
	}
 800293e:	e7be      	b.n	80028be <_Z3runv+0x166>
 8002940:	48000400 	.word	0x48000400
 8002944:	48000800 	.word	0x48000800

08002948 <_ZNSt5arrayIhLj2EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	0018      	movs	r0, r3
 8002954:	f000 f805 	bl	8002962 <_ZNSt14__array_traitsIhLj2EE6_S_ptrERA2_Kh>
 8002958:	0003      	movs	r3, r0
 800295a:	0018      	movs	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	b002      	add	sp, #8
 8002960:	bd80      	pop	{r7, pc}

08002962 <_ZNSt14__array_traitsIhLj2EE6_S_ptrERA2_Kh>:
      _S_ptr(const _Type& __t) noexcept
 8002962:	b580      	push	{r7, lr}
 8002964:	b082      	sub	sp, #8
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	0018      	movs	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	b002      	add	sp, #8
 8002972:	bd80      	pop	{r7, pc}

08002974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297a:	4b0f      	ldr	r3, [pc, #60]	; (80029b8 <HAL_MspInit+0x44>)
 800297c:	699a      	ldr	r2, [r3, #24]
 800297e:	4b0e      	ldr	r3, [pc, #56]	; (80029b8 <HAL_MspInit+0x44>)
 8002980:	2101      	movs	r1, #1
 8002982:	430a      	orrs	r2, r1
 8002984:	619a      	str	r2, [r3, #24]
 8002986:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <HAL_MspInit+0x44>)
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2201      	movs	r2, #1
 800298c:	4013      	ands	r3, r2
 800298e:	607b      	str	r3, [r7, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <HAL_MspInit+0x44>)
 8002994:	69da      	ldr	r2, [r3, #28]
 8002996:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <HAL_MspInit+0x44>)
 8002998:	2180      	movs	r1, #128	; 0x80
 800299a:	0549      	lsls	r1, r1, #21
 800299c:	430a      	orrs	r2, r1
 800299e:	61da      	str	r2, [r3, #28]
 80029a0:	4b05      	ldr	r3, [pc, #20]	; (80029b8 <HAL_MspInit+0x44>)
 80029a2:	69da      	ldr	r2, [r3, #28]
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	055b      	lsls	r3, r3, #21
 80029a8:	4013      	ands	r3, r2
 80029aa:	603b      	str	r3, [r7, #0]
 80029ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	46bd      	mov	sp, r7
 80029b2:	b002      	add	sp, #8
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	46c0      	nop			; (mov r8, r8)
 80029b8:	40021000 	.word	0x40021000

080029bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08a      	sub	sp, #40	; 0x28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c4:	2314      	movs	r3, #20
 80029c6:	18fb      	adds	r3, r7, r3
 80029c8:	0018      	movs	r0, r3
 80029ca:	2314      	movs	r3, #20
 80029cc:	001a      	movs	r2, r3
 80029ce:	2100      	movs	r1, #0
 80029d0:	f004 fc48 	bl	8007264 <memset>
  if(hadc->Instance==ADC1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a19      	ldr	r2, [pc, #100]	; (8002a40 <HAL_ADC_MspInit+0x84>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d12c      	bne.n	8002a38 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029de:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <HAL_ADC_MspInit+0x88>)
 80029e0:	699a      	ldr	r2, [r3, #24]
 80029e2:	4b18      	ldr	r3, [pc, #96]	; (8002a44 <HAL_ADC_MspInit+0x88>)
 80029e4:	2180      	movs	r1, #128	; 0x80
 80029e6:	0089      	lsls	r1, r1, #2
 80029e8:	430a      	orrs	r2, r1
 80029ea:	619a      	str	r2, [r3, #24]
 80029ec:	4b15      	ldr	r3, [pc, #84]	; (8002a44 <HAL_ADC_MspInit+0x88>)
 80029ee:	699a      	ldr	r2, [r3, #24]
 80029f0:	2380      	movs	r3, #128	; 0x80
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	4013      	ands	r3, r2
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fa:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <HAL_ADC_MspInit+0x88>)
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <HAL_ADC_MspInit+0x88>)
 8002a00:	2180      	movs	r1, #128	; 0x80
 8002a02:	0289      	lsls	r1, r1, #10
 8002a04:	430a      	orrs	r2, r1
 8002a06:	615a      	str	r2, [r3, #20]
 8002a08:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <HAL_ADC_MspInit+0x88>)
 8002a0a:	695a      	ldr	r2, [r3, #20]
 8002a0c:	2380      	movs	r3, #128	; 0x80
 8002a0e:	029b      	lsls	r3, r3, #10
 8002a10:	4013      	ands	r3, r2
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a16:	2114      	movs	r1, #20
 8002a18:	187b      	adds	r3, r7, r1
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a1e:	187b      	adds	r3, r7, r1
 8002a20:	2203      	movs	r2, #3
 8002a22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a24:	187b      	adds	r3, r7, r1
 8002a26:	2200      	movs	r2, #0
 8002a28:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a2a:	187a      	adds	r2, r7, r1
 8002a2c:	2390      	movs	r3, #144	; 0x90
 8002a2e:	05db      	lsls	r3, r3, #23
 8002a30:	0011      	movs	r1, r2
 8002a32:	0018      	movs	r0, r3
 8002a34:	f000 fcc8 	bl	80033c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a38:	46c0      	nop			; (mov r8, r8)
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	b00a      	add	sp, #40	; 0x28
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	40012400 	.word	0x40012400
 8002a44:	40021000 	.word	0x40021000

08002a48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b08a      	sub	sp, #40	; 0x28
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a50:	2314      	movs	r3, #20
 8002a52:	18fb      	adds	r3, r7, r3
 8002a54:	0018      	movs	r0, r3
 8002a56:	2314      	movs	r3, #20
 8002a58:	001a      	movs	r2, r3
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	f004 fc02 	bl	8007264 <memset>
  if(hi2c->Instance==I2C1)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a1c      	ldr	r2, [pc, #112]	; (8002ad8 <HAL_I2C_MspInit+0x90>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d131      	bne.n	8002ace <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a6a:	4b1c      	ldr	r3, [pc, #112]	; (8002adc <HAL_I2C_MspInit+0x94>)
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	4b1b      	ldr	r3, [pc, #108]	; (8002adc <HAL_I2C_MspInit+0x94>)
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	02c9      	lsls	r1, r1, #11
 8002a74:	430a      	orrs	r2, r1
 8002a76:	615a      	str	r2, [r3, #20]
 8002a78:	4b18      	ldr	r3, [pc, #96]	; (8002adc <HAL_I2C_MspInit+0x94>)
 8002a7a:	695a      	ldr	r2, [r3, #20]
 8002a7c:	2380      	movs	r3, #128	; 0x80
 8002a7e:	02db      	lsls	r3, r3, #11
 8002a80:	4013      	ands	r3, r2
 8002a82:	613b      	str	r3, [r7, #16]
 8002a84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a86:	2114      	movs	r1, #20
 8002a88:	187b      	adds	r3, r7, r1
 8002a8a:	22c0      	movs	r2, #192	; 0xc0
 8002a8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a8e:	187b      	adds	r3, r7, r1
 8002a90:	2212      	movs	r2, #18
 8002a92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a94:	187b      	adds	r3, r7, r1
 8002a96:	2201      	movs	r2, #1
 8002a98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a9a:	187b      	adds	r3, r7, r1
 8002a9c:	2203      	movs	r2, #3
 8002a9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002aa0:	187b      	adds	r3, r7, r1
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aa6:	187b      	adds	r3, r7, r1
 8002aa8:	4a0d      	ldr	r2, [pc, #52]	; (8002ae0 <HAL_I2C_MspInit+0x98>)
 8002aaa:	0019      	movs	r1, r3
 8002aac:	0010      	movs	r0, r2
 8002aae:	f000 fc8b 	bl	80033c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ab2:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <HAL_I2C_MspInit+0x94>)
 8002ab4:	69da      	ldr	r2, [r3, #28]
 8002ab6:	4b09      	ldr	r3, [pc, #36]	; (8002adc <HAL_I2C_MspInit+0x94>)
 8002ab8:	2180      	movs	r1, #128	; 0x80
 8002aba:	0389      	lsls	r1, r1, #14
 8002abc:	430a      	orrs	r2, r1
 8002abe:	61da      	str	r2, [r3, #28]
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_I2C_MspInit+0x94>)
 8002ac2:	69da      	ldr	r2, [r3, #28]
 8002ac4:	2380      	movs	r3, #128	; 0x80
 8002ac6:	039b      	lsls	r3, r3, #14
 8002ac8:	4013      	ands	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b00a      	add	sp, #40	; 0x28
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	40005400 	.word	0x40005400
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	48000400 	.word	0x48000400

08002ae4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b08a      	sub	sp, #40	; 0x28
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aec:	2314      	movs	r3, #20
 8002aee:	18fb      	adds	r3, r7, r3
 8002af0:	0018      	movs	r0, r3
 8002af2:	2314      	movs	r3, #20
 8002af4:	001a      	movs	r2, r3
 8002af6:	2100      	movs	r1, #0
 8002af8:	f004 fbb4 	bl	8007264 <memset>
  if(hspi->Instance==SPI1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a1c      	ldr	r2, [pc, #112]	; (8002b74 <HAL_SPI_MspInit+0x90>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d132      	bne.n	8002b6c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b06:	4b1c      	ldr	r3, [pc, #112]	; (8002b78 <HAL_SPI_MspInit+0x94>)
 8002b08:	699a      	ldr	r2, [r3, #24]
 8002b0a:	4b1b      	ldr	r3, [pc, #108]	; (8002b78 <HAL_SPI_MspInit+0x94>)
 8002b0c:	2180      	movs	r1, #128	; 0x80
 8002b0e:	0149      	lsls	r1, r1, #5
 8002b10:	430a      	orrs	r2, r1
 8002b12:	619a      	str	r2, [r3, #24]
 8002b14:	4b18      	ldr	r3, [pc, #96]	; (8002b78 <HAL_SPI_MspInit+0x94>)
 8002b16:	699a      	ldr	r2, [r3, #24]
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	015b      	lsls	r3, r3, #5
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b22:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <HAL_SPI_MspInit+0x94>)
 8002b24:	695a      	ldr	r2, [r3, #20]
 8002b26:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <HAL_SPI_MspInit+0x94>)
 8002b28:	2180      	movs	r1, #128	; 0x80
 8002b2a:	0289      	lsls	r1, r1, #10
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	615a      	str	r2, [r3, #20]
 8002b30:	4b11      	ldr	r3, [pc, #68]	; (8002b78 <HAL_SPI_MspInit+0x94>)
 8002b32:	695a      	ldr	r2, [r3, #20]
 8002b34:	2380      	movs	r3, #128	; 0x80
 8002b36:	029b      	lsls	r3, r3, #10
 8002b38:	4013      	ands	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002b3e:	2114      	movs	r1, #20
 8002b40:	187b      	adds	r3, r7, r1
 8002b42:	22e0      	movs	r2, #224	; 0xe0
 8002b44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b46:	187b      	adds	r3, r7, r1
 8002b48:	2202      	movs	r2, #2
 8002b4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4c:	187b      	adds	r3, r7, r1
 8002b4e:	2200      	movs	r2, #0
 8002b50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b52:	187b      	adds	r3, r7, r1
 8002b54:	2203      	movs	r2, #3
 8002b56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002b58:	187b      	adds	r3, r7, r1
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5e:	187a      	adds	r2, r7, r1
 8002b60:	2390      	movs	r3, #144	; 0x90
 8002b62:	05db      	lsls	r3, r3, #23
 8002b64:	0011      	movs	r1, r2
 8002b66:	0018      	movs	r0, r3
 8002b68:	f000 fc2e 	bl	80033c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002b6c:	46c0      	nop			; (mov r8, r8)
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	b00a      	add	sp, #40	; 0x28
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	40013000 	.word	0x40013000
 8002b78:	40021000 	.word	0x40021000

08002b7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b08a      	sub	sp, #40	; 0x28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b84:	2314      	movs	r3, #20
 8002b86:	18fb      	adds	r3, r7, r3
 8002b88:	0018      	movs	r0, r3
 8002b8a:	2314      	movs	r3, #20
 8002b8c:	001a      	movs	r2, r3
 8002b8e:	2100      	movs	r1, #0
 8002b90:	f004 fb68 	bl	8007264 <memset>
  if(huart->Instance==USART1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a1d      	ldr	r2, [pc, #116]	; (8002c10 <HAL_UART_MspInit+0x94>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d133      	bne.n	8002c06 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b9e:	4b1d      	ldr	r3, [pc, #116]	; (8002c14 <HAL_UART_MspInit+0x98>)
 8002ba0:	699a      	ldr	r2, [r3, #24]
 8002ba2:	4b1c      	ldr	r3, [pc, #112]	; (8002c14 <HAL_UART_MspInit+0x98>)
 8002ba4:	2180      	movs	r1, #128	; 0x80
 8002ba6:	01c9      	lsls	r1, r1, #7
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	619a      	str	r2, [r3, #24]
 8002bac:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <HAL_UART_MspInit+0x98>)
 8002bae:	699a      	ldr	r2, [r3, #24]
 8002bb0:	2380      	movs	r3, #128	; 0x80
 8002bb2:	01db      	lsls	r3, r3, #7
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
 8002bb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bba:	4b16      	ldr	r3, [pc, #88]	; (8002c14 <HAL_UART_MspInit+0x98>)
 8002bbc:	695a      	ldr	r2, [r3, #20]
 8002bbe:	4b15      	ldr	r3, [pc, #84]	; (8002c14 <HAL_UART_MspInit+0x98>)
 8002bc0:	2180      	movs	r1, #128	; 0x80
 8002bc2:	0289      	lsls	r1, r1, #10
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	615a      	str	r2, [r3, #20]
 8002bc8:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <HAL_UART_MspInit+0x98>)
 8002bca:	695a      	ldr	r2, [r3, #20]
 8002bcc:	2380      	movs	r3, #128	; 0x80
 8002bce:	029b      	lsls	r3, r3, #10
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002bd6:	2114      	movs	r1, #20
 8002bd8:	187b      	adds	r3, r7, r1
 8002bda:	22c0      	movs	r2, #192	; 0xc0
 8002bdc:	00d2      	lsls	r2, r2, #3
 8002bde:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be0:	187b      	adds	r3, r7, r1
 8002be2:	2202      	movs	r2, #2
 8002be4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be6:	187b      	adds	r3, r7, r1
 8002be8:	2200      	movs	r2, #0
 8002bea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002bec:	187b      	adds	r3, r7, r1
 8002bee:	2203      	movs	r2, #3
 8002bf0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002bf2:	187b      	adds	r3, r7, r1
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf8:	187a      	adds	r2, r7, r1
 8002bfa:	2390      	movs	r3, #144	; 0x90
 8002bfc:	05db      	lsls	r3, r3, #23
 8002bfe:	0011      	movs	r1, r2
 8002c00:	0018      	movs	r0, r3
 8002c02:	f000 fbe1 	bl	80033c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	b00a      	add	sp, #40	; 0x28
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	40013800 	.word	0x40013800
 8002c14:	40021000 	.word	0x40021000

08002c18 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	; 0x28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002c20:	2300      	movs	r3, #0
 8002c22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8002c24:	2300      	movs	r3, #0
 8002c26:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	200d      	movs	r0, #13
 8002c30:	f000 fba4 	bl	800337c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8002c34:	200d      	movs	r0, #13
 8002c36:	f000 fbb6 	bl	80033a6 <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002c3a:	4b21      	ldr	r3, [pc, #132]	; (8002cc0 <HAL_InitTick+0xa8>)
 8002c3c:	699a      	ldr	r2, [r3, #24]
 8002c3e:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <HAL_InitTick+0xa8>)
 8002c40:	2180      	movs	r1, #128	; 0x80
 8002c42:	0109      	lsls	r1, r1, #4
 8002c44:	430a      	orrs	r2, r1
 8002c46:	619a      	str	r2, [r3, #24]
 8002c48:	4b1d      	ldr	r3, [pc, #116]	; (8002cc0 <HAL_InitTick+0xa8>)
 8002c4a:	699a      	ldr	r2, [r3, #24]
 8002c4c:	2380      	movs	r3, #128	; 0x80
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	4013      	ands	r3, r2
 8002c52:	60bb      	str	r3, [r7, #8]
 8002c54:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c56:	230c      	movs	r3, #12
 8002c58:	18fa      	adds	r2, r7, r3
 8002c5a:	2310      	movs	r3, #16
 8002c5c:	18fb      	adds	r3, r7, r3
 8002c5e:	0011      	movs	r1, r2
 8002c60:	0018      	movs	r0, r3
 8002c62:	f001 fadb 	bl	800421c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002c66:	f001 fac3 	bl	80041f0 <HAL_RCC_GetPCLK1Freq>
 8002c6a:	0003      	movs	r3, r0
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c70:	4914      	ldr	r1, [pc, #80]	; (8002cc4 <HAL_InitTick+0xac>)
 8002c72:	0018      	movs	r0, r3
 8002c74:	f7fd fa48 	bl	8000108 <__udivsi3>
 8002c78:	0003      	movs	r3, r0
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002c7e:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <HAL_InitTick+0xb0>)
 8002c80:	4a12      	ldr	r2, [pc, #72]	; (8002ccc <HAL_InitTick+0xb4>)
 8002c82:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8002c84:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <HAL_InitTick+0xb0>)
 8002c86:	4a12      	ldr	r2, [pc, #72]	; (8002cd0 <HAL_InitTick+0xb8>)
 8002c88:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002c8a:	4b0f      	ldr	r3, [pc, #60]	; (8002cc8 <HAL_InitTick+0xb0>)
 8002c8c:	6a3a      	ldr	r2, [r7, #32]
 8002c8e:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8002c90:	4b0d      	ldr	r3, [pc, #52]	; (8002cc8 <HAL_InitTick+0xb0>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c96:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <HAL_InitTick+0xb0>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002c9c:	4b0a      	ldr	r3, [pc, #40]	; (8002cc8 <HAL_InitTick+0xb0>)
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	f002 fad6 	bl	8005250 <HAL_TIM_Base_Init>
 8002ca4:	1e03      	subs	r3, r0, #0
 8002ca6:	d105      	bne.n	8002cb4 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002ca8:	4b07      	ldr	r3, [pc, #28]	; (8002cc8 <HAL_InitTick+0xb0>)
 8002caa:	0018      	movs	r0, r3
 8002cac:	f002 fb04 	bl	80052b8 <HAL_TIM_Base_Start_IT>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	e000      	b.n	8002cb6 <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
}
 8002cb6:	0018      	movs	r0, r3
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	b00a      	add	sp, #40	; 0x28
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	46c0      	nop			; (mov r8, r8)
 8002cc0:	40021000 	.word	0x40021000
 8002cc4:	000f4240 	.word	0x000f4240
 8002cc8:	20001138 	.word	0x20001138
 8002ccc:	40012c00 	.word	0x40012c00
 8002cd0:	000003e7 	.word	0x000003e7

08002cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002cd8:	46c0      	nop			; (mov r8, r8)
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ce2:	e7fe      	b.n	8002ce2 <HardFault_Handler+0x4>

08002ce4 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002ce8:	4b03      	ldr	r3, [pc, #12]	; (8002cf8 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8002cea:	0018      	movs	r0, r3
 8002cec:	f002 fb06 	bl	80052fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002cf0:	46c0      	nop			; (mov r8, r8)
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	20001138 	.word	0x20001138

08002cfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002d00:	46c0      	nop			; (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d08:	480d      	ldr	r0, [pc, #52]	; (8002d40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d0a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d0c:	480d      	ldr	r0, [pc, #52]	; (8002d44 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d0e:	490e      	ldr	r1, [pc, #56]	; (8002d48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d10:	4a0e      	ldr	r2, [pc, #56]	; (8002d4c <LoopForever+0xe>)
  movs r3, #0
 8002d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d14:	e002      	b.n	8002d1c <LoopCopyDataInit>

08002d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d1a:	3304      	adds	r3, #4

08002d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d20:	d3f9      	bcc.n	8002d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d22:	4a0b      	ldr	r2, [pc, #44]	; (8002d50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d24:	4c0b      	ldr	r4, [pc, #44]	; (8002d54 <LoopForever+0x16>)
  movs r3, #0
 8002d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d28:	e001      	b.n	8002d2e <LoopFillZerobss>

08002d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d2c:	3204      	adds	r2, #4

08002d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d30:	d3fb      	bcc.n	8002d2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d32:	f7ff ffe3 	bl	8002cfc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002d36:	f004 fa71 	bl	800721c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d3a:	f7ff f8bf 	bl	8001ebc <main>

08002d3e <LoopForever>:

LoopForever:
    b LoopForever
 8002d3e:	e7fe      	b.n	8002d3e <LoopForever>
  ldr   r0, =_estack
 8002d40:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002d4c:	0800744c 	.word	0x0800744c
  ldr r2, =_sbss
 8002d50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002d54:	2000117c 	.word	0x2000117c

08002d58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d58:	e7fe      	b.n	8002d58 <ADC1_IRQHandler>
	...

08002d5c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d60:	4b07      	ldr	r3, [pc, #28]	; (8002d80 <HAL_Init+0x24>)
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_Init+0x24>)
 8002d66:	2110      	movs	r1, #16
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	f7ff ff53 	bl	8002c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d72:	f7ff fdff 	bl	8002974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	0018      	movs	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	40022000 	.word	0x40022000

08002d84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <HAL_IncTick+0x1c>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	001a      	movs	r2, r3
 8002d8e:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_IncTick+0x20>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	18d2      	adds	r2, r2, r3
 8002d94:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <HAL_IncTick+0x20>)
 8002d96:	601a      	str	r2, [r3, #0]
}
 8002d98:	46c0      	nop			; (mov r8, r8)
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	20000004 	.word	0x20000004
 8002da4:	20001178 	.word	0x20001178

08002da8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  return uwTick;
 8002dac:	4b02      	ldr	r3, [pc, #8]	; (8002db8 <HAL_GetTick+0x10>)
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	0018      	movs	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	20001178 	.word	0x20001178

08002dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dc4:	f7ff fff0 	bl	8002da8 <HAL_GetTick>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	d005      	beq.n	8002de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dd6:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <HAL_Delay+0x40>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	001a      	movs	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	189b      	adds	r3, r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	f7ff ffe0 	bl	8002da8 <HAL_GetTick>
 8002de8:	0002      	movs	r2, r0
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d8f7      	bhi.n	8002de4 <HAL_Delay+0x28>
  {
  }
}
 8002df4:	46c0      	nop			; (mov r8, r8)
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b004      	add	sp, #16
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	20000004 	.word	0x20000004

08002e00 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e08:	230f      	movs	r3, #15
 8002e0a:	18fb      	adds	r3, r7, r3
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e125      	b.n	800306a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10a      	bne.n	8002e3c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2234      	movs	r2, #52	; 0x34
 8002e30:	2100      	movs	r1, #0
 8002e32:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	0018      	movs	r0, r3
 8002e38:	f7ff fdc0 	bl	80029bc <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	2210      	movs	r2, #16
 8002e42:	4013      	ands	r3, r2
 8002e44:	d000      	beq.n	8002e48 <HAL_ADC_Init+0x48>
 8002e46:	e103      	b.n	8003050 <HAL_ADC_Init+0x250>
 8002e48:	230f      	movs	r3, #15
 8002e4a:	18fb      	adds	r3, r7, r3
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d000      	beq.n	8002e54 <HAL_ADC_Init+0x54>
 8002e52:	e0fd      	b.n	8003050 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2204      	movs	r2, #4
 8002e5c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002e5e:	d000      	beq.n	8002e62 <HAL_ADC_Init+0x62>
 8002e60:	e0f6      	b.n	8003050 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e66:	4a83      	ldr	r2, [pc, #524]	; (8003074 <HAL_ADC_Init+0x274>)
 8002e68:	4013      	ands	r3, r2
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	431a      	orrs	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	2203      	movs	r2, #3
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d112      	bne.n	8002ea6 <HAL_ADC_Init+0xa6>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2201      	movs	r2, #1
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d009      	beq.n	8002ea2 <HAL_ADC_Init+0xa2>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68da      	ldr	r2, [r3, #12]
 8002e94:	2380      	movs	r3, #128	; 0x80
 8002e96:	021b      	lsls	r3, r3, #8
 8002e98:	401a      	ands	r2, r3
 8002e9a:	2380      	movs	r3, #128	; 0x80
 8002e9c:	021b      	lsls	r3, r3, #8
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d101      	bne.n	8002ea6 <HAL_ADC_Init+0xa6>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <HAL_ADC_Init+0xa8>
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d116      	bne.n	8002eda <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	2218      	movs	r2, #24
 8002eb4:	4393      	bics	r3, r2
 8002eb6:	0019      	movs	r1, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	689a      	ldr	r2, [r3, #8]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	0899      	lsrs	r1, r3, #2
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	68da      	ldr	r2, [r3, #12]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4964      	ldr	r1, [pc, #400]	; (8003078 <HAL_ADC_Init+0x278>)
 8002ee6:	400a      	ands	r2, r1
 8002ee8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	7e1b      	ldrb	r3, [r3, #24]
 8002eee:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	7e5b      	ldrb	r3, [r3, #25]
 8002ef4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ef6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	7e9b      	ldrb	r3, [r3, #26]
 8002efc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002efe:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d002      	beq.n	8002f0e <HAL_ADC_Init+0x10e>
 8002f08:	2380      	movs	r3, #128	; 0x80
 8002f0a:	015b      	lsls	r3, r3, #5
 8002f0c:	e000      	b.n	8002f10 <HAL_ADC_Init+0x110>
 8002f0e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002f10:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002f16:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d101      	bne.n	8002f24 <HAL_ADC_Init+0x124>
 8002f20:	2304      	movs	r3, #4
 8002f22:	e000      	b.n	8002f26 <HAL_ADC_Init+0x126>
 8002f24:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002f26:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2124      	movs	r1, #36	; 0x24
 8002f2c:	5c5b      	ldrb	r3, [r3, r1]
 8002f2e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002f30:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f32:	68ba      	ldr	r2, [r7, #8]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	7edb      	ldrb	r3, [r3, #27]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d115      	bne.n	8002f6c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	7e9b      	ldrb	r3, [r3, #26]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d105      	bne.n	8002f54 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	2280      	movs	r2, #128	; 0x80
 8002f4c:	0252      	lsls	r2, r2, #9
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	e00b      	b.n	8002f6c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f58:	2220      	movs	r2, #32
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f64:	2201      	movs	r2, #1
 8002f66:	431a      	orrs	r2, r3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	69da      	ldr	r2, [r3, #28]
 8002f70:	23c2      	movs	r3, #194	; 0xc2
 8002f72:	33ff      	adds	r3, #255	; 0xff
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d007      	beq.n	8002f88 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002f80:	4313      	orrs	r3, r2
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68d9      	ldr	r1, [r3, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	430a      	orrs	r2, r1
 8002f96:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	055b      	lsls	r3, r3, #21
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d01b      	beq.n	8002fdc <HAL_ADC_Init+0x1dc>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d017      	beq.n	8002fdc <HAL_ADC_Init+0x1dc>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d013      	beq.n	8002fdc <HAL_ADC_Init+0x1dc>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d00f      	beq.n	8002fdc <HAL_ADC_Init+0x1dc>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d00b      	beq.n	8002fdc <HAL_ADC_Init+0x1dc>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc8:	2b05      	cmp	r3, #5
 8002fca:	d007      	beq.n	8002fdc <HAL_ADC_Init+0x1dc>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd0:	2b06      	cmp	r3, #6
 8002fd2:	d003      	beq.n	8002fdc <HAL_ADC_Init+0x1dc>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd8:	2b07      	cmp	r3, #7
 8002fda:	d112      	bne.n	8003002 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2107      	movs	r1, #7
 8002fe8:	438a      	bics	r2, r1
 8002fea:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6959      	ldr	r1, [r3, #20]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff6:	2207      	movs	r2, #7
 8002ff8:	401a      	ands	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	4a1c      	ldr	r2, [pc, #112]	; (800307c <HAL_ADC_Init+0x27c>)
 800300a:	4013      	ands	r3, r2
 800300c:	68ba      	ldr	r2, [r7, #8]
 800300e:	429a      	cmp	r2, r3
 8003010:	d10b      	bne.n	800302a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2200      	movs	r2, #0
 8003016:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800301c:	2203      	movs	r2, #3
 800301e:	4393      	bics	r3, r2
 8003020:	2201      	movs	r2, #1
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8003028:	e01c      	b.n	8003064 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302e:	2212      	movs	r2, #18
 8003030:	4393      	bics	r3, r2
 8003032:	2210      	movs	r2, #16
 8003034:	431a      	orrs	r2, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303e:	2201      	movs	r2, #1
 8003040:	431a      	orrs	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8003046:	230f      	movs	r3, #15
 8003048:	18fb      	adds	r3, r7, r3
 800304a:	2201      	movs	r2, #1
 800304c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800304e:	e009      	b.n	8003064 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003054:	2210      	movs	r2, #16
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 800305c:	230f      	movs	r3, #15
 800305e:	18fb      	adds	r3, r7, r3
 8003060:	2201      	movs	r2, #1
 8003062:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003064:	230f      	movs	r3, #15
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	781b      	ldrb	r3, [r3, #0]
}
 800306a:	0018      	movs	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	b004      	add	sp, #16
 8003070:	bd80      	pop	{r7, pc}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	fffffefd 	.word	0xfffffefd
 8003078:	fffe0219 	.word	0xfffe0219
 800307c:	833fffe7 	.word	0x833fffe7

08003080 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
 8003088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800308a:	230f      	movs	r3, #15
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8003092:	2300      	movs	r3, #0
 8003094:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800309a:	2380      	movs	r3, #128	; 0x80
 800309c:	055b      	lsls	r3, r3, #21
 800309e:	429a      	cmp	r2, r3
 80030a0:	d011      	beq.n	80030c6 <HAL_ADC_ConfigChannel+0x46>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d00d      	beq.n	80030c6 <HAL_ADC_ConfigChannel+0x46>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d009      	beq.n	80030c6 <HAL_ADC_ConfigChannel+0x46>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d005      	beq.n	80030c6 <HAL_ADC_ConfigChannel+0x46>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	2b04      	cmp	r3, #4
 80030c0:	d001      	beq.n	80030c6 <HAL_ADC_ConfigChannel+0x46>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2234      	movs	r2, #52	; 0x34
 80030ca:	5c9b      	ldrb	r3, [r3, r2]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d101      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x54>
 80030d0:	2302      	movs	r3, #2
 80030d2:	e0bb      	b.n	800324c <HAL_ADC_ConfigChannel+0x1cc>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2234      	movs	r2, #52	; 0x34
 80030d8:	2101      	movs	r1, #1
 80030da:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	2204      	movs	r2, #4
 80030e4:	4013      	ands	r3, r2
 80030e6:	d000      	beq.n	80030ea <HAL_ADC_ConfigChannel+0x6a>
 80030e8:	e09f      	b.n	800322a <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	4a59      	ldr	r2, [pc, #356]	; (8003254 <HAL_ADC_ConfigChannel+0x1d4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d100      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x76>
 80030f4:	e077      	b.n	80031e6 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2201      	movs	r2, #1
 8003102:	409a      	lsls	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003110:	2380      	movs	r3, #128	; 0x80
 8003112:	055b      	lsls	r3, r3, #21
 8003114:	429a      	cmp	r2, r3
 8003116:	d037      	beq.n	8003188 <HAL_ADC_ConfigChannel+0x108>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311c:	2b01      	cmp	r3, #1
 800311e:	d033      	beq.n	8003188 <HAL_ADC_ConfigChannel+0x108>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	2b02      	cmp	r3, #2
 8003126:	d02f      	beq.n	8003188 <HAL_ADC_ConfigChannel+0x108>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	2b03      	cmp	r3, #3
 800312e:	d02b      	beq.n	8003188 <HAL_ADC_ConfigChannel+0x108>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	2b04      	cmp	r3, #4
 8003136:	d027      	beq.n	8003188 <HAL_ADC_ConfigChannel+0x108>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	2b05      	cmp	r3, #5
 800313e:	d023      	beq.n	8003188 <HAL_ADC_ConfigChannel+0x108>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003144:	2b06      	cmp	r3, #6
 8003146:	d01f      	beq.n	8003188 <HAL_ADC_ConfigChannel+0x108>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	2b07      	cmp	r3, #7
 800314e:	d01b      	beq.n	8003188 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	689a      	ldr	r2, [r3, #8]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	2107      	movs	r1, #7
 800315c:	400b      	ands	r3, r1
 800315e:	429a      	cmp	r2, r3
 8003160:	d012      	beq.n	8003188 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2107      	movs	r1, #7
 800316e:	438a      	bics	r2, r1
 8003170:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6959      	ldr	r1, [r3, #20]
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	2207      	movs	r2, #7
 800317e:	401a      	ands	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b10      	cmp	r3, #16
 800318e:	d003      	beq.n	8003198 <HAL_ADC_ConfigChannel+0x118>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b11      	cmp	r3, #17
 8003196:	d152      	bne.n	800323e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003198:	4b2f      	ldr	r3, [pc, #188]	; (8003258 <HAL_ADC_ConfigChannel+0x1d8>)
 800319a:	6819      	ldr	r1, [r3, #0]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b10      	cmp	r3, #16
 80031a2:	d102      	bne.n	80031aa <HAL_ADC_ConfigChannel+0x12a>
 80031a4:	2380      	movs	r3, #128	; 0x80
 80031a6:	041b      	lsls	r3, r3, #16
 80031a8:	e001      	b.n	80031ae <HAL_ADC_ConfigChannel+0x12e>
 80031aa:	2380      	movs	r3, #128	; 0x80
 80031ac:	03db      	lsls	r3, r3, #15
 80031ae:	4a2a      	ldr	r2, [pc, #168]	; (8003258 <HAL_ADC_ConfigChannel+0x1d8>)
 80031b0:	430b      	orrs	r3, r1
 80031b2:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2b10      	cmp	r3, #16
 80031ba:	d140      	bne.n	800323e <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80031bc:	4b27      	ldr	r3, [pc, #156]	; (800325c <HAL_ADC_ConfigChannel+0x1dc>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4927      	ldr	r1, [pc, #156]	; (8003260 <HAL_ADC_ConfigChannel+0x1e0>)
 80031c2:	0018      	movs	r0, r3
 80031c4:	f7fc ffa0 	bl	8000108 <__udivsi3>
 80031c8:	0003      	movs	r3, r0
 80031ca:	001a      	movs	r2, r3
 80031cc:	0013      	movs	r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	189b      	adds	r3, r3, r2
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031d6:	e002      	b.n	80031de <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	3b01      	subs	r3, #1
 80031dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f9      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x158>
 80031e4:	e02b      	b.n	800323e <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2101      	movs	r1, #1
 80031f2:	4099      	lsls	r1, r3
 80031f4:	000b      	movs	r3, r1
 80031f6:	43d9      	mvns	r1, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	400a      	ands	r2, r1
 80031fe:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b10      	cmp	r3, #16
 8003206:	d003      	beq.n	8003210 <HAL_ADC_ConfigChannel+0x190>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2b11      	cmp	r3, #17
 800320e:	d116      	bne.n	800323e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003210:	4b11      	ldr	r3, [pc, #68]	; (8003258 <HAL_ADC_ConfigChannel+0x1d8>)
 8003212:	6819      	ldr	r1, [r3, #0]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b10      	cmp	r3, #16
 800321a:	d101      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x1a0>
 800321c:	4a11      	ldr	r2, [pc, #68]	; (8003264 <HAL_ADC_ConfigChannel+0x1e4>)
 800321e:	e000      	b.n	8003222 <HAL_ADC_ConfigChannel+0x1a2>
 8003220:	4a11      	ldr	r2, [pc, #68]	; (8003268 <HAL_ADC_ConfigChannel+0x1e8>)
 8003222:	4b0d      	ldr	r3, [pc, #52]	; (8003258 <HAL_ADC_ConfigChannel+0x1d8>)
 8003224:	400a      	ands	r2, r1
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	e009      	b.n	800323e <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322e:	2220      	movs	r2, #32
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003236:	230f      	movs	r3, #15
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	2201      	movs	r2, #1
 800323c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2234      	movs	r2, #52	; 0x34
 8003242:	2100      	movs	r1, #0
 8003244:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003246:	230f      	movs	r3, #15
 8003248:	18fb      	adds	r3, r7, r3
 800324a:	781b      	ldrb	r3, [r3, #0]
}
 800324c:	0018      	movs	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	b004      	add	sp, #16
 8003252:	bd80      	pop	{r7, pc}
 8003254:	00001001 	.word	0x00001001
 8003258:	40012708 	.word	0x40012708
 800325c:	20000000 	.word	0x20000000
 8003260:	000f4240 	.word	0x000f4240
 8003264:	ff7fffff 	.word	0xff7fffff
 8003268:	ffbfffff 	.word	0xffbfffff

0800326c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	0002      	movs	r2, r0
 8003274:	1dfb      	adds	r3, r7, #7
 8003276:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003278:	1dfb      	adds	r3, r7, #7
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b7f      	cmp	r3, #127	; 0x7f
 800327e:	d809      	bhi.n	8003294 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003280:	1dfb      	adds	r3, r7, #7
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	001a      	movs	r2, r3
 8003286:	231f      	movs	r3, #31
 8003288:	401a      	ands	r2, r3
 800328a:	4b04      	ldr	r3, [pc, #16]	; (800329c <__NVIC_EnableIRQ+0x30>)
 800328c:	2101      	movs	r1, #1
 800328e:	4091      	lsls	r1, r2
 8003290:	000a      	movs	r2, r1
 8003292:	601a      	str	r2, [r3, #0]
  }
}
 8003294:	46c0      	nop			; (mov r8, r8)
 8003296:	46bd      	mov	sp, r7
 8003298:	b002      	add	sp, #8
 800329a:	bd80      	pop	{r7, pc}
 800329c:	e000e100 	.word	0xe000e100

080032a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032a0:	b590      	push	{r4, r7, lr}
 80032a2:	b083      	sub	sp, #12
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	0002      	movs	r2, r0
 80032a8:	6039      	str	r1, [r7, #0]
 80032aa:	1dfb      	adds	r3, r7, #7
 80032ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032ae:	1dfb      	adds	r3, r7, #7
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	2b7f      	cmp	r3, #127	; 0x7f
 80032b4:	d828      	bhi.n	8003308 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032b6:	4a2f      	ldr	r2, [pc, #188]	; (8003374 <__NVIC_SetPriority+0xd4>)
 80032b8:	1dfb      	adds	r3, r7, #7
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	b25b      	sxtb	r3, r3
 80032be:	089b      	lsrs	r3, r3, #2
 80032c0:	33c0      	adds	r3, #192	; 0xc0
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	589b      	ldr	r3, [r3, r2]
 80032c6:	1dfa      	adds	r2, r7, #7
 80032c8:	7812      	ldrb	r2, [r2, #0]
 80032ca:	0011      	movs	r1, r2
 80032cc:	2203      	movs	r2, #3
 80032ce:	400a      	ands	r2, r1
 80032d0:	00d2      	lsls	r2, r2, #3
 80032d2:	21ff      	movs	r1, #255	; 0xff
 80032d4:	4091      	lsls	r1, r2
 80032d6:	000a      	movs	r2, r1
 80032d8:	43d2      	mvns	r2, r2
 80032da:	401a      	ands	r2, r3
 80032dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	019b      	lsls	r3, r3, #6
 80032e2:	22ff      	movs	r2, #255	; 0xff
 80032e4:	401a      	ands	r2, r3
 80032e6:	1dfb      	adds	r3, r7, #7
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	0018      	movs	r0, r3
 80032ec:	2303      	movs	r3, #3
 80032ee:	4003      	ands	r3, r0
 80032f0:	00db      	lsls	r3, r3, #3
 80032f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032f4:	481f      	ldr	r0, [pc, #124]	; (8003374 <__NVIC_SetPriority+0xd4>)
 80032f6:	1dfb      	adds	r3, r7, #7
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	b25b      	sxtb	r3, r3
 80032fc:	089b      	lsrs	r3, r3, #2
 80032fe:	430a      	orrs	r2, r1
 8003300:	33c0      	adds	r3, #192	; 0xc0
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003306:	e031      	b.n	800336c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003308:	4a1b      	ldr	r2, [pc, #108]	; (8003378 <__NVIC_SetPriority+0xd8>)
 800330a:	1dfb      	adds	r3, r7, #7
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	0019      	movs	r1, r3
 8003310:	230f      	movs	r3, #15
 8003312:	400b      	ands	r3, r1
 8003314:	3b08      	subs	r3, #8
 8003316:	089b      	lsrs	r3, r3, #2
 8003318:	3306      	adds	r3, #6
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	18d3      	adds	r3, r2, r3
 800331e:	3304      	adds	r3, #4
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	1dfa      	adds	r2, r7, #7
 8003324:	7812      	ldrb	r2, [r2, #0]
 8003326:	0011      	movs	r1, r2
 8003328:	2203      	movs	r2, #3
 800332a:	400a      	ands	r2, r1
 800332c:	00d2      	lsls	r2, r2, #3
 800332e:	21ff      	movs	r1, #255	; 0xff
 8003330:	4091      	lsls	r1, r2
 8003332:	000a      	movs	r2, r1
 8003334:	43d2      	mvns	r2, r2
 8003336:	401a      	ands	r2, r3
 8003338:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	019b      	lsls	r3, r3, #6
 800333e:	22ff      	movs	r2, #255	; 0xff
 8003340:	401a      	ands	r2, r3
 8003342:	1dfb      	adds	r3, r7, #7
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	0018      	movs	r0, r3
 8003348:	2303      	movs	r3, #3
 800334a:	4003      	ands	r3, r0
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003350:	4809      	ldr	r0, [pc, #36]	; (8003378 <__NVIC_SetPriority+0xd8>)
 8003352:	1dfb      	adds	r3, r7, #7
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	001c      	movs	r4, r3
 8003358:	230f      	movs	r3, #15
 800335a:	4023      	ands	r3, r4
 800335c:	3b08      	subs	r3, #8
 800335e:	089b      	lsrs	r3, r3, #2
 8003360:	430a      	orrs	r2, r1
 8003362:	3306      	adds	r3, #6
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	18c3      	adds	r3, r0, r3
 8003368:	3304      	adds	r3, #4
 800336a:	601a      	str	r2, [r3, #0]
}
 800336c:	46c0      	nop			; (mov r8, r8)
 800336e:	46bd      	mov	sp, r7
 8003370:	b003      	add	sp, #12
 8003372:	bd90      	pop	{r4, r7, pc}
 8003374:	e000e100 	.word	0xe000e100
 8003378:	e000ed00 	.word	0xe000ed00

0800337c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	607a      	str	r2, [r7, #4]
 8003386:	210f      	movs	r1, #15
 8003388:	187b      	adds	r3, r7, r1
 800338a:	1c02      	adds	r2, r0, #0
 800338c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	187b      	adds	r3, r7, r1
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	b25b      	sxtb	r3, r3
 8003396:	0011      	movs	r1, r2
 8003398:	0018      	movs	r0, r3
 800339a:	f7ff ff81 	bl	80032a0 <__NVIC_SetPriority>
}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b004      	add	sp, #16
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b082      	sub	sp, #8
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	0002      	movs	r2, r0
 80033ae:	1dfb      	adds	r3, r7, #7
 80033b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033b2:	1dfb      	adds	r3, r7, #7
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	b25b      	sxtb	r3, r3
 80033b8:	0018      	movs	r0, r3
 80033ba:	f7ff ff57 	bl	800326c <__NVIC_EnableIRQ>
}
 80033be:	46c0      	nop			; (mov r8, r8)
 80033c0:	46bd      	mov	sp, r7
 80033c2:	b002      	add	sp, #8
 80033c4:	bd80      	pop	{r7, pc}
	...

080033c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033d6:	e14f      	b.n	8003678 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2101      	movs	r1, #1
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	4091      	lsls	r1, r2
 80033e2:	000a      	movs	r2, r1
 80033e4:	4013      	ands	r3, r2
 80033e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d100      	bne.n	80033f0 <HAL_GPIO_Init+0x28>
 80033ee:	e140      	b.n	8003672 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d00b      	beq.n	8003410 <HAL_GPIO_Init+0x48>
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d007      	beq.n	8003410 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003404:	2b11      	cmp	r3, #17
 8003406:	d003      	beq.n	8003410 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2b12      	cmp	r3, #18
 800340e:	d130      	bne.n	8003472 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	2203      	movs	r2, #3
 800341c:	409a      	lsls	r2, r3
 800341e:	0013      	movs	r3, r2
 8003420:	43da      	mvns	r2, r3
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4013      	ands	r3, r2
 8003426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	005b      	lsls	r3, r3, #1
 8003430:	409a      	lsls	r2, r3
 8003432:	0013      	movs	r3, r2
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4313      	orrs	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003446:	2201      	movs	r2, #1
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	409a      	lsls	r2, r3
 800344c:	0013      	movs	r3, r2
 800344e:	43da      	mvns	r2, r3
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4013      	ands	r3, r2
 8003454:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	091b      	lsrs	r3, r3, #4
 800345c:	2201      	movs	r2, #1
 800345e:	401a      	ands	r2, r3
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	409a      	lsls	r2, r3
 8003464:	0013      	movs	r3, r2
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	2203      	movs	r2, #3
 800347e:	409a      	lsls	r2, r3
 8003480:	0013      	movs	r3, r2
 8003482:	43da      	mvns	r2, r3
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4013      	ands	r3, r2
 8003488:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	689a      	ldr	r2, [r3, #8]
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	409a      	lsls	r2, r3
 8003494:	0013      	movs	r3, r2
 8003496:	693a      	ldr	r2, [r7, #16]
 8003498:	4313      	orrs	r3, r2
 800349a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d003      	beq.n	80034b2 <HAL_GPIO_Init+0xea>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b12      	cmp	r3, #18
 80034b0:	d123      	bne.n	80034fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	08da      	lsrs	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3208      	adds	r2, #8
 80034ba:	0092      	lsls	r2, r2, #2
 80034bc:	58d3      	ldr	r3, [r2, r3]
 80034be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	2207      	movs	r2, #7
 80034c4:	4013      	ands	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	220f      	movs	r2, #15
 80034ca:	409a      	lsls	r2, r3
 80034cc:	0013      	movs	r3, r2
 80034ce:	43da      	mvns	r2, r3
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	4013      	ands	r3, r2
 80034d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	2107      	movs	r1, #7
 80034de:	400b      	ands	r3, r1
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	409a      	lsls	r2, r3
 80034e4:	0013      	movs	r3, r2
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	08da      	lsrs	r2, r3, #3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	3208      	adds	r2, #8
 80034f4:	0092      	lsls	r2, r2, #2
 80034f6:	6939      	ldr	r1, [r7, #16]
 80034f8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	005b      	lsls	r3, r3, #1
 8003504:	2203      	movs	r2, #3
 8003506:	409a      	lsls	r2, r3
 8003508:	0013      	movs	r3, r2
 800350a:	43da      	mvns	r2, r3
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	4013      	ands	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2203      	movs	r2, #3
 8003518:	401a      	ands	r2, r3
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	005b      	lsls	r3, r3, #1
 800351e:	409a      	lsls	r2, r3
 8003520:	0013      	movs	r3, r2
 8003522:	693a      	ldr	r2, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	2380      	movs	r3, #128	; 0x80
 8003534:	055b      	lsls	r3, r3, #21
 8003536:	4013      	ands	r3, r2
 8003538:	d100      	bne.n	800353c <HAL_GPIO_Init+0x174>
 800353a:	e09a      	b.n	8003672 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800353c:	4b54      	ldr	r3, [pc, #336]	; (8003690 <HAL_GPIO_Init+0x2c8>)
 800353e:	699a      	ldr	r2, [r3, #24]
 8003540:	4b53      	ldr	r3, [pc, #332]	; (8003690 <HAL_GPIO_Init+0x2c8>)
 8003542:	2101      	movs	r1, #1
 8003544:	430a      	orrs	r2, r1
 8003546:	619a      	str	r2, [r3, #24]
 8003548:	4b51      	ldr	r3, [pc, #324]	; (8003690 <HAL_GPIO_Init+0x2c8>)
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	2201      	movs	r2, #1
 800354e:	4013      	ands	r3, r2
 8003550:	60bb      	str	r3, [r7, #8]
 8003552:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003554:	4a4f      	ldr	r2, [pc, #316]	; (8003694 <HAL_GPIO_Init+0x2cc>)
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	089b      	lsrs	r3, r3, #2
 800355a:	3302      	adds	r3, #2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	589b      	ldr	r3, [r3, r2]
 8003560:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2203      	movs	r2, #3
 8003566:	4013      	ands	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	220f      	movs	r2, #15
 800356c:	409a      	lsls	r2, r3
 800356e:	0013      	movs	r3, r2
 8003570:	43da      	mvns	r2, r3
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4013      	ands	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	2390      	movs	r3, #144	; 0x90
 800357c:	05db      	lsls	r3, r3, #23
 800357e:	429a      	cmp	r2, r3
 8003580:	d013      	beq.n	80035aa <HAL_GPIO_Init+0x1e2>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a44      	ldr	r2, [pc, #272]	; (8003698 <HAL_GPIO_Init+0x2d0>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d00d      	beq.n	80035a6 <HAL_GPIO_Init+0x1de>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a43      	ldr	r2, [pc, #268]	; (800369c <HAL_GPIO_Init+0x2d4>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d007      	beq.n	80035a2 <HAL_GPIO_Init+0x1da>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a42      	ldr	r2, [pc, #264]	; (80036a0 <HAL_GPIO_Init+0x2d8>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d101      	bne.n	800359e <HAL_GPIO_Init+0x1d6>
 800359a:	2303      	movs	r3, #3
 800359c:	e006      	b.n	80035ac <HAL_GPIO_Init+0x1e4>
 800359e:	2305      	movs	r3, #5
 80035a0:	e004      	b.n	80035ac <HAL_GPIO_Init+0x1e4>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e002      	b.n	80035ac <HAL_GPIO_Init+0x1e4>
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <HAL_GPIO_Init+0x1e4>
 80035aa:	2300      	movs	r3, #0
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	2103      	movs	r1, #3
 80035b0:	400a      	ands	r2, r1
 80035b2:	0092      	lsls	r2, r2, #2
 80035b4:	4093      	lsls	r3, r2
 80035b6:	693a      	ldr	r2, [r7, #16]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80035bc:	4935      	ldr	r1, [pc, #212]	; (8003694 <HAL_GPIO_Init+0x2cc>)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	089b      	lsrs	r3, r3, #2
 80035c2:	3302      	adds	r3, #2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035ca:	4b36      	ldr	r3, [pc, #216]	; (80036a4 <HAL_GPIO_Init+0x2dc>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	43da      	mvns	r2, r3
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4013      	ands	r3, r2
 80035d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	2380      	movs	r3, #128	; 0x80
 80035e0:	025b      	lsls	r3, r3, #9
 80035e2:	4013      	ands	r3, r2
 80035e4:	d003      	beq.n	80035ee <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80035ee:	4b2d      	ldr	r3, [pc, #180]	; (80036a4 <HAL_GPIO_Init+0x2dc>)
 80035f0:	693a      	ldr	r2, [r7, #16]
 80035f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80035f4:	4b2b      	ldr	r3, [pc, #172]	; (80036a4 <HAL_GPIO_Init+0x2dc>)
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	43da      	mvns	r2, r3
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	4013      	ands	r3, r2
 8003602:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	2380      	movs	r3, #128	; 0x80
 800360a:	029b      	lsls	r3, r3, #10
 800360c:	4013      	ands	r3, r2
 800360e:	d003      	beq.n	8003618 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4313      	orrs	r3, r2
 8003616:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003618:	4b22      	ldr	r3, [pc, #136]	; (80036a4 <HAL_GPIO_Init+0x2dc>)
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800361e:	4b21      	ldr	r3, [pc, #132]	; (80036a4 <HAL_GPIO_Init+0x2dc>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	43da      	mvns	r2, r3
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4013      	ands	r3, r2
 800362c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	2380      	movs	r3, #128	; 0x80
 8003634:	035b      	lsls	r3, r3, #13
 8003636:	4013      	ands	r3, r2
 8003638:	d003      	beq.n	8003642 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800363a:	693a      	ldr	r2, [r7, #16]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003642:	4b18      	ldr	r3, [pc, #96]	; (80036a4 <HAL_GPIO_Init+0x2dc>)
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003648:	4b16      	ldr	r3, [pc, #88]	; (80036a4 <HAL_GPIO_Init+0x2dc>)
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	43da      	mvns	r2, r3
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	4013      	ands	r3, r2
 8003656:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	2380      	movs	r3, #128	; 0x80
 800365e:	039b      	lsls	r3, r3, #14
 8003660:	4013      	ands	r3, r2
 8003662:	d003      	beq.n	800366c <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003664:	693a      	ldr	r2, [r7, #16]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800366c:	4b0d      	ldr	r3, [pc, #52]	; (80036a4 <HAL_GPIO_Init+0x2dc>)
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	3301      	adds	r3, #1
 8003676:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	40da      	lsrs	r2, r3
 8003680:	1e13      	subs	r3, r2, #0
 8003682:	d000      	beq.n	8003686 <HAL_GPIO_Init+0x2be>
 8003684:	e6a8      	b.n	80033d8 <HAL_GPIO_Init+0x10>
  } 
}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	46bd      	mov	sp, r7
 800368a:	b006      	add	sp, #24
 800368c:	bd80      	pop	{r7, pc}
 800368e:	46c0      	nop			; (mov r8, r8)
 8003690:	40021000 	.word	0x40021000
 8003694:	40010000 	.word	0x40010000
 8003698:	48000400 	.word	0x48000400
 800369c:	48000800 	.word	0x48000800
 80036a0:	48000c00 	.word	0x48000c00
 80036a4:	40010400 	.word	0x40010400

080036a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	0008      	movs	r0, r1
 80036b2:	0011      	movs	r1, r2
 80036b4:	1cbb      	adds	r3, r7, #2
 80036b6:	1c02      	adds	r2, r0, #0
 80036b8:	801a      	strh	r2, [r3, #0]
 80036ba:	1c7b      	adds	r3, r7, #1
 80036bc:	1c0a      	adds	r2, r1, #0
 80036be:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036c0:	1c7b      	adds	r3, r7, #1
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d004      	beq.n	80036d2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036c8:	1cbb      	adds	r3, r7, #2
 80036ca:	881a      	ldrh	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80036d0:	e003      	b.n	80036da <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036d2:	1cbb      	adds	r3, r7, #2
 80036d4:	881a      	ldrh	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	46bd      	mov	sp, r7
 80036de:	b002      	add	sp, #8
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e082      	b.n	80037fc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2241      	movs	r2, #65	; 0x41
 80036fa:	5c9b      	ldrb	r3, [r3, r2]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d107      	bne.n	8003712 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2240      	movs	r2, #64	; 0x40
 8003706:	2100      	movs	r1, #0
 8003708:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	0018      	movs	r0, r3
 800370e:	f7ff f99b 	bl	8002a48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2241      	movs	r2, #65	; 0x41
 8003716:	2124      	movs	r1, #36	; 0x24
 8003718:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	2101      	movs	r1, #1
 8003726:	438a      	bics	r2, r1
 8003728:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4934      	ldr	r1, [pc, #208]	; (8003804 <HAL_I2C_Init+0x120>)
 8003734:	400a      	ands	r2, r1
 8003736:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	689a      	ldr	r2, [r3, #8]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4931      	ldr	r1, [pc, #196]	; (8003808 <HAL_I2C_Init+0x124>)
 8003744:	400a      	ands	r2, r1
 8003746:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d108      	bne.n	8003762 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2180      	movs	r1, #128	; 0x80
 800375a:	0209      	lsls	r1, r1, #8
 800375c:	430a      	orrs	r2, r1
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	e007      	b.n	8003772 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2184      	movs	r1, #132	; 0x84
 800376c:	0209      	lsls	r1, r1, #8
 800376e:	430a      	orrs	r2, r1
 8003770:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d104      	bne.n	8003784 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2280      	movs	r2, #128	; 0x80
 8003780:	0112      	lsls	r2, r2, #4
 8003782:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	491f      	ldr	r1, [pc, #124]	; (800380c <HAL_I2C_Init+0x128>)
 8003790:	430a      	orrs	r2, r1
 8003792:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	491a      	ldr	r1, [pc, #104]	; (8003808 <HAL_I2C_Init+0x124>)
 80037a0:	400a      	ands	r2, r1
 80037a2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	431a      	orrs	r2, r3
 80037ae:	0011      	movs	r1, r2
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	021a      	lsls	r2, r3, #8
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	69d9      	ldr	r1, [r3, #28]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1a      	ldr	r2, [r3, #32]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2101      	movs	r1, #1
 80037da:	430a      	orrs	r2, r1
 80037dc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2241      	movs	r2, #65	; 0x41
 80037e8:	2120      	movs	r1, #32
 80037ea:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2242      	movs	r2, #66	; 0x42
 80037f6:	2100      	movs	r1, #0
 80037f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	0018      	movs	r0, r3
 80037fe:	46bd      	mov	sp, r7
 8003800:	b002      	add	sp, #8
 8003802:	bd80      	pop	{r7, pc}
 8003804:	f0ffffff 	.word	0xf0ffffff
 8003808:	ffff7fff 	.word	0xffff7fff
 800380c:	02008000 	.word	0x02008000

08003810 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2241      	movs	r2, #65	; 0x41
 800381e:	5c9b      	ldrb	r3, [r3, r2]
 8003820:	b2db      	uxtb	r3, r3
 8003822:	2b20      	cmp	r3, #32
 8003824:	d138      	bne.n	8003898 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2240      	movs	r2, #64	; 0x40
 800382a:	5c9b      	ldrb	r3, [r3, r2]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d101      	bne.n	8003834 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003830:	2302      	movs	r3, #2
 8003832:	e032      	b.n	800389a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2240      	movs	r2, #64	; 0x40
 8003838:	2101      	movs	r1, #1
 800383a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2241      	movs	r2, #65	; 0x41
 8003840:	2124      	movs	r1, #36	; 0x24
 8003842:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2101      	movs	r1, #1
 8003850:	438a      	bics	r2, r1
 8003852:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4911      	ldr	r1, [pc, #68]	; (80038a4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003860:	400a      	ands	r2, r1
 8003862:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6819      	ldr	r1, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2101      	movs	r1, #1
 8003880:	430a      	orrs	r2, r1
 8003882:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2241      	movs	r2, #65	; 0x41
 8003888:	2120      	movs	r1, #32
 800388a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2240      	movs	r2, #64	; 0x40
 8003890:	2100      	movs	r1, #0
 8003892:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003894:	2300      	movs	r3, #0
 8003896:	e000      	b.n	800389a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003898:	2302      	movs	r3, #2
  }
}
 800389a:	0018      	movs	r0, r3
 800389c:	46bd      	mov	sp, r7
 800389e:	b002      	add	sp, #8
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	ffffefff 	.word	0xffffefff

080038a8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2241      	movs	r2, #65	; 0x41
 80038b6:	5c9b      	ldrb	r3, [r3, r2]
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d139      	bne.n	8003932 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2240      	movs	r2, #64	; 0x40
 80038c2:	5c9b      	ldrb	r3, [r3, r2]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d101      	bne.n	80038cc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038c8:	2302      	movs	r3, #2
 80038ca:	e033      	b.n	8003934 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2240      	movs	r2, #64	; 0x40
 80038d0:	2101      	movs	r1, #1
 80038d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2241      	movs	r2, #65	; 0x41
 80038d8:	2124      	movs	r1, #36	; 0x24
 80038da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2101      	movs	r1, #1
 80038e8:	438a      	bics	r2, r1
 80038ea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4a11      	ldr	r2, [pc, #68]	; (800393c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80038f8:	4013      	ands	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	021b      	lsls	r3, r3, #8
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	4313      	orrs	r3, r2
 8003904:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2101      	movs	r1, #1
 800391a:	430a      	orrs	r2, r1
 800391c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2241      	movs	r2, #65	; 0x41
 8003922:	2120      	movs	r1, #32
 8003924:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2240      	movs	r2, #64	; 0x40
 800392a:	2100      	movs	r1, #0
 800392c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	e000      	b.n	8003934 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003932:	2302      	movs	r3, #2
  }
}
 8003934:	0018      	movs	r0, r3
 8003936:	46bd      	mov	sp, r7
 8003938:	b004      	add	sp, #16
 800393a:	bd80      	pop	{r7, pc}
 800393c:	fffff0ff 	.word	0xfffff0ff

08003940 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e303      	b.n	8003f5a <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2201      	movs	r2, #1
 8003958:	4013      	ands	r3, r2
 800395a:	d100      	bne.n	800395e <HAL_RCC_OscConfig+0x1e>
 800395c:	e08d      	b.n	8003a7a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800395e:	4bc4      	ldr	r3, [pc, #784]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	220c      	movs	r2, #12
 8003964:	4013      	ands	r3, r2
 8003966:	2b04      	cmp	r3, #4
 8003968:	d00e      	beq.n	8003988 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800396a:	4bc1      	ldr	r3, [pc, #772]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	220c      	movs	r2, #12
 8003970:	4013      	ands	r3, r2
 8003972:	2b08      	cmp	r3, #8
 8003974:	d116      	bne.n	80039a4 <HAL_RCC_OscConfig+0x64>
 8003976:	4bbe      	ldr	r3, [pc, #760]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003978:	685a      	ldr	r2, [r3, #4]
 800397a:	2380      	movs	r3, #128	; 0x80
 800397c:	025b      	lsls	r3, r3, #9
 800397e:	401a      	ands	r2, r3
 8003980:	2380      	movs	r3, #128	; 0x80
 8003982:	025b      	lsls	r3, r3, #9
 8003984:	429a      	cmp	r2, r3
 8003986:	d10d      	bne.n	80039a4 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003988:	4bb9      	ldr	r3, [pc, #740]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	2380      	movs	r3, #128	; 0x80
 800398e:	029b      	lsls	r3, r3, #10
 8003990:	4013      	ands	r3, r2
 8003992:	d100      	bne.n	8003996 <HAL_RCC_OscConfig+0x56>
 8003994:	e070      	b.n	8003a78 <HAL_RCC_OscConfig+0x138>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d000      	beq.n	80039a0 <HAL_RCC_OscConfig+0x60>
 800399e:	e06b      	b.n	8003a78 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e2da      	b.n	8003f5a <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d107      	bne.n	80039bc <HAL_RCC_OscConfig+0x7c>
 80039ac:	4bb0      	ldr	r3, [pc, #704]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	4baf      	ldr	r3, [pc, #700]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 80039b2:	2180      	movs	r1, #128	; 0x80
 80039b4:	0249      	lsls	r1, r1, #9
 80039b6:	430a      	orrs	r2, r1
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	e02f      	b.n	8003a1c <HAL_RCC_OscConfig+0xdc>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10c      	bne.n	80039de <HAL_RCC_OscConfig+0x9e>
 80039c4:	4baa      	ldr	r3, [pc, #680]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	4ba9      	ldr	r3, [pc, #676]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 80039ca:	49aa      	ldr	r1, [pc, #680]	; (8003c74 <HAL_RCC_OscConfig+0x334>)
 80039cc:	400a      	ands	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	4ba7      	ldr	r3, [pc, #668]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	4ba6      	ldr	r3, [pc, #664]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 80039d6:	49a8      	ldr	r1, [pc, #672]	; (8003c78 <HAL_RCC_OscConfig+0x338>)
 80039d8:	400a      	ands	r2, r1
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	e01e      	b.n	8003a1c <HAL_RCC_OscConfig+0xdc>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b05      	cmp	r3, #5
 80039e4:	d10e      	bne.n	8003a04 <HAL_RCC_OscConfig+0xc4>
 80039e6:	4ba2      	ldr	r3, [pc, #648]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	4ba1      	ldr	r3, [pc, #644]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 80039ec:	2180      	movs	r1, #128	; 0x80
 80039ee:	02c9      	lsls	r1, r1, #11
 80039f0:	430a      	orrs	r2, r1
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	4b9e      	ldr	r3, [pc, #632]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	4b9d      	ldr	r3, [pc, #628]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 80039fa:	2180      	movs	r1, #128	; 0x80
 80039fc:	0249      	lsls	r1, r1, #9
 80039fe:	430a      	orrs	r2, r1
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	e00b      	b.n	8003a1c <HAL_RCC_OscConfig+0xdc>
 8003a04:	4b9a      	ldr	r3, [pc, #616]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	4b99      	ldr	r3, [pc, #612]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003a0a:	499a      	ldr	r1, [pc, #616]	; (8003c74 <HAL_RCC_OscConfig+0x334>)
 8003a0c:	400a      	ands	r2, r1
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	4b97      	ldr	r3, [pc, #604]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	4b96      	ldr	r3, [pc, #600]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003a16:	4998      	ldr	r1, [pc, #608]	; (8003c78 <HAL_RCC_OscConfig+0x338>)
 8003a18:	400a      	ands	r2, r1
 8003a1a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d014      	beq.n	8003a4e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a24:	f7ff f9c0 	bl	8002da8 <HAL_GetTick>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a2e:	f7ff f9bb 	bl	8002da8 <HAL_GetTick>
 8003a32:	0002      	movs	r2, r0
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b64      	cmp	r3, #100	; 0x64
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e28c      	b.n	8003f5a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a40:	4b8b      	ldr	r3, [pc, #556]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	2380      	movs	r3, #128	; 0x80
 8003a46:	029b      	lsls	r3, r3, #10
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCC_OscConfig+0xee>
 8003a4c:	e015      	b.n	8003a7a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a4e:	f7ff f9ab 	bl	8002da8 <HAL_GetTick>
 8003a52:	0003      	movs	r3, r0
 8003a54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a56:	e008      	b.n	8003a6a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a58:	f7ff f9a6 	bl	8002da8 <HAL_GetTick>
 8003a5c:	0002      	movs	r2, r0
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b64      	cmp	r3, #100	; 0x64
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e277      	b.n	8003f5a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a6a:	4b81      	ldr	r3, [pc, #516]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	2380      	movs	r3, #128	; 0x80
 8003a70:	029b      	lsls	r3, r3, #10
 8003a72:	4013      	ands	r3, r2
 8003a74:	d1f0      	bne.n	8003a58 <HAL_RCC_OscConfig+0x118>
 8003a76:	e000      	b.n	8003a7a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a78:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	4013      	ands	r3, r2
 8003a82:	d100      	bne.n	8003a86 <HAL_RCC_OscConfig+0x146>
 8003a84:	e069      	b.n	8003b5a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a86:	4b7a      	ldr	r3, [pc, #488]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	220c      	movs	r2, #12
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	d00b      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a90:	4b77      	ldr	r3, [pc, #476]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	220c      	movs	r2, #12
 8003a96:	4013      	ands	r3, r2
 8003a98:	2b08      	cmp	r3, #8
 8003a9a:	d11c      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x196>
 8003a9c:	4b74      	ldr	r3, [pc, #464]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	2380      	movs	r3, #128	; 0x80
 8003aa2:	025b      	lsls	r3, r3, #9
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	d116      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa8:	4b71      	ldr	r3, [pc, #452]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2202      	movs	r2, #2
 8003aae:	4013      	ands	r3, r2
 8003ab0:	d005      	beq.n	8003abe <HAL_RCC_OscConfig+0x17e>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d001      	beq.n	8003abe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e24d      	b.n	8003f5a <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003abe:	4b6c      	ldr	r3, [pc, #432]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	22f8      	movs	r2, #248	; 0xf8
 8003ac4:	4393      	bics	r3, r2
 8003ac6:	0019      	movs	r1, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	00da      	lsls	r2, r3, #3
 8003ace:	4b68      	ldr	r3, [pc, #416]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ad4:	e041      	b.n	8003b5a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d024      	beq.n	8003b28 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ade:	4b64      	ldr	r3, [pc, #400]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	4b63      	ldr	r3, [pc, #396]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003ae4:	2101      	movs	r1, #1
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aea:	f7ff f95d 	bl	8002da8 <HAL_GetTick>
 8003aee:	0003      	movs	r3, r0
 8003af0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af2:	e008      	b.n	8003b06 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003af4:	f7ff f958 	bl	8002da8 <HAL_GetTick>
 8003af8:	0002      	movs	r2, r0
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d901      	bls.n	8003b06 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e229      	b.n	8003f5a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b06:	4b5a      	ldr	r3, [pc, #360]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d0f1      	beq.n	8003af4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b10:	4b57      	ldr	r3, [pc, #348]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	22f8      	movs	r2, #248	; 0xf8
 8003b16:	4393      	bics	r3, r2
 8003b18:	0019      	movs	r1, r3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	00da      	lsls	r2, r3, #3
 8003b20:	4b53      	ldr	r3, [pc, #332]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003b22:	430a      	orrs	r2, r1
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	e018      	b.n	8003b5a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b28:	4b51      	ldr	r3, [pc, #324]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	4b50      	ldr	r3, [pc, #320]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003b2e:	2101      	movs	r1, #1
 8003b30:	438a      	bics	r2, r1
 8003b32:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b34:	f7ff f938 	bl	8002da8 <HAL_GetTick>
 8003b38:	0003      	movs	r3, r0
 8003b3a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b3e:	f7ff f933 	bl	8002da8 <HAL_GetTick>
 8003b42:	0002      	movs	r2, r0
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e204      	b.n	8003f5a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b50:	4b47      	ldr	r3, [pc, #284]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2202      	movs	r2, #2
 8003b56:	4013      	ands	r3, r2
 8003b58:	d1f1      	bne.n	8003b3e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2208      	movs	r2, #8
 8003b60:	4013      	ands	r3, r2
 8003b62:	d036      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d019      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b6c:	4b40      	ldr	r3, [pc, #256]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003b6e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b70:	4b3f      	ldr	r3, [pc, #252]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003b72:	2101      	movs	r1, #1
 8003b74:	430a      	orrs	r2, r1
 8003b76:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b78:	f7ff f916 	bl	8002da8 <HAL_GetTick>
 8003b7c:	0003      	movs	r3, r0
 8003b7e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b80:	e008      	b.n	8003b94 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b82:	f7ff f911 	bl	8002da8 <HAL_GetTick>
 8003b86:	0002      	movs	r2, r0
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	1ad3      	subs	r3, r2, r3
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e1e2      	b.n	8003f5a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b94:	4b36      	ldr	r3, [pc, #216]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	2202      	movs	r2, #2
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	d0f1      	beq.n	8003b82 <HAL_RCC_OscConfig+0x242>
 8003b9e:	e018      	b.n	8003bd2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ba0:	4b33      	ldr	r3, [pc, #204]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003ba2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ba4:	4b32      	ldr	r3, [pc, #200]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	438a      	bics	r2, r1
 8003baa:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bac:	f7ff f8fc 	bl	8002da8 <HAL_GetTick>
 8003bb0:	0003      	movs	r3, r0
 8003bb2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bb4:	e008      	b.n	8003bc8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bb6:	f7ff f8f7 	bl	8002da8 <HAL_GetTick>
 8003bba:	0002      	movs	r2, r0
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	2b02      	cmp	r3, #2
 8003bc2:	d901      	bls.n	8003bc8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e1c8      	b.n	8003f5a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc8:	4b29      	ldr	r3, [pc, #164]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	2202      	movs	r2, #2
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d1f1      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2204      	movs	r2, #4
 8003bd8:	4013      	ands	r3, r2
 8003bda:	d100      	bne.n	8003bde <HAL_RCC_OscConfig+0x29e>
 8003bdc:	e0b6      	b.n	8003d4c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bde:	231f      	movs	r3, #31
 8003be0:	18fb      	adds	r3, r7, r3
 8003be2:	2200      	movs	r2, #0
 8003be4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003be6:	4b22      	ldr	r3, [pc, #136]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003be8:	69da      	ldr	r2, [r3, #28]
 8003bea:	2380      	movs	r3, #128	; 0x80
 8003bec:	055b      	lsls	r3, r3, #21
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d111      	bne.n	8003c16 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bf2:	4b1f      	ldr	r3, [pc, #124]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003bf4:	69da      	ldr	r2, [r3, #28]
 8003bf6:	4b1e      	ldr	r3, [pc, #120]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003bf8:	2180      	movs	r1, #128	; 0x80
 8003bfa:	0549      	lsls	r1, r1, #21
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	61da      	str	r2, [r3, #28]
 8003c00:	4b1b      	ldr	r3, [pc, #108]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003c02:	69da      	ldr	r2, [r3, #28]
 8003c04:	2380      	movs	r3, #128	; 0x80
 8003c06:	055b      	lsls	r3, r3, #21
 8003c08:	4013      	ands	r3, r2
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c0e:	231f      	movs	r3, #31
 8003c10:	18fb      	adds	r3, r7, r3
 8003c12:	2201      	movs	r2, #1
 8003c14:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c16:	4b19      	ldr	r3, [pc, #100]	; (8003c7c <HAL_RCC_OscConfig+0x33c>)
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	2380      	movs	r3, #128	; 0x80
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	4013      	ands	r3, r2
 8003c20:	d11a      	bne.n	8003c58 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c22:	4b16      	ldr	r3, [pc, #88]	; (8003c7c <HAL_RCC_OscConfig+0x33c>)
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	4b15      	ldr	r3, [pc, #84]	; (8003c7c <HAL_RCC_OscConfig+0x33c>)
 8003c28:	2180      	movs	r1, #128	; 0x80
 8003c2a:	0049      	lsls	r1, r1, #1
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c30:	f7ff f8ba 	bl	8002da8 <HAL_GetTick>
 8003c34:	0003      	movs	r3, r0
 8003c36:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c38:	e008      	b.n	8003c4c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c3a:	f7ff f8b5 	bl	8002da8 <HAL_GetTick>
 8003c3e:	0002      	movs	r2, r0
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	2b64      	cmp	r3, #100	; 0x64
 8003c46:	d901      	bls.n	8003c4c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e186      	b.n	8003f5a <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <HAL_RCC_OscConfig+0x33c>)
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	2380      	movs	r3, #128	; 0x80
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	4013      	ands	r3, r2
 8003c56:	d0f0      	beq.n	8003c3a <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d10f      	bne.n	8003c80 <HAL_RCC_OscConfig+0x340>
 8003c60:	4b03      	ldr	r3, [pc, #12]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003c62:	6a1a      	ldr	r2, [r3, #32]
 8003c64:	4b02      	ldr	r3, [pc, #8]	; (8003c70 <HAL_RCC_OscConfig+0x330>)
 8003c66:	2101      	movs	r1, #1
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	621a      	str	r2, [r3, #32]
 8003c6c:	e036      	b.n	8003cdc <HAL_RCC_OscConfig+0x39c>
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	40021000 	.word	0x40021000
 8003c74:	fffeffff 	.word	0xfffeffff
 8003c78:	fffbffff 	.word	0xfffbffff
 8003c7c:	40007000 	.word	0x40007000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d10c      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x362>
 8003c88:	4bb6      	ldr	r3, [pc, #728]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003c8a:	6a1a      	ldr	r2, [r3, #32]
 8003c8c:	4bb5      	ldr	r3, [pc, #724]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003c8e:	2101      	movs	r1, #1
 8003c90:	438a      	bics	r2, r1
 8003c92:	621a      	str	r2, [r3, #32]
 8003c94:	4bb3      	ldr	r3, [pc, #716]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003c96:	6a1a      	ldr	r2, [r3, #32]
 8003c98:	4bb2      	ldr	r3, [pc, #712]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003c9a:	2104      	movs	r1, #4
 8003c9c:	438a      	bics	r2, r1
 8003c9e:	621a      	str	r2, [r3, #32]
 8003ca0:	e01c      	b.n	8003cdc <HAL_RCC_OscConfig+0x39c>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	2b05      	cmp	r3, #5
 8003ca8:	d10c      	bne.n	8003cc4 <HAL_RCC_OscConfig+0x384>
 8003caa:	4bae      	ldr	r3, [pc, #696]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003cac:	6a1a      	ldr	r2, [r3, #32]
 8003cae:	4bad      	ldr	r3, [pc, #692]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003cb0:	2104      	movs	r1, #4
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	621a      	str	r2, [r3, #32]
 8003cb6:	4bab      	ldr	r3, [pc, #684]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003cb8:	6a1a      	ldr	r2, [r3, #32]
 8003cba:	4baa      	ldr	r3, [pc, #680]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003cbc:	2101      	movs	r1, #1
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	621a      	str	r2, [r3, #32]
 8003cc2:	e00b      	b.n	8003cdc <HAL_RCC_OscConfig+0x39c>
 8003cc4:	4ba7      	ldr	r3, [pc, #668]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003cc6:	6a1a      	ldr	r2, [r3, #32]
 8003cc8:	4ba6      	ldr	r3, [pc, #664]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003cca:	2101      	movs	r1, #1
 8003ccc:	438a      	bics	r2, r1
 8003cce:	621a      	str	r2, [r3, #32]
 8003cd0:	4ba4      	ldr	r3, [pc, #656]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003cd2:	6a1a      	ldr	r2, [r3, #32]
 8003cd4:	4ba3      	ldr	r3, [pc, #652]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003cd6:	2104      	movs	r1, #4
 8003cd8:	438a      	bics	r2, r1
 8003cda:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d014      	beq.n	8003d0e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce4:	f7ff f860 	bl	8002da8 <HAL_GetTick>
 8003ce8:	0003      	movs	r3, r0
 8003cea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cec:	e009      	b.n	8003d02 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cee:	f7ff f85b 	bl	8002da8 <HAL_GetTick>
 8003cf2:	0002      	movs	r2, r0
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	4a9b      	ldr	r2, [pc, #620]	; (8003f68 <HAL_RCC_OscConfig+0x628>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e12b      	b.n	8003f5a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d02:	4b98      	ldr	r3, [pc, #608]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	2202      	movs	r2, #2
 8003d08:	4013      	ands	r3, r2
 8003d0a:	d0f0      	beq.n	8003cee <HAL_RCC_OscConfig+0x3ae>
 8003d0c:	e013      	b.n	8003d36 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d0e:	f7ff f84b 	bl	8002da8 <HAL_GetTick>
 8003d12:	0003      	movs	r3, r0
 8003d14:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d16:	e009      	b.n	8003d2c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d18:	f7ff f846 	bl	8002da8 <HAL_GetTick>
 8003d1c:	0002      	movs	r2, r0
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	1ad3      	subs	r3, r2, r3
 8003d22:	4a91      	ldr	r2, [pc, #580]	; (8003f68 <HAL_RCC_OscConfig+0x628>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d901      	bls.n	8003d2c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003d28:	2303      	movs	r3, #3
 8003d2a:	e116      	b.n	8003f5a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d2c:	4b8d      	ldr	r3, [pc, #564]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	2202      	movs	r2, #2
 8003d32:	4013      	ands	r3, r2
 8003d34:	d1f0      	bne.n	8003d18 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d36:	231f      	movs	r3, #31
 8003d38:	18fb      	adds	r3, r7, r3
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d105      	bne.n	8003d4c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d40:	4b88      	ldr	r3, [pc, #544]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003d42:	69da      	ldr	r2, [r3, #28]
 8003d44:	4b87      	ldr	r3, [pc, #540]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003d46:	4989      	ldr	r1, [pc, #548]	; (8003f6c <HAL_RCC_OscConfig+0x62c>)
 8003d48:	400a      	ands	r2, r1
 8003d4a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2210      	movs	r2, #16
 8003d52:	4013      	ands	r3, r2
 8003d54:	d063      	beq.n	8003e1e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d12a      	bne.n	8003db4 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003d5e:	4b81      	ldr	r3, [pc, #516]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003d60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d62:	4b80      	ldr	r3, [pc, #512]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003d64:	2104      	movs	r1, #4
 8003d66:	430a      	orrs	r2, r1
 8003d68:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003d6a:	4b7e      	ldr	r3, [pc, #504]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003d6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d6e:	4b7d      	ldr	r3, [pc, #500]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003d70:	2101      	movs	r1, #1
 8003d72:	430a      	orrs	r2, r1
 8003d74:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d76:	f7ff f817 	bl	8002da8 <HAL_GetTick>
 8003d7a:	0003      	movs	r3, r0
 8003d7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003d80:	f7ff f812 	bl	8002da8 <HAL_GetTick>
 8003d84:	0002      	movs	r2, r0
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e0e3      	b.n	8003f5a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003d92:	4b74      	ldr	r3, [pc, #464]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003d94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d96:	2202      	movs	r2, #2
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d0f1      	beq.n	8003d80 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003d9c:	4b71      	ldr	r3, [pc, #452]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da0:	22f8      	movs	r2, #248	; 0xf8
 8003da2:	4393      	bics	r3, r2
 8003da4:	0019      	movs	r1, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	699b      	ldr	r3, [r3, #24]
 8003daa:	00da      	lsls	r2, r3, #3
 8003dac:	4b6d      	ldr	r3, [pc, #436]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003dae:	430a      	orrs	r2, r1
 8003db0:	635a      	str	r2, [r3, #52]	; 0x34
 8003db2:	e034      	b.n	8003e1e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	3305      	adds	r3, #5
 8003dba:	d111      	bne.n	8003de0 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003dbc:	4b69      	ldr	r3, [pc, #420]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dc0:	4b68      	ldr	r3, [pc, #416]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003dc2:	2104      	movs	r1, #4
 8003dc4:	438a      	bics	r2, r1
 8003dc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003dc8:	4b66      	ldr	r3, [pc, #408]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dcc:	22f8      	movs	r2, #248	; 0xf8
 8003dce:	4393      	bics	r3, r2
 8003dd0:	0019      	movs	r1, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
 8003dd6:	00da      	lsls	r2, r3, #3
 8003dd8:	4b62      	ldr	r3, [pc, #392]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	635a      	str	r2, [r3, #52]	; 0x34
 8003dde:	e01e      	b.n	8003e1e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003de0:	4b60      	ldr	r3, [pc, #384]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003de4:	4b5f      	ldr	r3, [pc, #380]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003de6:	2104      	movs	r1, #4
 8003de8:	430a      	orrs	r2, r1
 8003dea:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003dec:	4b5d      	ldr	r3, [pc, #372]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003df0:	4b5c      	ldr	r3, [pc, #368]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003df2:	2101      	movs	r1, #1
 8003df4:	438a      	bics	r2, r1
 8003df6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df8:	f7fe ffd6 	bl	8002da8 <HAL_GetTick>
 8003dfc:	0003      	movs	r3, r0
 8003dfe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003e02:	f7fe ffd1 	bl	8002da8 <HAL_GetTick>
 8003e06:	0002      	movs	r2, r0
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e0a2      	b.n	8003f5a <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003e14:	4b53      	ldr	r3, [pc, #332]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e18:	2202      	movs	r2, #2
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	d1f1      	bne.n	8003e02 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d100      	bne.n	8003e28 <HAL_RCC_OscConfig+0x4e8>
 8003e26:	e097      	b.n	8003f58 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e28:	4b4e      	ldr	r3, [pc, #312]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	220c      	movs	r2, #12
 8003e2e:	4013      	ands	r3, r2
 8003e30:	2b08      	cmp	r3, #8
 8003e32:	d100      	bne.n	8003e36 <HAL_RCC_OscConfig+0x4f6>
 8003e34:	e06b      	b.n	8003f0e <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d14c      	bne.n	8003ed8 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3e:	4b49      	ldr	r3, [pc, #292]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4b48      	ldr	r3, [pc, #288]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003e44:	494a      	ldr	r1, [pc, #296]	; (8003f70 <HAL_RCC_OscConfig+0x630>)
 8003e46:	400a      	ands	r2, r1
 8003e48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e4a:	f7fe ffad 	bl	8002da8 <HAL_GetTick>
 8003e4e:	0003      	movs	r3, r0
 8003e50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e52:	e008      	b.n	8003e66 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e54:	f7fe ffa8 	bl	8002da8 <HAL_GetTick>
 8003e58:	0002      	movs	r2, r0
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e079      	b.n	8003f5a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e66:	4b3f      	ldr	r3, [pc, #252]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	2380      	movs	r3, #128	; 0x80
 8003e6c:	049b      	lsls	r3, r3, #18
 8003e6e:	4013      	ands	r3, r2
 8003e70:	d1f0      	bne.n	8003e54 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e72:	4b3c      	ldr	r3, [pc, #240]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e76:	220f      	movs	r2, #15
 8003e78:	4393      	bics	r3, r2
 8003e7a:	0019      	movs	r1, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e80:	4b38      	ldr	r3, [pc, #224]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003e82:	430a      	orrs	r2, r1
 8003e84:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e86:	4b37      	ldr	r3, [pc, #220]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	4a3a      	ldr	r2, [pc, #232]	; (8003f74 <HAL_RCC_OscConfig+0x634>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	0019      	movs	r1, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	4b32      	ldr	r3, [pc, #200]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ea0:	4b30      	ldr	r3, [pc, #192]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	4b2f      	ldr	r3, [pc, #188]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003ea6:	2180      	movs	r1, #128	; 0x80
 8003ea8:	0449      	lsls	r1, r1, #17
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eae:	f7fe ff7b 	bl	8002da8 <HAL_GetTick>
 8003eb2:	0003      	movs	r3, r0
 8003eb4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eb6:	e008      	b.n	8003eca <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eb8:	f7fe ff76 	bl	8002da8 <HAL_GetTick>
 8003ebc:	0002      	movs	r2, r0
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d901      	bls.n	8003eca <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e047      	b.n	8003f5a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003eca:	4b26      	ldr	r3, [pc, #152]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	2380      	movs	r3, #128	; 0x80
 8003ed0:	049b      	lsls	r3, r3, #18
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	d0f0      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x578>
 8003ed6:	e03f      	b.n	8003f58 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed8:	4b22      	ldr	r3, [pc, #136]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4b21      	ldr	r3, [pc, #132]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003ede:	4924      	ldr	r1, [pc, #144]	; (8003f70 <HAL_RCC_OscConfig+0x630>)
 8003ee0:	400a      	ands	r2, r1
 8003ee2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee4:	f7fe ff60 	bl	8002da8 <HAL_GetTick>
 8003ee8:	0003      	movs	r3, r0
 8003eea:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eee:	f7fe ff5b 	bl	8002da8 <HAL_GetTick>
 8003ef2:	0002      	movs	r2, r0
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e02c      	b.n	8003f5a <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f00:	4b18      	ldr	r3, [pc, #96]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	2380      	movs	r3, #128	; 0x80
 8003f06:	049b      	lsls	r3, r3, #18
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d1f0      	bne.n	8003eee <HAL_RCC_OscConfig+0x5ae>
 8003f0c:	e024      	b.n	8003f58 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a1b      	ldr	r3, [r3, #32]
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d101      	bne.n	8003f1a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e01f      	b.n	8003f5a <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003f1a:	4b12      	ldr	r3, [pc, #72]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003f20:	4b10      	ldr	r3, [pc, #64]	; (8003f64 <HAL_RCC_OscConfig+0x624>)
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	2380      	movs	r3, #128	; 0x80
 8003f2a:	025b      	lsls	r3, r3, #9
 8003f2c:	401a      	ands	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	429a      	cmp	r2, r3
 8003f34:	d10e      	bne.n	8003f54 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	220f      	movs	r2, #15
 8003f3a:	401a      	ands	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d107      	bne.n	8003f54 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	23f0      	movs	r3, #240	; 0xf0
 8003f48:	039b      	lsls	r3, r3, #14
 8003f4a:	401a      	ands	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d001      	beq.n	8003f58 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e000      	b.n	8003f5a <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	b008      	add	sp, #32
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	46c0      	nop			; (mov r8, r8)
 8003f64:	40021000 	.word	0x40021000
 8003f68:	00001388 	.word	0x00001388
 8003f6c:	efffffff 	.word	0xefffffff
 8003f70:	feffffff 	.word	0xfeffffff
 8003f74:	ffc2ffff 	.word	0xffc2ffff

08003f78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d101      	bne.n	8003f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0b3      	b.n	80040f4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f8c:	4b5b      	ldr	r3, [pc, #364]	; (80040fc <HAL_RCC_ClockConfig+0x184>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2201      	movs	r2, #1
 8003f92:	4013      	ands	r3, r2
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d911      	bls.n	8003fbe <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9a:	4b58      	ldr	r3, [pc, #352]	; (80040fc <HAL_RCC_ClockConfig+0x184>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	4393      	bics	r3, r2
 8003fa2:	0019      	movs	r1, r3
 8003fa4:	4b55      	ldr	r3, [pc, #340]	; (80040fc <HAL_RCC_ClockConfig+0x184>)
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fac:	4b53      	ldr	r3, [pc, #332]	; (80040fc <HAL_RCC_ClockConfig+0x184>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d001      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e09a      	b.n	80040f4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d015      	beq.n	8003ff4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2204      	movs	r2, #4
 8003fce:	4013      	ands	r3, r2
 8003fd0:	d006      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003fd2:	4b4b      	ldr	r3, [pc, #300]	; (8004100 <HAL_RCC_ClockConfig+0x188>)
 8003fd4:	685a      	ldr	r2, [r3, #4]
 8003fd6:	4b4a      	ldr	r3, [pc, #296]	; (8004100 <HAL_RCC_ClockConfig+0x188>)
 8003fd8:	21e0      	movs	r1, #224	; 0xe0
 8003fda:	00c9      	lsls	r1, r1, #3
 8003fdc:	430a      	orrs	r2, r1
 8003fde:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe0:	4b47      	ldr	r3, [pc, #284]	; (8004100 <HAL_RCC_ClockConfig+0x188>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	22f0      	movs	r2, #240	; 0xf0
 8003fe6:	4393      	bics	r3, r2
 8003fe8:	0019      	movs	r1, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	689a      	ldr	r2, [r3, #8]
 8003fee:	4b44      	ldr	r3, [pc, #272]	; (8004100 <HAL_RCC_ClockConfig+0x188>)
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d040      	beq.n	8004080 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d107      	bne.n	8004016 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004006:	4b3e      	ldr	r3, [pc, #248]	; (8004100 <HAL_RCC_ClockConfig+0x188>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	2380      	movs	r3, #128	; 0x80
 800400c:	029b      	lsls	r3, r3, #10
 800400e:	4013      	ands	r3, r2
 8004010:	d114      	bne.n	800403c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e06e      	b.n	80040f4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b02      	cmp	r3, #2
 800401c:	d107      	bne.n	800402e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800401e:	4b38      	ldr	r3, [pc, #224]	; (8004100 <HAL_RCC_ClockConfig+0x188>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	2380      	movs	r3, #128	; 0x80
 8004024:	049b      	lsls	r3, r3, #18
 8004026:	4013      	ands	r3, r2
 8004028:	d108      	bne.n	800403c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e062      	b.n	80040f4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800402e:	4b34      	ldr	r3, [pc, #208]	; (8004100 <HAL_RCC_ClockConfig+0x188>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2202      	movs	r2, #2
 8004034:	4013      	ands	r3, r2
 8004036:	d101      	bne.n	800403c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e05b      	b.n	80040f4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800403c:	4b30      	ldr	r3, [pc, #192]	; (8004100 <HAL_RCC_ClockConfig+0x188>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2203      	movs	r2, #3
 8004042:	4393      	bics	r3, r2
 8004044:	0019      	movs	r1, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	4b2d      	ldr	r3, [pc, #180]	; (8004100 <HAL_RCC_ClockConfig+0x188>)
 800404c:	430a      	orrs	r2, r1
 800404e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004050:	f7fe feaa 	bl	8002da8 <HAL_GetTick>
 8004054:	0003      	movs	r3, r0
 8004056:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004058:	e009      	b.n	800406e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800405a:	f7fe fea5 	bl	8002da8 <HAL_GetTick>
 800405e:	0002      	movs	r2, r0
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	4a27      	ldr	r2, [pc, #156]	; (8004104 <HAL_RCC_ClockConfig+0x18c>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d901      	bls.n	800406e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e042      	b.n	80040f4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406e:	4b24      	ldr	r3, [pc, #144]	; (8004100 <HAL_RCC_ClockConfig+0x188>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	220c      	movs	r2, #12
 8004074:	401a      	ands	r2, r3
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	429a      	cmp	r2, r3
 800407e:	d1ec      	bne.n	800405a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004080:	4b1e      	ldr	r3, [pc, #120]	; (80040fc <HAL_RCC_ClockConfig+0x184>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2201      	movs	r2, #1
 8004086:	4013      	ands	r3, r2
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d211      	bcs.n	80040b2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408e:	4b1b      	ldr	r3, [pc, #108]	; (80040fc <HAL_RCC_ClockConfig+0x184>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2201      	movs	r2, #1
 8004094:	4393      	bics	r3, r2
 8004096:	0019      	movs	r1, r3
 8004098:	4b18      	ldr	r3, [pc, #96]	; (80040fc <HAL_RCC_ClockConfig+0x184>)
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	430a      	orrs	r2, r1
 800409e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a0:	4b16      	ldr	r3, [pc, #88]	; (80040fc <HAL_RCC_ClockConfig+0x184>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2201      	movs	r2, #1
 80040a6:	4013      	ands	r3, r2
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d001      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e020      	b.n	80040f4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2204      	movs	r2, #4
 80040b8:	4013      	ands	r3, r2
 80040ba:	d009      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80040bc:	4b10      	ldr	r3, [pc, #64]	; (8004100 <HAL_RCC_ClockConfig+0x188>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	4a11      	ldr	r2, [pc, #68]	; (8004108 <HAL_RCC_ClockConfig+0x190>)
 80040c2:	4013      	ands	r3, r2
 80040c4:	0019      	movs	r1, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68da      	ldr	r2, [r3, #12]
 80040ca:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <HAL_RCC_ClockConfig+0x188>)
 80040cc:	430a      	orrs	r2, r1
 80040ce:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040d0:	f000 f820 	bl	8004114 <HAL_RCC_GetSysClockFreq>
 80040d4:	0001      	movs	r1, r0
 80040d6:	4b0a      	ldr	r3, [pc, #40]	; (8004100 <HAL_RCC_ClockConfig+0x188>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	091b      	lsrs	r3, r3, #4
 80040dc:	220f      	movs	r2, #15
 80040de:	4013      	ands	r3, r2
 80040e0:	4a0a      	ldr	r2, [pc, #40]	; (800410c <HAL_RCC_ClockConfig+0x194>)
 80040e2:	5cd3      	ldrb	r3, [r2, r3]
 80040e4:	000a      	movs	r2, r1
 80040e6:	40da      	lsrs	r2, r3
 80040e8:	4b09      	ldr	r3, [pc, #36]	; (8004110 <HAL_RCC_ClockConfig+0x198>)
 80040ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80040ec:	2000      	movs	r0, #0
 80040ee:	f7fe fd93 	bl	8002c18 <HAL_InitTick>
  
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	0018      	movs	r0, r3
 80040f6:	46bd      	mov	sp, r7
 80040f8:	b004      	add	sp, #16
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40022000 	.word	0x40022000
 8004100:	40021000 	.word	0x40021000
 8004104:	00001388 	.word	0x00001388
 8004108:	fffff8ff 	.word	0xfffff8ff
 800410c:	0800740c 	.word	0x0800740c
 8004110:	20000000 	.word	0x20000000

08004114 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004114:	b590      	push	{r4, r7, lr}
 8004116:	b08f      	sub	sp, #60	; 0x3c
 8004118:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800411a:	2314      	movs	r3, #20
 800411c:	18fb      	adds	r3, r7, r3
 800411e:	4a2b      	ldr	r2, [pc, #172]	; (80041cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8004120:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004122:	c313      	stmia	r3!, {r0, r1, r4}
 8004124:	6812      	ldr	r2, [r2, #0]
 8004126:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004128:	1d3b      	adds	r3, r7, #4
 800412a:	4a29      	ldr	r2, [pc, #164]	; (80041d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800412c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800412e:	c313      	stmia	r3!, {r0, r1, r4}
 8004130:	6812      	ldr	r2, [r2, #0]
 8004132:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004138:	2300      	movs	r3, #0
 800413a:	62bb      	str	r3, [r7, #40]	; 0x28
 800413c:	2300      	movs	r3, #0
 800413e:	637b      	str	r3, [r7, #52]	; 0x34
 8004140:	2300      	movs	r3, #0
 8004142:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004148:	4b22      	ldr	r3, [pc, #136]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800414e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004150:	220c      	movs	r2, #12
 8004152:	4013      	ands	r3, r2
 8004154:	2b04      	cmp	r3, #4
 8004156:	d002      	beq.n	800415e <HAL_RCC_GetSysClockFreq+0x4a>
 8004158:	2b08      	cmp	r3, #8
 800415a:	d003      	beq.n	8004164 <HAL_RCC_GetSysClockFreq+0x50>
 800415c:	e02d      	b.n	80041ba <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800415e:	4b1e      	ldr	r3, [pc, #120]	; (80041d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004160:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004162:	e02d      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004166:	0c9b      	lsrs	r3, r3, #18
 8004168:	220f      	movs	r2, #15
 800416a:	4013      	ands	r3, r2
 800416c:	2214      	movs	r2, #20
 800416e:	18ba      	adds	r2, r7, r2
 8004170:	5cd3      	ldrb	r3, [r2, r3]
 8004172:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004174:	4b17      	ldr	r3, [pc, #92]	; (80041d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	220f      	movs	r2, #15
 800417a:	4013      	ands	r3, r2
 800417c:	1d3a      	adds	r2, r7, #4
 800417e:	5cd3      	ldrb	r3, [r2, r3]
 8004180:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004184:	2380      	movs	r3, #128	; 0x80
 8004186:	025b      	lsls	r3, r3, #9
 8004188:	4013      	ands	r3, r2
 800418a:	d009      	beq.n	80041a0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800418c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800418e:	4812      	ldr	r0, [pc, #72]	; (80041d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004190:	f7fb ffba 	bl	8000108 <__udivsi3>
 8004194:	0003      	movs	r3, r0
 8004196:	001a      	movs	r2, r3
 8004198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419a:	4353      	muls	r3, r2
 800419c:	637b      	str	r3, [r7, #52]	; 0x34
 800419e:	e009      	b.n	80041b4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80041a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041a2:	000a      	movs	r2, r1
 80041a4:	0152      	lsls	r2, r2, #5
 80041a6:	1a52      	subs	r2, r2, r1
 80041a8:	0193      	lsls	r3, r2, #6
 80041aa:	1a9b      	subs	r3, r3, r2
 80041ac:	00db      	lsls	r3, r3, #3
 80041ae:	185b      	adds	r3, r3, r1
 80041b0:	021b      	lsls	r3, r3, #8
 80041b2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80041b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041b8:	e002      	b.n	80041c0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041ba:	4b07      	ldr	r3, [pc, #28]	; (80041d8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80041bc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80041be:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80041c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80041c2:	0018      	movs	r0, r3
 80041c4:	46bd      	mov	sp, r7
 80041c6:	b00f      	add	sp, #60	; 0x3c
 80041c8:	bd90      	pop	{r4, r7, pc}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	080072e4 	.word	0x080072e4
 80041d0:	080072f4 	.word	0x080072f4
 80041d4:	40021000 	.word	0x40021000
 80041d8:	007a1200 	.word	0x007a1200

080041dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041e0:	4b02      	ldr	r3, [pc, #8]	; (80041ec <HAL_RCC_GetHCLKFreq+0x10>)
 80041e2:	681b      	ldr	r3, [r3, #0]
}
 80041e4:	0018      	movs	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	46c0      	nop			; (mov r8, r8)
 80041ec:	20000000 	.word	0x20000000

080041f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80041f4:	f7ff fff2 	bl	80041dc <HAL_RCC_GetHCLKFreq>
 80041f8:	0001      	movs	r1, r0
 80041fa:	4b06      	ldr	r3, [pc, #24]	; (8004214 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	0a1b      	lsrs	r3, r3, #8
 8004200:	2207      	movs	r2, #7
 8004202:	4013      	ands	r3, r2
 8004204:	4a04      	ldr	r2, [pc, #16]	; (8004218 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004206:	5cd3      	ldrb	r3, [r2, r3]
 8004208:	40d9      	lsrs	r1, r3
 800420a:	000b      	movs	r3, r1
}    
 800420c:	0018      	movs	r0, r3
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	40021000 	.word	0x40021000
 8004218:	0800741c 	.word	0x0800741c

0800421c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2207      	movs	r2, #7
 800422a:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800422c:	4b0e      	ldr	r3, [pc, #56]	; (8004268 <HAL_RCC_GetClockConfig+0x4c>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2203      	movs	r2, #3
 8004232:	401a      	ands	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004238:	4b0b      	ldr	r3, [pc, #44]	; (8004268 <HAL_RCC_GetClockConfig+0x4c>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	22f0      	movs	r2, #240	; 0xf0
 800423e:	401a      	ands	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8004244:	4b08      	ldr	r3, [pc, #32]	; (8004268 <HAL_RCC_GetClockConfig+0x4c>)
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	23e0      	movs	r3, #224	; 0xe0
 800424a:	00db      	lsls	r3, r3, #3
 800424c:	401a      	ands	r2, r3
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8004252:	4b06      	ldr	r3, [pc, #24]	; (800426c <HAL_RCC_GetClockConfig+0x50>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2201      	movs	r2, #1
 8004258:	401a      	ands	r2, r3
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	601a      	str	r2, [r3, #0]
}
 800425e:	46c0      	nop			; (mov r8, r8)
 8004260:	46bd      	mov	sp, r7
 8004262:	b002      	add	sp, #8
 8004264:	bd80      	pop	{r7, pc}
 8004266:	46c0      	nop			; (mov r8, r8)
 8004268:	40021000 	.word	0x40021000
 800426c:	40022000 	.word	0x40022000

08004270 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b086      	sub	sp, #24
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800427c:	2300      	movs	r3, #0
 800427e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	2380      	movs	r3, #128	; 0x80
 8004286:	025b      	lsls	r3, r3, #9
 8004288:	4013      	ands	r3, r2
 800428a:	d100      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800428c:	e08f      	b.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800428e:	2317      	movs	r3, #23
 8004290:	18fb      	adds	r3, r7, r3
 8004292:	2200      	movs	r2, #0
 8004294:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004296:	4b57      	ldr	r3, [pc, #348]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004298:	69da      	ldr	r2, [r3, #28]
 800429a:	2380      	movs	r3, #128	; 0x80
 800429c:	055b      	lsls	r3, r3, #21
 800429e:	4013      	ands	r3, r2
 80042a0:	d111      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042a2:	4b54      	ldr	r3, [pc, #336]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80042a4:	69da      	ldr	r2, [r3, #28]
 80042a6:	4b53      	ldr	r3, [pc, #332]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80042a8:	2180      	movs	r1, #128	; 0x80
 80042aa:	0549      	lsls	r1, r1, #21
 80042ac:	430a      	orrs	r2, r1
 80042ae:	61da      	str	r2, [r3, #28]
 80042b0:	4b50      	ldr	r3, [pc, #320]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80042b2:	69da      	ldr	r2, [r3, #28]
 80042b4:	2380      	movs	r3, #128	; 0x80
 80042b6:	055b      	lsls	r3, r3, #21
 80042b8:	4013      	ands	r3, r2
 80042ba:	60bb      	str	r3, [r7, #8]
 80042bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042be:	2317      	movs	r3, #23
 80042c0:	18fb      	adds	r3, r7, r3
 80042c2:	2201      	movs	r2, #1
 80042c4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c6:	4b4c      	ldr	r3, [pc, #304]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	2380      	movs	r3, #128	; 0x80
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	4013      	ands	r3, r2
 80042d0:	d11a      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042d2:	4b49      	ldr	r3, [pc, #292]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	4b48      	ldr	r3, [pc, #288]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80042d8:	2180      	movs	r1, #128	; 0x80
 80042da:	0049      	lsls	r1, r1, #1
 80042dc:	430a      	orrs	r2, r1
 80042de:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042e0:	f7fe fd62 	bl	8002da8 <HAL_GetTick>
 80042e4:	0003      	movs	r3, r0
 80042e6:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e8:	e008      	b.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ea:	f7fe fd5d 	bl	8002da8 <HAL_GetTick>
 80042ee:	0002      	movs	r2, r0
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	2b64      	cmp	r3, #100	; 0x64
 80042f6:	d901      	bls.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80042f8:	2303      	movs	r3, #3
 80042fa:	e077      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042fc:	4b3e      	ldr	r3, [pc, #248]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	2380      	movs	r3, #128	; 0x80
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	4013      	ands	r3, r2
 8004306:	d0f0      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004308:	4b3a      	ldr	r3, [pc, #232]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800430a:	6a1a      	ldr	r2, [r3, #32]
 800430c:	23c0      	movs	r3, #192	; 0xc0
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4013      	ands	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d034      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	23c0      	movs	r3, #192	; 0xc0
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4013      	ands	r3, r2
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	429a      	cmp	r2, r3
 8004328:	d02c      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800432a:	4b32      	ldr	r3, [pc, #200]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	4a33      	ldr	r2, [pc, #204]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004330:	4013      	ands	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004334:	4b2f      	ldr	r3, [pc, #188]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004336:	6a1a      	ldr	r2, [r3, #32]
 8004338:	4b2e      	ldr	r3, [pc, #184]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800433a:	2180      	movs	r1, #128	; 0x80
 800433c:	0249      	lsls	r1, r1, #9
 800433e:	430a      	orrs	r2, r1
 8004340:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004342:	4b2c      	ldr	r3, [pc, #176]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004344:	6a1a      	ldr	r2, [r3, #32]
 8004346:	4b2b      	ldr	r3, [pc, #172]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004348:	492d      	ldr	r1, [pc, #180]	; (8004400 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800434a:	400a      	ands	r2, r1
 800434c:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800434e:	4b29      	ldr	r3, [pc, #164]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	4013      	ands	r3, r2
 800435a:	d013      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800435c:	f7fe fd24 	bl	8002da8 <HAL_GetTick>
 8004360:	0003      	movs	r3, r0
 8004362:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004364:	e009      	b.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004366:	f7fe fd1f 	bl	8002da8 <HAL_GetTick>
 800436a:	0002      	movs	r2, r0
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	4a24      	ldr	r2, [pc, #144]	; (8004404 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d901      	bls.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e038      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800437a:	4b1e      	ldr	r3, [pc, #120]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	2202      	movs	r2, #2
 8004380:	4013      	ands	r3, r2
 8004382:	d0f0      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004384:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	4a1c      	ldr	r2, [pc, #112]	; (80043fc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800438a:	4013      	ands	r3, r2
 800438c:	0019      	movs	r1, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	4b18      	ldr	r3, [pc, #96]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004394:	430a      	orrs	r2, r1
 8004396:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004398:	2317      	movs	r3, #23
 800439a:	18fb      	adds	r3, r7, r3
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d105      	bne.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a2:	4b14      	ldr	r3, [pc, #80]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80043a4:	69da      	ldr	r2, [r3, #28]
 80043a6:	4b13      	ldr	r3, [pc, #76]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80043a8:	4917      	ldr	r1, [pc, #92]	; (8004408 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80043aa:	400a      	ands	r2, r1
 80043ac:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2201      	movs	r2, #1
 80043b4:	4013      	ands	r3, r2
 80043b6:	d009      	beq.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80043b8:	4b0e      	ldr	r3, [pc, #56]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80043ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043bc:	2203      	movs	r2, #3
 80043be:	4393      	bics	r3, r2
 80043c0:	0019      	movs	r1, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80043c8:	430a      	orrs	r2, r1
 80043ca:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2220      	movs	r2, #32
 80043d2:	4013      	ands	r3, r2
 80043d4:	d009      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043d6:	4b07      	ldr	r3, [pc, #28]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80043d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043da:	2210      	movs	r2, #16
 80043dc:	4393      	bics	r3, r2
 80043de:	0019      	movs	r1, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68da      	ldr	r2, [r3, #12]
 80043e4:	4b03      	ldr	r3, [pc, #12]	; (80043f4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80043e6:	430a      	orrs	r2, r1
 80043e8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	0018      	movs	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b006      	add	sp, #24
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40021000 	.word	0x40021000
 80043f8:	40007000 	.word	0x40007000
 80043fc:	fffffcff 	.word	0xfffffcff
 8004400:	fffeffff 	.word	0xfffeffff
 8004404:	00001388 	.word	0x00001388
 8004408:	efffffff 	.word	0xefffffff

0800440c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e08a      	b.n	8004534 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	225d      	movs	r2, #93	; 0x5d
 8004428:	5c9b      	ldrb	r3, [r3, r2]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	2b00      	cmp	r3, #0
 800442e:	d107      	bne.n	8004440 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	225c      	movs	r2, #92	; 0x5c
 8004434:	2100      	movs	r1, #0
 8004436:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	0018      	movs	r0, r3
 800443c:	f7fe fb52 	bl	8002ae4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	225d      	movs	r2, #93	; 0x5d
 8004444:	2102      	movs	r1, #2
 8004446:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2140      	movs	r1, #64	; 0x40
 8004454:	438a      	bics	r2, r1
 8004456:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68da      	ldr	r2, [r3, #12]
 800445c:	23e0      	movs	r3, #224	; 0xe0
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	429a      	cmp	r2, r3
 8004462:	d902      	bls.n	800446a <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004464:	2300      	movs	r3, #0
 8004466:	60fb      	str	r3, [r7, #12]
 8004468:	e002      	b.n	8004470 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800446a:	2380      	movs	r3, #128	; 0x80
 800446c:	015b      	lsls	r3, r3, #5
 800446e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	23f0      	movs	r3, #240	; 0xf0
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	429a      	cmp	r2, r3
 800447a:	d008      	beq.n	800448e <HAL_SPI_Init+0x82>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	68da      	ldr	r2, [r3, #12]
 8004480:	23e0      	movs	r3, #224	; 0xe0
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	429a      	cmp	r2, r3
 8004486:	d002      	beq.n	800448e <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10c      	bne.n	80044b0 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	23e0      	movs	r3, #224	; 0xe0
 800449c:	00db      	lsls	r3, r3, #3
 800449e:	429a      	cmp	r2, r3
 80044a0:	d903      	bls.n	80044aa <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2202      	movs	r2, #2
 80044a6:	631a      	str	r2, [r3, #48]	; 0x30
 80044a8:	e002      	b.n	80044b0 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685a      	ldr	r2, [r3, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	695b      	ldr	r3, [r3, #20]
 80044c4:	431a      	orrs	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6999      	ldr	r1, [r3, #24]
 80044ca:	2380      	movs	r3, #128	; 0x80
 80044cc:	009b      	lsls	r3, r3, #2
 80044ce:	400b      	ands	r3, r1
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a1b      	ldr	r3, [r3, #32]
 80044dc:	431a      	orrs	r2, r3
 80044de:	0011      	movs	r1, r2
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	0c1b      	lsrs	r3, r3, #16
 80044f2:	2204      	movs	r2, #4
 80044f4:	401a      	ands	r2, r3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004500:	431a      	orrs	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	431a      	orrs	r2, r3
 8004508:	0011      	movs	r1, r2
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	430a      	orrs	r2, r1
 8004512:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	69da      	ldr	r2, [r3, #28]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4907      	ldr	r1, [pc, #28]	; (800453c <HAL_SPI_Init+0x130>)
 8004520:	400a      	ands	r2, r1
 8004522:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	225d      	movs	r2, #93	; 0x5d
 800452e:	2101      	movs	r1, #1
 8004530:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	0018      	movs	r0, r3
 8004536:	46bd      	mov	sp, r7
 8004538:	b004      	add	sp, #16
 800453a:	bd80      	pop	{r7, pc}
 800453c:	fffff7ff 	.word	0xfffff7ff

08004540 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b088      	sub	sp, #32
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	1dbb      	adds	r3, r7, #6
 800454e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004550:	231f      	movs	r3, #31
 8004552:	18fb      	adds	r3, r7, r3
 8004554:	2200      	movs	r2, #0
 8004556:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	225c      	movs	r2, #92	; 0x5c
 800455c:	5c9b      	ldrb	r3, [r3, r2]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d101      	bne.n	8004566 <HAL_SPI_Transmit+0x26>
 8004562:	2302      	movs	r3, #2
 8004564:	e169      	b.n	800483a <HAL_SPI_Transmit+0x2fa>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	225c      	movs	r2, #92	; 0x5c
 800456a:	2101      	movs	r1, #1
 800456c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800456e:	f7fe fc1b 	bl	8002da8 <HAL_GetTick>
 8004572:	0003      	movs	r3, r0
 8004574:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004576:	2316      	movs	r3, #22
 8004578:	18fb      	adds	r3, r7, r3
 800457a:	1dba      	adds	r2, r7, #6
 800457c:	8812      	ldrh	r2, [r2, #0]
 800457e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	225d      	movs	r2, #93	; 0x5d
 8004584:	5c9b      	ldrb	r3, [r3, r2]
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b01      	cmp	r3, #1
 800458a:	d004      	beq.n	8004596 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800458c:	231f      	movs	r3, #31
 800458e:	18fb      	adds	r3, r7, r3
 8004590:	2202      	movs	r2, #2
 8004592:	701a      	strb	r2, [r3, #0]
    goto error;
 8004594:	e146      	b.n	8004824 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d003      	beq.n	80045a4 <HAL_SPI_Transmit+0x64>
 800459c:	1dbb      	adds	r3, r7, #6
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d104      	bne.n	80045ae <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80045a4:	231f      	movs	r3, #31
 80045a6:	18fb      	adds	r3, r7, r3
 80045a8:	2201      	movs	r2, #1
 80045aa:	701a      	strb	r2, [r3, #0]
    goto error;
 80045ac:	e13a      	b.n	8004824 <HAL_SPI_Transmit+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	225d      	movs	r2, #93	; 0x5d
 80045b2:	2103      	movs	r1, #3
 80045b4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	68ba      	ldr	r2, [r7, #8]
 80045c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	1dba      	adds	r2, r7, #6
 80045c6:	8812      	ldrh	r2, [r2, #0]
 80045c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	1dba      	adds	r2, r7, #6
 80045ce:	8812      	ldrh	r2, [r2, #0]
 80045d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2244      	movs	r2, #68	; 0x44
 80045dc:	2100      	movs	r1, #0
 80045de:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2246      	movs	r2, #70	; 0x46
 80045e4:	2100      	movs	r1, #0
 80045e6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	689a      	ldr	r2, [r3, #8]
 80045f8:	2380      	movs	r3, #128	; 0x80
 80045fa:	021b      	lsls	r3, r3, #8
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d108      	bne.n	8004612 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2180      	movs	r1, #128	; 0x80
 800460c:	01c9      	lsls	r1, r1, #7
 800460e:	430a      	orrs	r2, r1
 8004610:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2240      	movs	r2, #64	; 0x40
 800461a:	4013      	ands	r3, r2
 800461c:	2b40      	cmp	r3, #64	; 0x40
 800461e:	d007      	beq.n	8004630 <HAL_SPI_Transmit+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2140      	movs	r1, #64	; 0x40
 800462c:	430a      	orrs	r2, r1
 800462e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	23e0      	movs	r3, #224	; 0xe0
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	429a      	cmp	r2, r3
 800463a:	d94e      	bls.n	80046da <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d004      	beq.n	800464e <HAL_SPI_Transmit+0x10e>
 8004644:	2316      	movs	r3, #22
 8004646:	18fb      	adds	r3, r7, r3
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d13f      	bne.n	80046ce <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004652:	881a      	ldrh	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465e:	1c9a      	adds	r2, r3, #2
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b01      	subs	r3, #1
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004672:	e02c      	b.n	80046ce <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	2202      	movs	r2, #2
 800467c:	4013      	ands	r3, r2
 800467e:	2b02      	cmp	r3, #2
 8004680:	d112      	bne.n	80046a8 <HAL_SPI_Transmit+0x168>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004686:	881a      	ldrh	r2, [r3, #0]
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	1c9a      	adds	r2, r3, #2
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800469c:	b29b      	uxth	r3, r3
 800469e:	3b01      	subs	r3, #1
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80046a6:	e012      	b.n	80046ce <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046a8:	f7fe fb7e 	bl	8002da8 <HAL_GetTick>
 80046ac:	0002      	movs	r2, r0
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d802      	bhi.n	80046be <HAL_SPI_Transmit+0x17e>
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	3301      	adds	r3, #1
 80046bc:	d102      	bne.n	80046c4 <HAL_SPI_Transmit+0x184>
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d104      	bne.n	80046ce <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 80046c4:	231f      	movs	r3, #31
 80046c6:	18fb      	adds	r3, r7, r3
 80046c8:	2203      	movs	r2, #3
 80046ca:	701a      	strb	r2, [r3, #0]
          goto error;
 80046cc:	e0aa      	b.n	8004824 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1cd      	bne.n	8004674 <HAL_SPI_Transmit+0x134>
 80046d8:	e080      	b.n	80047dc <HAL_SPI_Transmit+0x29c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d005      	beq.n	80046ee <HAL_SPI_Transmit+0x1ae>
 80046e2:	2316      	movs	r3, #22
 80046e4:	18fb      	adds	r3, r7, r3
 80046e6:	881b      	ldrh	r3, [r3, #0]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d000      	beq.n	80046ee <HAL_SPI_Transmit+0x1ae>
 80046ec:	e071      	b.n	80047d2 <HAL_SPI_Transmit+0x292>
    {
      if (hspi->TxXferCount > 1U)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d912      	bls.n	800471e <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	881a      	ldrh	r2, [r3, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	1c9a      	adds	r2, r3, #2
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004712:	b29b      	uxth	r3, r3
 8004714:	3b02      	subs	r3, #2
 8004716:	b29a      	uxth	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800471c:	e059      	b.n	80047d2 <HAL_SPI_Transmit+0x292>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	330c      	adds	r3, #12
 8004728:	7812      	ldrb	r2, [r2, #0]
 800472a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004730:	1c5a      	adds	r2, r3, #1
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800473a:	b29b      	uxth	r3, r3
 800473c:	3b01      	subs	r3, #1
 800473e:	b29a      	uxth	r2, r3
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004744:	e045      	b.n	80047d2 <HAL_SPI_Transmit+0x292>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	2202      	movs	r2, #2
 800474e:	4013      	ands	r3, r2
 8004750:	2b02      	cmp	r3, #2
 8004752:	d12b      	bne.n	80047ac <HAL_SPI_Transmit+0x26c>
      {
        if (hspi->TxXferCount > 1U)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b01      	cmp	r3, #1
 800475c:	d912      	bls.n	8004784 <HAL_SPI_Transmit+0x244>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004762:	881a      	ldrh	r2, [r3, #0]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476e:	1c9a      	adds	r2, r3, #2
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004778:	b29b      	uxth	r3, r3
 800477a:	3b02      	subs	r3, #2
 800477c:	b29a      	uxth	r2, r3
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004782:	e026      	b.n	80047d2 <HAL_SPI_Transmit+0x292>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	330c      	adds	r3, #12
 800478e:	7812      	ldrb	r2, [r2, #0]
 8004790:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	3b01      	subs	r3, #1
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047aa:	e012      	b.n	80047d2 <HAL_SPI_Transmit+0x292>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047ac:	f7fe fafc 	bl	8002da8 <HAL_GetTick>
 80047b0:	0002      	movs	r2, r0
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d802      	bhi.n	80047c2 <HAL_SPI_Transmit+0x282>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	3301      	adds	r3, #1
 80047c0:	d102      	bne.n	80047c8 <HAL_SPI_Transmit+0x288>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d104      	bne.n	80047d2 <HAL_SPI_Transmit+0x292>
        {
          errorcode = HAL_TIMEOUT;
 80047c8:	231f      	movs	r3, #31
 80047ca:	18fb      	adds	r3, r7, r3
 80047cc:	2203      	movs	r2, #3
 80047ce:	701a      	strb	r2, [r3, #0]
          goto error;
 80047d0:	e028      	b.n	8004824 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1b4      	bne.n	8004746 <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80047dc:	69ba      	ldr	r2, [r7, #24]
 80047de:	6839      	ldr	r1, [r7, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	0018      	movs	r0, r3
 80047e4:	f000 fcee 	bl	80051c4 <SPI_EndRxTxTransaction>
 80047e8:	1e03      	subs	r3, r0, #0
 80047ea:	d002      	beq.n	80047f2 <HAL_SPI_Transmit+0x2b2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10a      	bne.n	8004810 <HAL_SPI_Transmit+0x2d0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047fa:	2300      	movs	r3, #0
 80047fc:	613b      	str	r3, [r7, #16]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	613b      	str	r3, [r7, #16]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	613b      	str	r3, [r7, #16]
 800480e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004814:	2b00      	cmp	r3, #0
 8004816:	d004      	beq.n	8004822 <HAL_SPI_Transmit+0x2e2>
  {
    errorcode = HAL_ERROR;
 8004818:	231f      	movs	r3, #31
 800481a:	18fb      	adds	r3, r7, r3
 800481c:	2201      	movs	r2, #1
 800481e:	701a      	strb	r2, [r3, #0]
 8004820:	e000      	b.n	8004824 <HAL_SPI_Transmit+0x2e4>
  }

error:
 8004822:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	225d      	movs	r2, #93	; 0x5d
 8004828:	2101      	movs	r1, #1
 800482a:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	225c      	movs	r2, #92	; 0x5c
 8004830:	2100      	movs	r1, #0
 8004832:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004834:	231f      	movs	r3, #31
 8004836:	18fb      	adds	r3, r7, r3
 8004838:	781b      	ldrb	r3, [r3, #0]
}
 800483a:	0018      	movs	r0, r3
 800483c:	46bd      	mov	sp, r7
 800483e:	b008      	add	sp, #32
 8004840:	bd80      	pop	{r7, pc}
	...

08004844 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004844:	b590      	push	{r4, r7, lr}
 8004846:	b089      	sub	sp, #36	; 0x24
 8004848:	af02      	add	r7, sp, #8
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	603b      	str	r3, [r7, #0]
 8004850:	1dbb      	adds	r3, r7, #6
 8004852:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004854:	2317      	movs	r3, #23
 8004856:	18fb      	adds	r3, r7, r3
 8004858:	2200      	movs	r2, #0
 800485a:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	685a      	ldr	r2, [r3, #4]
 8004860:	2382      	movs	r3, #130	; 0x82
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	429a      	cmp	r2, r3
 8004866:	d113      	bne.n	8004890 <HAL_SPI_Receive+0x4c>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10f      	bne.n	8004890 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	225d      	movs	r2, #93	; 0x5d
 8004874:	2104      	movs	r1, #4
 8004876:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004878:	1dbb      	adds	r3, r7, #6
 800487a:	881c      	ldrh	r4, [r3, #0]
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	68b9      	ldr	r1, [r7, #8]
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	0023      	movs	r3, r4
 8004888:	f000 f920 	bl	8004acc <HAL_SPI_TransmitReceive>
 800488c:	0003      	movs	r3, r0
 800488e:	e114      	b.n	8004aba <HAL_SPI_Receive+0x276>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	225c      	movs	r2, #92	; 0x5c
 8004894:	5c9b      	ldrb	r3, [r3, r2]
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <HAL_SPI_Receive+0x5a>
 800489a:	2302      	movs	r3, #2
 800489c:	e10d      	b.n	8004aba <HAL_SPI_Receive+0x276>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	225c      	movs	r2, #92	; 0x5c
 80048a2:	2101      	movs	r1, #1
 80048a4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80048a6:	f7fe fa7f 	bl	8002da8 <HAL_GetTick>
 80048aa:	0003      	movs	r3, r0
 80048ac:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	225d      	movs	r2, #93	; 0x5d
 80048b2:	5c9b      	ldrb	r3, [r3, r2]
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d004      	beq.n	80048c4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80048ba:	2317      	movs	r3, #23
 80048bc:	18fb      	adds	r3, r7, r3
 80048be:	2202      	movs	r2, #2
 80048c0:	701a      	strb	r2, [r3, #0]
    goto error;
 80048c2:	e0ef      	b.n	8004aa4 <HAL_SPI_Receive+0x260>
  }

  if ((pData == NULL) || (Size == 0U))
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d003      	beq.n	80048d2 <HAL_SPI_Receive+0x8e>
 80048ca:	1dbb      	adds	r3, r7, #6
 80048cc:	881b      	ldrh	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d104      	bne.n	80048dc <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80048d2:	2317      	movs	r3, #23
 80048d4:	18fb      	adds	r3, r7, r3
 80048d6:	2201      	movs	r2, #1
 80048d8:	701a      	strb	r2, [r3, #0]
    goto error;
 80048da:	e0e3      	b.n	8004aa4 <HAL_SPI_Receive+0x260>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	225d      	movs	r2, #93	; 0x5d
 80048e0:	2104      	movs	r1, #4
 80048e2:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	68ba      	ldr	r2, [r7, #8]
 80048ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	1dba      	adds	r2, r7, #6
 80048f4:	2144      	movs	r1, #68	; 0x44
 80048f6:	8812      	ldrh	r2, [r2, #0]
 80048f8:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	1dba      	adds	r2, r7, #6
 80048fe:	2146      	movs	r1, #70	; 0x46
 8004900:	8812      	ldrh	r2, [r2, #0]
 8004902:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2200      	movs	r2, #0
 8004914:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	68da      	ldr	r2, [r3, #12]
 8004926:	23e0      	movs	r3, #224	; 0xe0
 8004928:	00db      	lsls	r3, r3, #3
 800492a:	429a      	cmp	r2, r3
 800492c:	d908      	bls.n	8004940 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4962      	ldr	r1, [pc, #392]	; (8004ac4 <HAL_SPI_Receive+0x280>)
 800493a:	400a      	ands	r2, r1
 800493c:	605a      	str	r2, [r3, #4]
 800493e:	e008      	b.n	8004952 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685a      	ldr	r2, [r3, #4]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2180      	movs	r1, #128	; 0x80
 800494c:	0149      	lsls	r1, r1, #5
 800494e:	430a      	orrs	r2, r1
 8004950:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	2380      	movs	r3, #128	; 0x80
 8004958:	021b      	lsls	r3, r3, #8
 800495a:	429a      	cmp	r2, r3
 800495c:	d107      	bne.n	800496e <HAL_SPI_Receive+0x12a>
  {
    SPI_1LINE_RX(hspi);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4957      	ldr	r1, [pc, #348]	; (8004ac8 <HAL_SPI_Receive+0x284>)
 800496a:	400a      	ands	r2, r1
 800496c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2240      	movs	r2, #64	; 0x40
 8004976:	4013      	ands	r3, r2
 8004978:	2b40      	cmp	r3, #64	; 0x40
 800497a:	d007      	beq.n	800498c <HAL_SPI_Receive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2140      	movs	r1, #64	; 0x40
 8004988:	430a      	orrs	r2, r1
 800498a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	68da      	ldr	r2, [r3, #12]
 8004990:	23e0      	movs	r3, #224	; 0xe0
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	429a      	cmp	r2, r3
 8004996:	d900      	bls.n	800499a <HAL_SPI_Receive+0x156>
 8004998:	e069      	b.n	8004a6e <HAL_SPI_Receive+0x22a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800499a:	e031      	b.n	8004a00 <HAL_SPI_Receive+0x1bc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	2201      	movs	r2, #1
 80049a4:	4013      	ands	r3, r2
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d117      	bne.n	80049da <HAL_SPI_Receive+0x196>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	330c      	adds	r3, #12
 80049b0:	001a      	movs	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b6:	7812      	ldrb	r2, [r2, #0]
 80049b8:	b2d2      	uxtb	r2, r2
 80049ba:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2246      	movs	r2, #70	; 0x46
 80049ca:	5a9b      	ldrh	r3, [r3, r2]
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b299      	uxth	r1, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	2246      	movs	r2, #70	; 0x46
 80049d6:	5299      	strh	r1, [r3, r2]
 80049d8:	e012      	b.n	8004a00 <HAL_SPI_Receive+0x1bc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049da:	f7fe f9e5 	bl	8002da8 <HAL_GetTick>
 80049de:	0002      	movs	r2, r0
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d802      	bhi.n	80049f0 <HAL_SPI_Receive+0x1ac>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	3301      	adds	r3, #1
 80049ee:	d102      	bne.n	80049f6 <HAL_SPI_Receive+0x1b2>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d104      	bne.n	8004a00 <HAL_SPI_Receive+0x1bc>
        {
          errorcode = HAL_TIMEOUT;
 80049f6:	2317      	movs	r3, #23
 80049f8:	18fb      	adds	r3, r7, r3
 80049fa:	2203      	movs	r2, #3
 80049fc:	701a      	strb	r2, [r3, #0]
          goto error;
 80049fe:	e051      	b.n	8004aa4 <HAL_SPI_Receive+0x260>
    while (hspi->RxXferCount > 0U)
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2246      	movs	r2, #70	; 0x46
 8004a04:	5a9b      	ldrh	r3, [r3, r2]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1c7      	bne.n	800499c <HAL_SPI_Receive+0x158>
 8004a0c:	e035      	b.n	8004a7a <HAL_SPI_Receive+0x236>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	2201      	movs	r2, #1
 8004a16:	4013      	ands	r3, r2
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d115      	bne.n	8004a48 <HAL_SPI_Receive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68da      	ldr	r2, [r3, #12]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	b292      	uxth	r2, r2
 8004a28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	1c9a      	adds	r2, r3, #2
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2246      	movs	r2, #70	; 0x46
 8004a38:	5a9b      	ldrh	r3, [r3, r2]
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	b299      	uxth	r1, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2246      	movs	r2, #70	; 0x46
 8004a44:	5299      	strh	r1, [r3, r2]
 8004a46:	e012      	b.n	8004a6e <HAL_SPI_Receive+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004a48:	f7fe f9ae 	bl	8002da8 <HAL_GetTick>
 8004a4c:	0002      	movs	r2, r0
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	683a      	ldr	r2, [r7, #0]
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d802      	bhi.n	8004a5e <HAL_SPI_Receive+0x21a>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	d102      	bne.n	8004a64 <HAL_SPI_Receive+0x220>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d104      	bne.n	8004a6e <HAL_SPI_Receive+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 8004a64:	2317      	movs	r3, #23
 8004a66:	18fb      	adds	r3, r7, r3
 8004a68:	2203      	movs	r2, #3
 8004a6a:	701a      	strb	r2, [r3, #0]
          goto error;
 8004a6c:	e01a      	b.n	8004aa4 <HAL_SPI_Receive+0x260>
    while (hspi->RxXferCount > 0U)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2246      	movs	r2, #70	; 0x46
 8004a72:	5a9b      	ldrh	r3, [r3, r2]
 8004a74:	b29b      	uxth	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1c9      	bne.n	8004a0e <HAL_SPI_Receive+0x1ca>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	6839      	ldr	r1, [r7, #0]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	0018      	movs	r0, r3
 8004a82:	f000 fb41 	bl	8005108 <SPI_EndRxTransaction>
 8004a86:	1e03      	subs	r3, r0, #0
 8004a88:	d002      	beq.n	8004a90 <HAL_SPI_Receive+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2220      	movs	r2, #32
 8004a8e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d004      	beq.n	8004aa2 <HAL_SPI_Receive+0x25e>
  {
    errorcode = HAL_ERROR;
 8004a98:	2317      	movs	r3, #23
 8004a9a:	18fb      	adds	r3, r7, r3
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	701a      	strb	r2, [r3, #0]
 8004aa0:	e000      	b.n	8004aa4 <HAL_SPI_Receive+0x260>
  }

error :
 8004aa2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	225d      	movs	r2, #93	; 0x5d
 8004aa8:	2101      	movs	r1, #1
 8004aaa:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	225c      	movs	r2, #92	; 0x5c
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004ab4:	2317      	movs	r3, #23
 8004ab6:	18fb      	adds	r3, r7, r3
 8004ab8:	781b      	ldrb	r3, [r3, #0]
}
 8004aba:	0018      	movs	r0, r3
 8004abc:	46bd      	mov	sp, r7
 8004abe:	b007      	add	sp, #28
 8004ac0:	bd90      	pop	{r4, r7, pc}
 8004ac2:	46c0      	nop			; (mov r8, r8)
 8004ac4:	ffffefff 	.word	0xffffefff
 8004ac8:	ffffbfff 	.word	0xffffbfff

08004acc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08a      	sub	sp, #40	; 0x28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
 8004ad8:	001a      	movs	r2, r3
 8004ada:	1cbb      	adds	r3, r7, #2
 8004adc:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ae2:	2323      	movs	r3, #35	; 0x23
 8004ae4:	18fb      	adds	r3, r7, r3
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	225c      	movs	r2, #92	; 0x5c
 8004aee:	5c9b      	ldrb	r3, [r3, r2]
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d101      	bne.n	8004af8 <HAL_SPI_TransmitReceive+0x2c>
 8004af4:	2302      	movs	r3, #2
 8004af6:	e21f      	b.n	8004f38 <HAL_SPI_TransmitReceive+0x46c>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	225c      	movs	r2, #92	; 0x5c
 8004afc:	2101      	movs	r1, #1
 8004afe:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b00:	f7fe f952 	bl	8002da8 <HAL_GetTick>
 8004b04:	0003      	movs	r3, r0
 8004b06:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004b08:	201b      	movs	r0, #27
 8004b0a:	183b      	adds	r3, r7, r0
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	215d      	movs	r1, #93	; 0x5d
 8004b10:	5c52      	ldrb	r2, [r2, r1]
 8004b12:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004b1a:	2312      	movs	r3, #18
 8004b1c:	18fb      	adds	r3, r7, r3
 8004b1e:	1cba      	adds	r2, r7, #2
 8004b20:	8812      	ldrh	r2, [r2, #0]
 8004b22:	801a      	strh	r2, [r3, #0]
  initial_RxXferCount = Size;
 8004b24:	2310      	movs	r3, #16
 8004b26:	18fb      	adds	r3, r7, r3
 8004b28:	1cba      	adds	r2, r7, #2
 8004b2a:	8812      	ldrh	r2, [r2, #0]
 8004b2c:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004b2e:	183b      	adds	r3, r7, r0
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d012      	beq.n	8004b5c <HAL_SPI_TransmitReceive+0x90>
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	2382      	movs	r3, #130	; 0x82
 8004b3a:	005b      	lsls	r3, r3, #1
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d108      	bne.n	8004b52 <HAL_SPI_TransmitReceive+0x86>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d104      	bne.n	8004b52 <HAL_SPI_TransmitReceive+0x86>
 8004b48:	231b      	movs	r3, #27
 8004b4a:	18fb      	adds	r3, r7, r3
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d004      	beq.n	8004b5c <HAL_SPI_TransmitReceive+0x90>
  {
    errorcode = HAL_BUSY;
 8004b52:	2323      	movs	r3, #35	; 0x23
 8004b54:	18fb      	adds	r3, r7, r3
 8004b56:	2202      	movs	r2, #2
 8004b58:	701a      	strb	r2, [r3, #0]
    goto error;
 8004b5a:	e1e2      	b.n	8004f22 <HAL_SPI_TransmitReceive+0x456>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d006      	beq.n	8004b70 <HAL_SPI_TransmitReceive+0xa4>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_SPI_TransmitReceive+0xa4>
 8004b68:	1cbb      	adds	r3, r7, #2
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d104      	bne.n	8004b7a <HAL_SPI_TransmitReceive+0xae>
  {
    errorcode = HAL_ERROR;
 8004b70:	2323      	movs	r3, #35	; 0x23
 8004b72:	18fb      	adds	r3, r7, r3
 8004b74:	2201      	movs	r2, #1
 8004b76:	701a      	strb	r2, [r3, #0]
    goto error;
 8004b78:	e1d3      	b.n	8004f22 <HAL_SPI_TransmitReceive+0x456>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	225d      	movs	r2, #93	; 0x5d
 8004b7e:	5c9b      	ldrb	r3, [r3, r2]
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	2b04      	cmp	r3, #4
 8004b84:	d003      	beq.n	8004b8e <HAL_SPI_TransmitReceive+0xc2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	225d      	movs	r2, #93	; 0x5d
 8004b8a:	2105      	movs	r1, #5
 8004b8c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	1cba      	adds	r2, r7, #2
 8004b9e:	2146      	movs	r1, #70	; 0x46
 8004ba0:	8812      	ldrh	r2, [r2, #0]
 8004ba2:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	1cba      	adds	r2, r7, #2
 8004ba8:	2144      	movs	r1, #68	; 0x44
 8004baa:	8812      	ldrh	r2, [r2, #0]
 8004bac:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	68ba      	ldr	r2, [r7, #8]
 8004bb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	1cba      	adds	r2, r7, #2
 8004bb8:	8812      	ldrh	r2, [r2, #0]
 8004bba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	1cba      	adds	r2, r7, #2
 8004bc0:	8812      	ldrh	r2, [r2, #0]
 8004bc2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	68da      	ldr	r2, [r3, #12]
 8004bd4:	23e0      	movs	r3, #224	; 0xe0
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d804      	bhi.n	8004be6 <HAL_SPI_TransmitReceive+0x11a>
 8004bdc:	2310      	movs	r3, #16
 8004bde:	18fb      	adds	r3, r7, r3
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d908      	bls.n	8004bf8 <HAL_SPI_TransmitReceive+0x12c>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	685a      	ldr	r2, [r3, #4]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	49ca      	ldr	r1, [pc, #808]	; (8004f1c <HAL_SPI_TransmitReceive+0x450>)
 8004bf2:	400a      	ands	r2, r1
 8004bf4:	605a      	str	r2, [r3, #4]
 8004bf6:	e008      	b.n	8004c0a <HAL_SPI_TransmitReceive+0x13e>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2180      	movs	r1, #128	; 0x80
 8004c04:	0149      	lsls	r1, r1, #5
 8004c06:	430a      	orrs	r2, r1
 8004c08:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2240      	movs	r2, #64	; 0x40
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	d007      	beq.n	8004c28 <HAL_SPI_TransmitReceive+0x15c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2140      	movs	r1, #64	; 0x40
 8004c24:	430a      	orrs	r2, r1
 8004c26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	68da      	ldr	r2, [r3, #12]
 8004c2c:	23e0      	movs	r3, #224	; 0xe0
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d800      	bhi.n	8004c36 <HAL_SPI_TransmitReceive+0x16a>
 8004c34:	e07f      	b.n	8004d36 <HAL_SPI_TransmitReceive+0x26a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d005      	beq.n	8004c4a <HAL_SPI_TransmitReceive+0x17e>
 8004c3e:	2312      	movs	r3, #18
 8004c40:	18fb      	adds	r3, r7, r3
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d000      	beq.n	8004c4a <HAL_SPI_TransmitReceive+0x17e>
 8004c48:	e069      	b.n	8004d1e <HAL_SPI_TransmitReceive+0x252>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4e:	881a      	ldrh	r2, [r3, #0]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c5a:	1c9a      	adds	r2, r3, #2
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c64:	b29b      	uxth	r3, r3
 8004c66:	3b01      	subs	r3, #1
 8004c68:	b29a      	uxth	r2, r3
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c6e:	e056      	b.n	8004d1e <HAL_SPI_TransmitReceive+0x252>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	2202      	movs	r2, #2
 8004c78:	4013      	ands	r3, r2
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d11b      	bne.n	8004cb6 <HAL_SPI_TransmitReceive+0x1ea>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d016      	beq.n	8004cb6 <HAL_SPI_TransmitReceive+0x1ea>
 8004c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d113      	bne.n	8004cb6 <HAL_SPI_TransmitReceive+0x1ea>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c92:	881a      	ldrh	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9e:	1c9a      	adds	r2, r3, #2
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ca8:	b29b      	uxth	r3, r3
 8004caa:	3b01      	subs	r3, #1
 8004cac:	b29a      	uxth	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d11c      	bne.n	8004cfe <HAL_SPI_TransmitReceive+0x232>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2246      	movs	r2, #70	; 0x46
 8004cc8:	5a9b      	ldrh	r3, [r3, r2]
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d016      	beq.n	8004cfe <HAL_SPI_TransmitReceive+0x232>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68da      	ldr	r2, [r3, #12]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cda:	b292      	uxth	r2, r2
 8004cdc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	1c9a      	adds	r2, r3, #2
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2246      	movs	r2, #70	; 0x46
 8004cec:	5a9b      	ldrh	r3, [r3, r2]
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	b299      	uxth	r1, r3
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2246      	movs	r2, #70	; 0x46
 8004cf8:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004cfe:	f7fe f853 	bl	8002da8 <HAL_GetTick>
 8004d02:	0002      	movs	r2, r0
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d807      	bhi.n	8004d1e <HAL_SPI_TransmitReceive+0x252>
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d10:	3301      	adds	r3, #1
 8004d12:	d004      	beq.n	8004d1e <HAL_SPI_TransmitReceive+0x252>
      {
        errorcode = HAL_TIMEOUT;
 8004d14:	2323      	movs	r3, #35	; 0x23
 8004d16:	18fb      	adds	r3, r7, r3
 8004d18:	2203      	movs	r2, #3
 8004d1a:	701a      	strb	r2, [r3, #0]
        goto error;
 8004d1c:	e101      	b.n	8004f22 <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1a3      	bne.n	8004c70 <HAL_SPI_TransmitReceive+0x1a4>
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2246      	movs	r2, #70	; 0x46
 8004d2c:	5a9b      	ldrh	r3, [r3, r2]
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d19d      	bne.n	8004c70 <HAL_SPI_TransmitReceive+0x1a4>
 8004d34:	e0e2      	b.n	8004efc <HAL_SPI_TransmitReceive+0x430>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d005      	beq.n	8004d4a <HAL_SPI_TransmitReceive+0x27e>
 8004d3e:	2312      	movs	r3, #18
 8004d40:	18fb      	adds	r3, r7, r3
 8004d42:	881b      	ldrh	r3, [r3, #0]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d000      	beq.n	8004d4a <HAL_SPI_TransmitReceive+0x27e>
 8004d48:	e0cb      	b.n	8004ee2 <HAL_SPI_TransmitReceive+0x416>
    {
      if (hspi->TxXferCount > 1U)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d912      	bls.n	8004d7a <HAL_SPI_TransmitReceive+0x2ae>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d58:	881a      	ldrh	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d64:	1c9a      	adds	r2, r3, #2
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	3b02      	subs	r3, #2
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d78:	e0b3      	b.n	8004ee2 <HAL_SPI_TransmitReceive+0x416>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	330c      	adds	r3, #12
 8004d84:	7812      	ldrb	r2, [r2, #0]
 8004d86:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	b29a      	uxth	r2, r3
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004da0:	e09f      	b.n	8004ee2 <HAL_SPI_TransmitReceive+0x416>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	2202      	movs	r2, #2
 8004daa:	4013      	ands	r3, r2
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d134      	bne.n	8004e1a <HAL_SPI_TransmitReceive+0x34e>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d02f      	beq.n	8004e1a <HAL_SPI_TransmitReceive+0x34e>
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d12c      	bne.n	8004e1a <HAL_SPI_TransmitReceive+0x34e>
      {
        if (hspi->TxXferCount > 1U)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d912      	bls.n	8004df0 <HAL_SPI_TransmitReceive+0x324>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dce:	881a      	ldrh	r2, [r3, #0]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dda:	1c9a      	adds	r2, r3, #2
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	3b02      	subs	r3, #2
 8004de8:	b29a      	uxth	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dee:	e012      	b.n	8004e16 <HAL_SPI_TransmitReceive+0x34a>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	330c      	adds	r3, #12
 8004dfa:	7812      	ldrb	r2, [r2, #0]
 8004dfc:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	2201      	movs	r2, #1
 8004e22:	4013      	ands	r3, r2
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d149      	bne.n	8004ebc <HAL_SPI_TransmitReceive+0x3f0>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2246      	movs	r2, #70	; 0x46
 8004e2c:	5a9b      	ldrh	r3, [r3, r2]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d043      	beq.n	8004ebc <HAL_SPI_TransmitReceive+0x3f0>
      {
        if (hspi->RxXferCount > 1U)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2246      	movs	r2, #70	; 0x46
 8004e38:	5a9b      	ldrh	r3, [r3, r2]
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d924      	bls.n	8004e8a <HAL_SPI_TransmitReceive+0x3be>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	68da      	ldr	r2, [r3, #12]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	b292      	uxth	r2, r2
 8004e4c:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	1c9a      	adds	r2, r3, #2
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2246      	movs	r2, #70	; 0x46
 8004e5c:	5a9b      	ldrh	r3, [r3, r2]
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b02      	subs	r3, #2
 8004e62:	b299      	uxth	r1, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2246      	movs	r2, #70	; 0x46
 8004e68:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2246      	movs	r2, #70	; 0x46
 8004e6e:	5a9b      	ldrh	r3, [r3, r2]
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d820      	bhi.n	8004eb8 <HAL_SPI_TransmitReceive+0x3ec>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2180      	movs	r1, #128	; 0x80
 8004e82:	0149      	lsls	r1, r1, #5
 8004e84:	430a      	orrs	r2, r1
 8004e86:	605a      	str	r2, [r3, #4]
 8004e88:	e016      	b.n	8004eb8 <HAL_SPI_TransmitReceive+0x3ec>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	330c      	adds	r3, #12
 8004e90:	001a      	movs	r2, r3
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	7812      	ldrb	r2, [r2, #0]
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2246      	movs	r2, #70	; 0x46
 8004eaa:	5a9b      	ldrh	r3, [r3, r2]
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b299      	uxth	r1, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2246      	movs	r2, #70	; 0x46
 8004eb6:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004ebc:	f7fd ff74 	bl	8002da8 <HAL_GetTick>
 8004ec0:	0002      	movs	r2, r0
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d802      	bhi.n	8004ed2 <HAL_SPI_TransmitReceive+0x406>
 8004ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ece:	3301      	adds	r3, #1
 8004ed0:	d102      	bne.n	8004ed8 <HAL_SPI_TransmitReceive+0x40c>
 8004ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d104      	bne.n	8004ee2 <HAL_SPI_TransmitReceive+0x416>
      {
        errorcode = HAL_TIMEOUT;
 8004ed8:	2323      	movs	r3, #35	; 0x23
 8004eda:	18fb      	adds	r3, r7, r3
 8004edc:	2203      	movs	r2, #3
 8004ede:	701a      	strb	r2, [r3, #0]
        goto error;
 8004ee0:	e01f      	b.n	8004f22 <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d000      	beq.n	8004eee <HAL_SPI_TransmitReceive+0x422>
 8004eec:	e759      	b.n	8004da2 <HAL_SPI_TransmitReceive+0x2d6>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2246      	movs	r2, #70	; 0x46
 8004ef2:	5a9b      	ldrh	r3, [r3, r2]
 8004ef4:	b29b      	uxth	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d000      	beq.n	8004efc <HAL_SPI_TransmitReceive+0x430>
 8004efa:	e752      	b.n	8004da2 <HAL_SPI_TransmitReceive+0x2d6>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004efc:	69fa      	ldr	r2, [r7, #28]
 8004efe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	0018      	movs	r0, r3
 8004f04:	f000 f95e 	bl	80051c4 <SPI_EndRxTxTransaction>
 8004f08:	1e03      	subs	r3, r0, #0
 8004f0a:	d009      	beq.n	8004f20 <HAL_SPI_TransmitReceive+0x454>
  {
    errorcode = HAL_ERROR;
 8004f0c:	2323      	movs	r3, #35	; 0x23
 8004f0e:	18fb      	adds	r3, r7, r3
 8004f10:	2201      	movs	r2, #1
 8004f12:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2220      	movs	r2, #32
 8004f18:	661a      	str	r2, [r3, #96]	; 0x60
 8004f1a:	e002      	b.n	8004f22 <HAL_SPI_TransmitReceive+0x456>
 8004f1c:	ffffefff 	.word	0xffffefff
  }

error :
 8004f20:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	225d      	movs	r2, #93	; 0x5d
 8004f26:	2101      	movs	r1, #1
 8004f28:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	225c      	movs	r2, #92	; 0x5c
 8004f2e:	2100      	movs	r1, #0
 8004f30:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004f32:	2323      	movs	r3, #35	; 0x23
 8004f34:	18fb      	adds	r3, r7, r3
 8004f36:	781b      	ldrb	r3, [r3, #0]
}
 8004f38:	0018      	movs	r0, r3
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	b00a      	add	sp, #40	; 0x28
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b084      	sub	sp, #16
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	603b      	str	r3, [r7, #0]
 8004f4c:	1dfb      	adds	r3, r7, #7
 8004f4e:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f50:	e050      	b.n	8004ff4 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	3301      	adds	r3, #1
 8004f56:	d04d      	beq.n	8004ff4 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004f58:	f7fd ff26 	bl	8002da8 <HAL_GetTick>
 8004f5c:	0002      	movs	r2, r0
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	683a      	ldr	r2, [r7, #0]
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d902      	bls.n	8004f6e <SPI_WaitFlagStateUntilTimeout+0x2e>
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d142      	bne.n	8004ff4 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	21e0      	movs	r1, #224	; 0xe0
 8004f7a:	438a      	bics	r2, r1
 8004f7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	2382      	movs	r3, #130	; 0x82
 8004f84:	005b      	lsls	r3, r3, #1
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d113      	bne.n	8004fb2 <SPI_WaitFlagStateUntilTimeout+0x72>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	2380      	movs	r3, #128	; 0x80
 8004f90:	021b      	lsls	r3, r3, #8
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d005      	beq.n	8004fa2 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	689a      	ldr	r2, [r3, #8]
 8004f9a:	2380      	movs	r3, #128	; 0x80
 8004f9c:	00db      	lsls	r3, r3, #3
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d107      	bne.n	8004fb2 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2140      	movs	r1, #64	; 0x40
 8004fae:	438a      	bics	r2, r1
 8004fb0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fb6:	2380      	movs	r3, #128	; 0x80
 8004fb8:	019b      	lsls	r3, r3, #6
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d110      	bne.n	8004fe0 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4914      	ldr	r1, [pc, #80]	; (800501c <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8004fca:	400a      	ands	r2, r1
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2180      	movs	r1, #128	; 0x80
 8004fda:	0189      	lsls	r1, r1, #6
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	225d      	movs	r2, #93	; 0x5d
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	225c      	movs	r2, #92	; 0x5c
 8004fec:	2100      	movs	r1, #0
 8004fee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e00f      	b.n	8005014 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	68ba      	ldr	r2, [r7, #8]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	425a      	negs	r2, r3
 8005004:	4153      	adcs	r3, r2
 8005006:	b2db      	uxtb	r3, r3
 8005008:	001a      	movs	r2, r3
 800500a:	1dfb      	adds	r3, r7, #7
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	d19f      	bne.n	8004f52 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005012:	2300      	movs	r3, #0
}
 8005014:	0018      	movs	r0, r3
 8005016:	46bd      	mov	sp, r7
 8005018:	b004      	add	sp, #16
 800501a:	bd80      	pop	{r7, pc}
 800501c:	ffffdfff 	.word	0xffffdfff

08005020 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b084      	sub	sp, #16
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]
 800502c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800502e:	e05c      	b.n	80050ea <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005030:	68ba      	ldr	r2, [r7, #8]
 8005032:	23c0      	movs	r3, #192	; 0xc0
 8005034:	00db      	lsls	r3, r3, #3
 8005036:	429a      	cmp	r2, r3
 8005038:	d106      	bne.n	8005048 <SPI_WaitFifoStateUntilTimeout+0x28>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d103      	bne.n	8005048 <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	330c      	adds	r3, #12
 8005046:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	3301      	adds	r3, #1
 800504c:	d04d      	beq.n	80050ea <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800504e:	f7fd feab 	bl	8002da8 <HAL_GetTick>
 8005052:	0002      	movs	r2, r0
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d902      	bls.n	8005064 <SPI_WaitFifoStateUntilTimeout+0x44>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d142      	bne.n	80050ea <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	21e0      	movs	r1, #224	; 0xe0
 8005070:	438a      	bics	r2, r1
 8005072:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	685a      	ldr	r2, [r3, #4]
 8005078:	2382      	movs	r3, #130	; 0x82
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	429a      	cmp	r2, r3
 800507e:	d113      	bne.n	80050a8 <SPI_WaitFifoStateUntilTimeout+0x88>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	689a      	ldr	r2, [r3, #8]
 8005084:	2380      	movs	r3, #128	; 0x80
 8005086:	021b      	lsls	r3, r3, #8
 8005088:	429a      	cmp	r2, r3
 800508a:	d005      	beq.n	8005098 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	689a      	ldr	r2, [r3, #8]
 8005090:	2380      	movs	r3, #128	; 0x80
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	429a      	cmp	r2, r3
 8005096:	d107      	bne.n	80050a8 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2140      	movs	r1, #64	; 0x40
 80050a4:	438a      	bics	r2, r1
 80050a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ac:	2380      	movs	r3, #128	; 0x80
 80050ae:	019b      	lsls	r3, r3, #6
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d110      	bne.n	80050d6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4911      	ldr	r1, [pc, #68]	; (8005104 <SPI_WaitFifoStateUntilTimeout+0xe4>)
 80050c0:	400a      	ands	r2, r1
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2180      	movs	r1, #128	; 0x80
 80050d0:	0189      	lsls	r1, r1, #6
 80050d2:	430a      	orrs	r2, r1
 80050d4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	225d      	movs	r2, #93	; 0x5d
 80050da:	2101      	movs	r1, #1
 80050dc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	225c      	movs	r2, #92	; 0x5c
 80050e2:	2100      	movs	r1, #0
 80050e4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e008      	b.n	80050fc <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	4013      	ands	r3, r2
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d19a      	bne.n	8005030 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	0018      	movs	r0, r3
 80050fe:	46bd      	mov	sp, r7
 8005100:	b004      	add	sp, #16
 8005102:	bd80      	pop	{r7, pc}
 8005104:	ffffdfff 	.word	0xffffdfff

08005108 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af02      	add	r7, sp, #8
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	2382      	movs	r3, #130	; 0x82
 800511a:	005b      	lsls	r3, r3, #1
 800511c:	429a      	cmp	r2, r3
 800511e:	d113      	bne.n	8005148 <SPI_EndRxTransaction+0x40>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	2380      	movs	r3, #128	; 0x80
 8005126:	021b      	lsls	r3, r3, #8
 8005128:	429a      	cmp	r2, r3
 800512a:	d005      	beq.n	8005138 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	689a      	ldr	r2, [r3, #8]
 8005130:	2380      	movs	r3, #128	; 0x80
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	429a      	cmp	r2, r3
 8005136:	d107      	bne.n	8005148 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2140      	movs	r1, #64	; 0x40
 8005144:	438a      	bics	r2, r1
 8005146:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005148:	68ba      	ldr	r2, [r7, #8]
 800514a:	68f8      	ldr	r0, [r7, #12]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	0013      	movs	r3, r2
 8005152:	2200      	movs	r2, #0
 8005154:	2180      	movs	r1, #128	; 0x80
 8005156:	f7ff fef3 	bl	8004f40 <SPI_WaitFlagStateUntilTimeout>
 800515a:	1e03      	subs	r3, r0, #0
 800515c:	d007      	beq.n	800516e <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005162:	2220      	movs	r2, #32
 8005164:	431a      	orrs	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e026      	b.n	80051bc <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	2382      	movs	r3, #130	; 0x82
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	429a      	cmp	r2, r3
 8005178:	d11f      	bne.n	80051ba <SPI_EndRxTransaction+0xb2>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	689a      	ldr	r2, [r3, #8]
 800517e:	2380      	movs	r3, #128	; 0x80
 8005180:	021b      	lsls	r3, r3, #8
 8005182:	429a      	cmp	r2, r3
 8005184:	d005      	beq.n	8005192 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	689a      	ldr	r2, [r3, #8]
 800518a:	2380      	movs	r3, #128	; 0x80
 800518c:	00db      	lsls	r3, r3, #3
 800518e:	429a      	cmp	r2, r3
 8005190:	d113      	bne.n	80051ba <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	23c0      	movs	r3, #192	; 0xc0
 8005196:	00d9      	lsls	r1, r3, #3
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	0013      	movs	r3, r2
 80051a0:	2200      	movs	r2, #0
 80051a2:	f7ff ff3d 	bl	8005020 <SPI_WaitFifoStateUntilTimeout>
 80051a6:	1e03      	subs	r3, r0, #0
 80051a8:	d007      	beq.n	80051ba <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ae:	2220      	movs	r2, #32
 80051b0:	431a      	orrs	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e000      	b.n	80051bc <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	0018      	movs	r0, r3
 80051be:	46bd      	mov	sp, r7
 80051c0:	b004      	add	sp, #16
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af02      	add	r7, sp, #8
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051d0:	68ba      	ldr	r2, [r7, #8]
 80051d2:	23c0      	movs	r3, #192	; 0xc0
 80051d4:	0159      	lsls	r1, r3, #5
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	9300      	str	r3, [sp, #0]
 80051dc:	0013      	movs	r3, r2
 80051de:	2200      	movs	r2, #0
 80051e0:	f7ff ff1e 	bl	8005020 <SPI_WaitFifoStateUntilTimeout>
 80051e4:	1e03      	subs	r3, r0, #0
 80051e6:	d007      	beq.n	80051f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ec:	2220      	movs	r2, #32
 80051ee:	431a      	orrs	r2, r3
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e027      	b.n	8005248 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051f8:	68ba      	ldr	r2, [r7, #8]
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	9300      	str	r3, [sp, #0]
 8005200:	0013      	movs	r3, r2
 8005202:	2200      	movs	r2, #0
 8005204:	2180      	movs	r1, #128	; 0x80
 8005206:	f7ff fe9b 	bl	8004f40 <SPI_WaitFlagStateUntilTimeout>
 800520a:	1e03      	subs	r3, r0, #0
 800520c:	d007      	beq.n	800521e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005212:	2220      	movs	r2, #32
 8005214:	431a      	orrs	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e014      	b.n	8005248 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800521e:	68ba      	ldr	r2, [r7, #8]
 8005220:	23c0      	movs	r3, #192	; 0xc0
 8005222:	00d9      	lsls	r1, r3, #3
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	9300      	str	r3, [sp, #0]
 800522a:	0013      	movs	r3, r2
 800522c:	2200      	movs	r2, #0
 800522e:	f7ff fef7 	bl	8005020 <SPI_WaitFifoStateUntilTimeout>
 8005232:	1e03      	subs	r3, r0, #0
 8005234:	d007      	beq.n	8005246 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800523a:	2220      	movs	r2, #32
 800523c:	431a      	orrs	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005242:	2303      	movs	r3, #3
 8005244:	e000      	b.n	8005248 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	0018      	movs	r0, r3
 800524a:	46bd      	mov	sp, r7
 800524c:	b004      	add	sp, #16
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b082      	sub	sp, #8
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e01e      	b.n	80052a0 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	223d      	movs	r2, #61	; 0x3d
 8005266:	5c9b      	ldrb	r3, [r3, r2]
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d107      	bne.n	800527e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	223c      	movs	r2, #60	; 0x3c
 8005272:	2100      	movs	r1, #0
 8005274:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	0018      	movs	r0, r3
 800527a:	f000 f815 	bl	80052a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	223d      	movs	r2, #61	; 0x3d
 8005282:	2102      	movs	r1, #2
 8005284:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	3304      	adds	r3, #4
 800528e:	0019      	movs	r1, r3
 8005290:	0010      	movs	r0, r2
 8005292:	f000 f969 	bl	8005568 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	223d      	movs	r2, #61	; 0x3d
 800529a:	2101      	movs	r1, #1
 800529c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	0018      	movs	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	b002      	add	sp, #8
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80052b0:	46c0      	nop			; (mov r8, r8)
 80052b2:	46bd      	mov	sp, r7
 80052b4:	b002      	add	sp, #8
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2101      	movs	r1, #1
 80052cc:	430a      	orrs	r2, r1
 80052ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	2207      	movs	r2, #7
 80052d8:	4013      	ands	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b06      	cmp	r3, #6
 80052e0:	d007      	beq.n	80052f2 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	2101      	movs	r1, #1
 80052ee:	430a      	orrs	r2, r1
 80052f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	0018      	movs	r0, r3
 80052f6:	46bd      	mov	sp, r7
 80052f8:	b004      	add	sp, #16
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	2202      	movs	r2, #2
 800530c:	4013      	ands	r3, r2
 800530e:	2b02      	cmp	r3, #2
 8005310:	d124      	bne.n	800535c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	2202      	movs	r2, #2
 800531a:	4013      	ands	r3, r2
 800531c:	2b02      	cmp	r3, #2
 800531e:	d11d      	bne.n	800535c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	2203      	movs	r2, #3
 8005326:	4252      	negs	r2, r2
 8005328:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2201      	movs	r2, #1
 800532e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	699b      	ldr	r3, [r3, #24]
 8005336:	2203      	movs	r2, #3
 8005338:	4013      	ands	r3, r2
 800533a:	d004      	beq.n	8005346 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	0018      	movs	r0, r3
 8005340:	f000 f8fa 	bl	8005538 <HAL_TIM_IC_CaptureCallback>
 8005344:	e007      	b.n	8005356 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	0018      	movs	r0, r3
 800534a:	f000 f8ed 	bl	8005528 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	0018      	movs	r0, r3
 8005352:	f000 f8f9 	bl	8005548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	2204      	movs	r2, #4
 8005364:	4013      	ands	r3, r2
 8005366:	2b04      	cmp	r3, #4
 8005368:	d125      	bne.n	80053b6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	2204      	movs	r2, #4
 8005372:	4013      	ands	r3, r2
 8005374:	2b04      	cmp	r3, #4
 8005376:	d11e      	bne.n	80053b6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2205      	movs	r2, #5
 800537e:	4252      	negs	r2, r2
 8005380:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2202      	movs	r2, #2
 8005386:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	699a      	ldr	r2, [r3, #24]
 800538e:	23c0      	movs	r3, #192	; 0xc0
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	4013      	ands	r3, r2
 8005394:	d004      	beq.n	80053a0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	0018      	movs	r0, r3
 800539a:	f000 f8cd 	bl	8005538 <HAL_TIM_IC_CaptureCallback>
 800539e:	e007      	b.n	80053b0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	0018      	movs	r0, r3
 80053a4:	f000 f8c0 	bl	8005528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	0018      	movs	r0, r3
 80053ac:	f000 f8cc 	bl	8005548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	2208      	movs	r2, #8
 80053be:	4013      	ands	r3, r2
 80053c0:	2b08      	cmp	r3, #8
 80053c2:	d124      	bne.n	800540e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	2208      	movs	r2, #8
 80053cc:	4013      	ands	r3, r2
 80053ce:	2b08      	cmp	r3, #8
 80053d0:	d11d      	bne.n	800540e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2209      	movs	r2, #9
 80053d8:	4252      	negs	r2, r2
 80053da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2204      	movs	r2, #4
 80053e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	69db      	ldr	r3, [r3, #28]
 80053e8:	2203      	movs	r2, #3
 80053ea:	4013      	ands	r3, r2
 80053ec:	d004      	beq.n	80053f8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	0018      	movs	r0, r3
 80053f2:	f000 f8a1 	bl	8005538 <HAL_TIM_IC_CaptureCallback>
 80053f6:	e007      	b.n	8005408 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	0018      	movs	r0, r3
 80053fc:	f000 f894 	bl	8005528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	0018      	movs	r0, r3
 8005404:	f000 f8a0 	bl	8005548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	2210      	movs	r2, #16
 8005416:	4013      	ands	r3, r2
 8005418:	2b10      	cmp	r3, #16
 800541a:	d125      	bne.n	8005468 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	2210      	movs	r2, #16
 8005424:	4013      	ands	r3, r2
 8005426:	2b10      	cmp	r3, #16
 8005428:	d11e      	bne.n	8005468 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2211      	movs	r2, #17
 8005430:	4252      	negs	r2, r2
 8005432:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2208      	movs	r2, #8
 8005438:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69da      	ldr	r2, [r3, #28]
 8005440:	23c0      	movs	r3, #192	; 0xc0
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4013      	ands	r3, r2
 8005446:	d004      	beq.n	8005452 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	0018      	movs	r0, r3
 800544c:	f000 f874 	bl	8005538 <HAL_TIM_IC_CaptureCallback>
 8005450:	e007      	b.n	8005462 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	0018      	movs	r0, r3
 8005456:	f000 f867 	bl	8005528 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	0018      	movs	r0, r3
 800545e:	f000 f873 	bl	8005548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	2201      	movs	r2, #1
 8005470:	4013      	ands	r3, r2
 8005472:	2b01      	cmp	r3, #1
 8005474:	d10f      	bne.n	8005496 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	2201      	movs	r2, #1
 800547e:	4013      	ands	r3, r2
 8005480:	2b01      	cmp	r3, #1
 8005482:	d108      	bne.n	8005496 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2202      	movs	r2, #2
 800548a:	4252      	negs	r2, r2
 800548c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	0018      	movs	r0, r3
 8005492:	f7fc ffbd 	bl	8002410 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	2280      	movs	r2, #128	; 0x80
 800549e:	4013      	ands	r3, r2
 80054a0:	2b80      	cmp	r3, #128	; 0x80
 80054a2:	d10f      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	2280      	movs	r2, #128	; 0x80
 80054ac:	4013      	ands	r3, r2
 80054ae:	2b80      	cmp	r3, #128	; 0x80
 80054b0:	d108      	bne.n	80054c4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2281      	movs	r2, #129	; 0x81
 80054b8:	4252      	negs	r2, r2
 80054ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	0018      	movs	r0, r3
 80054c0:	f000 f8d0 	bl	8005664 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	2240      	movs	r2, #64	; 0x40
 80054cc:	4013      	ands	r3, r2
 80054ce:	2b40      	cmp	r3, #64	; 0x40
 80054d0:	d10f      	bne.n	80054f2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	2240      	movs	r2, #64	; 0x40
 80054da:	4013      	ands	r3, r2
 80054dc:	2b40      	cmp	r3, #64	; 0x40
 80054de:	d108      	bne.n	80054f2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2241      	movs	r2, #65	; 0x41
 80054e6:	4252      	negs	r2, r2
 80054e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	0018      	movs	r0, r3
 80054ee:	f000 f833 	bl	8005558 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	2220      	movs	r2, #32
 80054fa:	4013      	ands	r3, r2
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d10f      	bne.n	8005520 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	2220      	movs	r2, #32
 8005508:	4013      	ands	r3, r2
 800550a:	2b20      	cmp	r3, #32
 800550c:	d108      	bne.n	8005520 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2221      	movs	r2, #33	; 0x21
 8005514:	4252      	negs	r2, r2
 8005516:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	0018      	movs	r0, r3
 800551c:	f000 f89a 	bl	8005654 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005520:	46c0      	nop			; (mov r8, r8)
 8005522:	46bd      	mov	sp, r7
 8005524:	b002      	add	sp, #8
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005530:	46c0      	nop			; (mov r8, r8)
 8005532:	46bd      	mov	sp, r7
 8005534:	b002      	add	sp, #8
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005540:	46c0      	nop			; (mov r8, r8)
 8005542:	46bd      	mov	sp, r7
 8005544:	b002      	add	sp, #8
 8005546:	bd80      	pop	{r7, pc}

08005548 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005550:	46c0      	nop			; (mov r8, r8)
 8005552:	46bd      	mov	sp, r7
 8005554:	b002      	add	sp, #8
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005560:	46c0      	nop			; (mov r8, r8)
 8005562:	46bd      	mov	sp, r7
 8005564:	b002      	add	sp, #8
 8005566:	bd80      	pop	{r7, pc}

08005568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a2f      	ldr	r2, [pc, #188]	; (8005638 <TIM_Base_SetConfig+0xd0>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d003      	beq.n	8005588 <TIM_Base_SetConfig+0x20>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a2e      	ldr	r2, [pc, #184]	; (800563c <TIM_Base_SetConfig+0xd4>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d108      	bne.n	800559a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2270      	movs	r2, #112	; 0x70
 800558c:	4393      	bics	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a26      	ldr	r2, [pc, #152]	; (8005638 <TIM_Base_SetConfig+0xd0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d013      	beq.n	80055ca <TIM_Base_SetConfig+0x62>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a25      	ldr	r2, [pc, #148]	; (800563c <TIM_Base_SetConfig+0xd4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d00f      	beq.n	80055ca <TIM_Base_SetConfig+0x62>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a24      	ldr	r2, [pc, #144]	; (8005640 <TIM_Base_SetConfig+0xd8>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00b      	beq.n	80055ca <TIM_Base_SetConfig+0x62>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a23      	ldr	r2, [pc, #140]	; (8005644 <TIM_Base_SetConfig+0xdc>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d007      	beq.n	80055ca <TIM_Base_SetConfig+0x62>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a22      	ldr	r2, [pc, #136]	; (8005648 <TIM_Base_SetConfig+0xe0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d003      	beq.n	80055ca <TIM_Base_SetConfig+0x62>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a21      	ldr	r2, [pc, #132]	; (800564c <TIM_Base_SetConfig+0xe4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d108      	bne.n	80055dc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4a20      	ldr	r2, [pc, #128]	; (8005650 <TIM_Base_SetConfig+0xe8>)
 80055ce:	4013      	ands	r3, r2
 80055d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4313      	orrs	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2280      	movs	r2, #128	; 0x80
 80055e0:	4393      	bics	r3, r2
 80055e2:	001a      	movs	r2, r3
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	695b      	ldr	r3, [r3, #20]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	689a      	ldr	r2, [r3, #8]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a0c      	ldr	r2, [pc, #48]	; (8005638 <TIM_Base_SetConfig+0xd0>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d00b      	beq.n	8005622 <TIM_Base_SetConfig+0xba>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a0d      	ldr	r2, [pc, #52]	; (8005644 <TIM_Base_SetConfig+0xdc>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d007      	beq.n	8005622 <TIM_Base_SetConfig+0xba>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a0c      	ldr	r2, [pc, #48]	; (8005648 <TIM_Base_SetConfig+0xe0>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d003      	beq.n	8005622 <TIM_Base_SetConfig+0xba>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a0b      	ldr	r2, [pc, #44]	; (800564c <TIM_Base_SetConfig+0xe4>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d103      	bne.n	800562a <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	691a      	ldr	r2, [r3, #16]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2201      	movs	r2, #1
 800562e:	615a      	str	r2, [r3, #20]
}
 8005630:	46c0      	nop			; (mov r8, r8)
 8005632:	46bd      	mov	sp, r7
 8005634:	b004      	add	sp, #16
 8005636:	bd80      	pop	{r7, pc}
 8005638:	40012c00 	.word	0x40012c00
 800563c:	40000400 	.word	0x40000400
 8005640:	40002000 	.word	0x40002000
 8005644:	40014000 	.word	0x40014000
 8005648:	40014400 	.word	0x40014400
 800564c:	40014800 	.word	0x40014800
 8005650:	fffffcff 	.word	0xfffffcff

08005654 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800565c:	46c0      	nop			; (mov r8, r8)
 800565e:	46bd      	mov	sp, r7
 8005660:	b002      	add	sp, #8
 8005662:	bd80      	pop	{r7, pc}

08005664 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800566c:	46c0      	nop			; (mov r8, r8)
 800566e:	46bd      	mov	sp, r7
 8005670:	b002      	add	sp, #8
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e044      	b.n	8005710 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800568a:	2b00      	cmp	r3, #0
 800568c:	d107      	bne.n	800569e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2270      	movs	r2, #112	; 0x70
 8005692:	2100      	movs	r1, #0
 8005694:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	0018      	movs	r0, r3
 800569a:	f7fd fa6f 	bl	8002b7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2224      	movs	r2, #36	; 0x24
 80056a2:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2101      	movs	r1, #1
 80056b0:	438a      	bics	r2, r1
 80056b2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	0018      	movs	r0, r3
 80056b8:	f000 f830 	bl	800571c <UART_SetConfig>
 80056bc:	0003      	movs	r3, r0
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d101      	bne.n	80056c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e024      	b.n	8005710 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d003      	beq.n	80056d6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	0018      	movs	r0, r3
 80056d2:	f000 f9a9 	bl	8005a28 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	490d      	ldr	r1, [pc, #52]	; (8005718 <HAL_UART_Init+0xa4>)
 80056e2:	400a      	ands	r2, r1
 80056e4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	689a      	ldr	r2, [r3, #8]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2108      	movs	r1, #8
 80056f2:	438a      	bics	r2, r1
 80056f4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2101      	movs	r1, #1
 8005702:	430a      	orrs	r2, r1
 8005704:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	0018      	movs	r0, r3
 800570a:	f000 fa41 	bl	8005b90 <UART_CheckIdleState>
 800570e:	0003      	movs	r3, r0
}
 8005710:	0018      	movs	r0, r3
 8005712:	46bd      	mov	sp, r7
 8005714:	b002      	add	sp, #8
 8005716:	bd80      	pop	{r7, pc}
 8005718:	fffff7ff 	.word	0xfffff7ff

0800571c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b088      	sub	sp, #32
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005724:	2300      	movs	r3, #0
 8005726:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8005728:	2317      	movs	r3, #23
 800572a:	18fb      	adds	r3, r7, r3
 800572c:	2200      	movs	r2, #0
 800572e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	431a      	orrs	r2, r3
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	431a      	orrs	r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	69db      	ldr	r3, [r3, #28]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4aad      	ldr	r2, [pc, #692]	; (8005a04 <UART_SetConfig+0x2e8>)
 8005750:	4013      	ands	r3, r2
 8005752:	0019      	movs	r1, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	430a      	orrs	r2, r1
 800575c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	4aa8      	ldr	r2, [pc, #672]	; (8005a08 <UART_SetConfig+0x2ec>)
 8005766:	4013      	ands	r3, r2
 8005768:	0019      	movs	r1, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68da      	ldr	r2, [r3, #12]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	4a9f      	ldr	r2, [pc, #636]	; (8005a0c <UART_SetConfig+0x2f0>)
 800578e:	4013      	ands	r3, r2
 8005790:	0019      	movs	r1, r3
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	430a      	orrs	r2, r1
 800579a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a9b      	ldr	r2, [pc, #620]	; (8005a10 <UART_SetConfig+0x2f4>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d125      	bne.n	80057f2 <UART_SetConfig+0xd6>
 80057a6:	4b9b      	ldr	r3, [pc, #620]	; (8005a14 <UART_SetConfig+0x2f8>)
 80057a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057aa:	2203      	movs	r2, #3
 80057ac:	4013      	ands	r3, r2
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d00f      	beq.n	80057d2 <UART_SetConfig+0xb6>
 80057b2:	d304      	bcc.n	80057be <UART_SetConfig+0xa2>
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d011      	beq.n	80057dc <UART_SetConfig+0xc0>
 80057b8:	2b03      	cmp	r3, #3
 80057ba:	d005      	beq.n	80057c8 <UART_SetConfig+0xac>
 80057bc:	e013      	b.n	80057e6 <UART_SetConfig+0xca>
 80057be:	231f      	movs	r3, #31
 80057c0:	18fb      	adds	r3, r7, r3
 80057c2:	2200      	movs	r2, #0
 80057c4:	701a      	strb	r2, [r3, #0]
 80057c6:	e022      	b.n	800580e <UART_SetConfig+0xf2>
 80057c8:	231f      	movs	r3, #31
 80057ca:	18fb      	adds	r3, r7, r3
 80057cc:	2202      	movs	r2, #2
 80057ce:	701a      	strb	r2, [r3, #0]
 80057d0:	e01d      	b.n	800580e <UART_SetConfig+0xf2>
 80057d2:	231f      	movs	r3, #31
 80057d4:	18fb      	adds	r3, r7, r3
 80057d6:	2204      	movs	r2, #4
 80057d8:	701a      	strb	r2, [r3, #0]
 80057da:	e018      	b.n	800580e <UART_SetConfig+0xf2>
 80057dc:	231f      	movs	r3, #31
 80057de:	18fb      	adds	r3, r7, r3
 80057e0:	2208      	movs	r2, #8
 80057e2:	701a      	strb	r2, [r3, #0]
 80057e4:	e013      	b.n	800580e <UART_SetConfig+0xf2>
 80057e6:	231f      	movs	r3, #31
 80057e8:	18fb      	adds	r3, r7, r3
 80057ea:	2210      	movs	r2, #16
 80057ec:	701a      	strb	r2, [r3, #0]
 80057ee:	46c0      	nop			; (mov r8, r8)
 80057f0:	e00d      	b.n	800580e <UART_SetConfig+0xf2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a88      	ldr	r2, [pc, #544]	; (8005a18 <UART_SetConfig+0x2fc>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d104      	bne.n	8005806 <UART_SetConfig+0xea>
 80057fc:	231f      	movs	r3, #31
 80057fe:	18fb      	adds	r3, r7, r3
 8005800:	2200      	movs	r2, #0
 8005802:	701a      	strb	r2, [r3, #0]
 8005804:	e003      	b.n	800580e <UART_SetConfig+0xf2>
 8005806:	231f      	movs	r3, #31
 8005808:	18fb      	adds	r3, r7, r3
 800580a:	2210      	movs	r2, #16
 800580c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	69da      	ldr	r2, [r3, #28]
 8005812:	2380      	movs	r3, #128	; 0x80
 8005814:	021b      	lsls	r3, r3, #8
 8005816:	429a      	cmp	r2, r3
 8005818:	d000      	beq.n	800581c <UART_SetConfig+0x100>
 800581a:	e07d      	b.n	8005918 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 800581c:	231f      	movs	r3, #31
 800581e:	18fb      	adds	r3, r7, r3
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	2b02      	cmp	r3, #2
 8005824:	d01c      	beq.n	8005860 <UART_SetConfig+0x144>
 8005826:	dc02      	bgt.n	800582e <UART_SetConfig+0x112>
 8005828:	2b00      	cmp	r3, #0
 800582a:	d005      	beq.n	8005838 <UART_SetConfig+0x11c>
 800582c:	e04b      	b.n	80058c6 <UART_SetConfig+0x1aa>
 800582e:	2b04      	cmp	r3, #4
 8005830:	d025      	beq.n	800587e <UART_SetConfig+0x162>
 8005832:	2b08      	cmp	r3, #8
 8005834:	d037      	beq.n	80058a6 <UART_SetConfig+0x18a>
 8005836:	e046      	b.n	80058c6 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005838:	f7fe fcda 	bl	80041f0 <HAL_RCC_GetPCLK1Freq>
 800583c:	0003      	movs	r3, r0
 800583e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	005a      	lsls	r2, r3, #1
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	085b      	lsrs	r3, r3, #1
 800584a:	18d2      	adds	r2, r2, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	0019      	movs	r1, r3
 8005852:	0010      	movs	r0, r2
 8005854:	f7fa fc58 	bl	8000108 <__udivsi3>
 8005858:	0003      	movs	r3, r0
 800585a:	b29b      	uxth	r3, r3
 800585c:	61bb      	str	r3, [r7, #24]
        break;
 800585e:	e037      	b.n	80058d0 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	085b      	lsrs	r3, r3, #1
 8005866:	4a6d      	ldr	r2, [pc, #436]	; (8005a1c <UART_SetConfig+0x300>)
 8005868:	189a      	adds	r2, r3, r2
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	0019      	movs	r1, r3
 8005870:	0010      	movs	r0, r2
 8005872:	f7fa fc49 	bl	8000108 <__udivsi3>
 8005876:	0003      	movs	r3, r0
 8005878:	b29b      	uxth	r3, r3
 800587a:	61bb      	str	r3, [r7, #24]
        break;
 800587c:	e028      	b.n	80058d0 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800587e:	f7fe fc49 	bl	8004114 <HAL_RCC_GetSysClockFreq>
 8005882:	0003      	movs	r3, r0
 8005884:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	005a      	lsls	r2, r3, #1
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	085b      	lsrs	r3, r3, #1
 8005890:	18d2      	adds	r2, r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	0019      	movs	r1, r3
 8005898:	0010      	movs	r0, r2
 800589a:	f7fa fc35 	bl	8000108 <__udivsi3>
 800589e:	0003      	movs	r3, r0
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	61bb      	str	r3, [r7, #24]
        break;
 80058a4:	e014      	b.n	80058d0 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	085b      	lsrs	r3, r3, #1
 80058ac:	2280      	movs	r2, #128	; 0x80
 80058ae:	0252      	lsls	r2, r2, #9
 80058b0:	189a      	adds	r2, r3, r2
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	0019      	movs	r1, r3
 80058b8:	0010      	movs	r0, r2
 80058ba:	f7fa fc25 	bl	8000108 <__udivsi3>
 80058be:	0003      	movs	r3, r0
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	61bb      	str	r3, [r7, #24]
        break;
 80058c4:	e004      	b.n	80058d0 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 80058c6:	2317      	movs	r3, #23
 80058c8:	18fb      	adds	r3, r7, r3
 80058ca:	2201      	movs	r2, #1
 80058cc:	701a      	strb	r2, [r3, #0]
        break;
 80058ce:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	2b0f      	cmp	r3, #15
 80058d4:	d91b      	bls.n	800590e <UART_SetConfig+0x1f2>
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	4a51      	ldr	r2, [pc, #324]	; (8005a20 <UART_SetConfig+0x304>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d817      	bhi.n	800590e <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	200a      	movs	r0, #10
 80058e4:	183b      	adds	r3, r7, r0
 80058e6:	210f      	movs	r1, #15
 80058e8:	438a      	bics	r2, r1
 80058ea:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	085b      	lsrs	r3, r3, #1
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	2207      	movs	r2, #7
 80058f4:	4013      	ands	r3, r2
 80058f6:	b299      	uxth	r1, r3
 80058f8:	183b      	adds	r3, r7, r0
 80058fa:	183a      	adds	r2, r7, r0
 80058fc:	8812      	ldrh	r2, [r2, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	183a      	adds	r2, r7, r0
 8005908:	8812      	ldrh	r2, [r2, #0]
 800590a:	60da      	str	r2, [r3, #12]
 800590c:	e06c      	b.n	80059e8 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 800590e:	2317      	movs	r3, #23
 8005910:	18fb      	adds	r3, r7, r3
 8005912:	2201      	movs	r2, #1
 8005914:	701a      	strb	r2, [r3, #0]
 8005916:	e067      	b.n	80059e8 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8005918:	231f      	movs	r3, #31
 800591a:	18fb      	adds	r3, r7, r3
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d01b      	beq.n	800595a <UART_SetConfig+0x23e>
 8005922:	dc02      	bgt.n	800592a <UART_SetConfig+0x20e>
 8005924:	2b00      	cmp	r3, #0
 8005926:	d005      	beq.n	8005934 <UART_SetConfig+0x218>
 8005928:	e049      	b.n	80059be <UART_SetConfig+0x2a2>
 800592a:	2b04      	cmp	r3, #4
 800592c:	d024      	beq.n	8005978 <UART_SetConfig+0x25c>
 800592e:	2b08      	cmp	r3, #8
 8005930:	d035      	beq.n	800599e <UART_SetConfig+0x282>
 8005932:	e044      	b.n	80059be <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005934:	f7fe fc5c 	bl	80041f0 <HAL_RCC_GetPCLK1Freq>
 8005938:	0003      	movs	r3, r0
 800593a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	085a      	lsrs	r2, r3, #1
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	18d2      	adds	r2, r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	0019      	movs	r1, r3
 800594c:	0010      	movs	r0, r2
 800594e:	f7fa fbdb 	bl	8000108 <__udivsi3>
 8005952:	0003      	movs	r3, r0
 8005954:	b29b      	uxth	r3, r3
 8005956:	61bb      	str	r3, [r7, #24]
        break;
 8005958:	e036      	b.n	80059c8 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	085b      	lsrs	r3, r3, #1
 8005960:	4a30      	ldr	r2, [pc, #192]	; (8005a24 <UART_SetConfig+0x308>)
 8005962:	189a      	adds	r2, r3, r2
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	0019      	movs	r1, r3
 800596a:	0010      	movs	r0, r2
 800596c:	f7fa fbcc 	bl	8000108 <__udivsi3>
 8005970:	0003      	movs	r3, r0
 8005972:	b29b      	uxth	r3, r3
 8005974:	61bb      	str	r3, [r7, #24]
        break;
 8005976:	e027      	b.n	80059c8 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005978:	f7fe fbcc 	bl	8004114 <HAL_RCC_GetSysClockFreq>
 800597c:	0003      	movs	r3, r0
 800597e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	085a      	lsrs	r2, r3, #1
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	18d2      	adds	r2, r2, r3
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	0019      	movs	r1, r3
 8005990:	0010      	movs	r0, r2
 8005992:	f7fa fbb9 	bl	8000108 <__udivsi3>
 8005996:	0003      	movs	r3, r0
 8005998:	b29b      	uxth	r3, r3
 800599a:	61bb      	str	r3, [r7, #24]
        break;
 800599c:	e014      	b.n	80059c8 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	085b      	lsrs	r3, r3, #1
 80059a4:	2280      	movs	r2, #128	; 0x80
 80059a6:	0212      	lsls	r2, r2, #8
 80059a8:	189a      	adds	r2, r3, r2
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	0019      	movs	r1, r3
 80059b0:	0010      	movs	r0, r2
 80059b2:	f7fa fba9 	bl	8000108 <__udivsi3>
 80059b6:	0003      	movs	r3, r0
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	61bb      	str	r3, [r7, #24]
        break;
 80059bc:	e004      	b.n	80059c8 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 80059be:	2317      	movs	r3, #23
 80059c0:	18fb      	adds	r3, r7, r3
 80059c2:	2201      	movs	r2, #1
 80059c4:	701a      	strb	r2, [r3, #0]
        break;
 80059c6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	2b0f      	cmp	r3, #15
 80059cc:	d908      	bls.n	80059e0 <UART_SetConfig+0x2c4>
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	4a13      	ldr	r2, [pc, #76]	; (8005a20 <UART_SetConfig+0x304>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d804      	bhi.n	80059e0 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	60da      	str	r2, [r3, #12]
 80059de:	e003      	b.n	80059e8 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80059e0:	2317      	movs	r3, #23
 80059e2:	18fb      	adds	r3, r7, r3
 80059e4:	2201      	movs	r2, #1
 80059e6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80059f4:	2317      	movs	r3, #23
 80059f6:	18fb      	adds	r3, r7, r3
 80059f8:	781b      	ldrb	r3, [r3, #0]
}
 80059fa:	0018      	movs	r0, r3
 80059fc:	46bd      	mov	sp, r7
 80059fe:	b008      	add	sp, #32
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	46c0      	nop			; (mov r8, r8)
 8005a04:	ffff69f3 	.word	0xffff69f3
 8005a08:	ffffcfff 	.word	0xffffcfff
 8005a0c:	fffff4ff 	.word	0xfffff4ff
 8005a10:	40013800 	.word	0x40013800
 8005a14:	40021000 	.word	0x40021000
 8005a18:	40004400 	.word	0x40004400
 8005a1c:	00f42400 	.word	0x00f42400
 8005a20:	0000ffff 	.word	0x0000ffff
 8005a24:	007a1200 	.word	0x007a1200

08005a28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a34:	2201      	movs	r2, #1
 8005a36:	4013      	ands	r3, r2
 8005a38:	d00b      	beq.n	8005a52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	4a4a      	ldr	r2, [pc, #296]	; (8005b6c <UART_AdvFeatureConfig+0x144>)
 8005a42:	4013      	ands	r3, r2
 8005a44:	0019      	movs	r1, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	2202      	movs	r2, #2
 8005a58:	4013      	ands	r3, r2
 8005a5a:	d00b      	beq.n	8005a74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	4a43      	ldr	r2, [pc, #268]	; (8005b70 <UART_AdvFeatureConfig+0x148>)
 8005a64:	4013      	ands	r3, r2
 8005a66:	0019      	movs	r1, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	430a      	orrs	r2, r1
 8005a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a78:	2204      	movs	r2, #4
 8005a7a:	4013      	ands	r3, r2
 8005a7c:	d00b      	beq.n	8005a96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	4a3b      	ldr	r2, [pc, #236]	; (8005b74 <UART_AdvFeatureConfig+0x14c>)
 8005a86:	4013      	ands	r3, r2
 8005a88:	0019      	movs	r1, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	2208      	movs	r2, #8
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	d00b      	beq.n	8005ab8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	4a34      	ldr	r2, [pc, #208]	; (8005b78 <UART_AdvFeatureConfig+0x150>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	0019      	movs	r1, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	430a      	orrs	r2, r1
 8005ab6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005abc:	2210      	movs	r2, #16
 8005abe:	4013      	ands	r3, r2
 8005ac0:	d00b      	beq.n	8005ada <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	4a2c      	ldr	r2, [pc, #176]	; (8005b7c <UART_AdvFeatureConfig+0x154>)
 8005aca:	4013      	ands	r3, r2
 8005acc:	0019      	movs	r1, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	2220      	movs	r2, #32
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	d00b      	beq.n	8005afc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	4a25      	ldr	r2, [pc, #148]	; (8005b80 <UART_AdvFeatureConfig+0x158>)
 8005aec:	4013      	ands	r3, r2
 8005aee:	0019      	movs	r1, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b00:	2240      	movs	r2, #64	; 0x40
 8005b02:	4013      	ands	r3, r2
 8005b04:	d01d      	beq.n	8005b42 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	4a1d      	ldr	r2, [pc, #116]	; (8005b84 <UART_AdvFeatureConfig+0x15c>)
 8005b0e:	4013      	ands	r3, r2
 8005b10:	0019      	movs	r1, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	430a      	orrs	r2, r1
 8005b1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b22:	2380      	movs	r3, #128	; 0x80
 8005b24:	035b      	lsls	r3, r3, #13
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d10b      	bne.n	8005b42 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	4a15      	ldr	r2, [pc, #84]	; (8005b88 <UART_AdvFeatureConfig+0x160>)
 8005b32:	4013      	ands	r3, r2
 8005b34:	0019      	movs	r1, r3
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	2280      	movs	r2, #128	; 0x80
 8005b48:	4013      	ands	r3, r2
 8005b4a:	d00b      	beq.n	8005b64 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	4a0e      	ldr	r2, [pc, #56]	; (8005b8c <UART_AdvFeatureConfig+0x164>)
 8005b54:	4013      	ands	r3, r2
 8005b56:	0019      	movs	r1, r3
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	430a      	orrs	r2, r1
 8005b62:	605a      	str	r2, [r3, #4]
  }
}
 8005b64:	46c0      	nop			; (mov r8, r8)
 8005b66:	46bd      	mov	sp, r7
 8005b68:	b002      	add	sp, #8
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	fffdffff 	.word	0xfffdffff
 8005b70:	fffeffff 	.word	0xfffeffff
 8005b74:	fffbffff 	.word	0xfffbffff
 8005b78:	ffff7fff 	.word	0xffff7fff
 8005b7c:	ffffefff 	.word	0xffffefff
 8005b80:	ffffdfff 	.word	0xffffdfff
 8005b84:	ffefffff 	.word	0xffefffff
 8005b88:	ff9fffff 	.word	0xff9fffff
 8005b8c:	fff7ffff 	.word	0xfff7ffff

08005b90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af02      	add	r7, sp, #8
 8005b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005b9e:	f7fd f903 	bl	8002da8 <HAL_GetTick>
 8005ba2:	0003      	movs	r3, r0
 8005ba4:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2208      	movs	r2, #8
 8005bae:	4013      	ands	r3, r2
 8005bb0:	2b08      	cmp	r3, #8
 8005bb2:	d10d      	bne.n	8005bd0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	2380      	movs	r3, #128	; 0x80
 8005bb8:	0399      	lsls	r1, r3, #14
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	4b16      	ldr	r3, [pc, #88]	; (8005c18 <UART_CheckIdleState+0x88>)
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	0013      	movs	r3, r2
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f000 f82a 	bl	8005c1c <UART_WaitOnFlagUntilTimeout>
 8005bc8:	1e03      	subs	r3, r0, #0
 8005bca:	d001      	beq.n	8005bd0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bcc:	2303      	movs	r3, #3
 8005bce:	e01f      	b.n	8005c10 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2204      	movs	r2, #4
 8005bd8:	4013      	ands	r3, r2
 8005bda:	2b04      	cmp	r3, #4
 8005bdc:	d10d      	bne.n	8005bfa <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	2380      	movs	r3, #128	; 0x80
 8005be2:	03d9      	lsls	r1, r3, #15
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	4b0c      	ldr	r3, [pc, #48]	; (8005c18 <UART_CheckIdleState+0x88>)
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	0013      	movs	r3, r2
 8005bec:	2200      	movs	r2, #0
 8005bee:	f000 f815 	bl	8005c1c <UART_WaitOnFlagUntilTimeout>
 8005bf2:	1e03      	subs	r3, r0, #0
 8005bf4:	d001      	beq.n	8005bfa <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	e00a      	b.n	8005c10 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2220      	movs	r2, #32
 8005c04:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2270      	movs	r2, #112	; 0x70
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	0018      	movs	r0, r3
 8005c12:	46bd      	mov	sp, r7
 8005c14:	b004      	add	sp, #16
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	01ffffff 	.word	0x01ffffff

08005c1c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	603b      	str	r3, [r7, #0]
 8005c28:	1dfb      	adds	r3, r7, #7
 8005c2a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c2c:	e05d      	b.n	8005cea <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	3301      	adds	r3, #1
 8005c32:	d05a      	beq.n	8005cea <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c34:	f7fd f8b8 	bl	8002da8 <HAL_GetTick>
 8005c38:	0002      	movs	r2, r0
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	1ad3      	subs	r3, r2, r3
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d302      	bcc.n	8005c4a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d11b      	bne.n	8005c82 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	492f      	ldr	r1, [pc, #188]	; (8005d14 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005c56:	400a      	ands	r2, r1
 8005c58:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689a      	ldr	r2, [r3, #8]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2101      	movs	r1, #1
 8005c66:	438a      	bics	r2, r1
 8005c68:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2220      	movs	r2, #32
 8005c6e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2220      	movs	r2, #32
 8005c74:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2270      	movs	r2, #112	; 0x70
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e043      	b.n	8005d0a <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2204      	movs	r2, #4
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	d02d      	beq.n	8005cea <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69da      	ldr	r2, [r3, #28]
 8005c94:	2380      	movs	r3, #128	; 0x80
 8005c96:	011b      	lsls	r3, r3, #4
 8005c98:	401a      	ands	r2, r3
 8005c9a:	2380      	movs	r3, #128	; 0x80
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d123      	bne.n	8005cea <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	2280      	movs	r2, #128	; 0x80
 8005ca8:	0112      	lsls	r2, r2, #4
 8005caa:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4917      	ldr	r1, [pc, #92]	; (8005d14 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8005cb8:	400a      	ands	r2, r1
 8005cba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	438a      	bics	r2, r1
 8005cca:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2220      	movs	r2, #32
 8005cd0:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2220      	movs	r2, #32
 8005cd6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2270      	movs	r2, #112	; 0x70
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e00f      	b.n	8005d0a <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	425a      	negs	r2, r3
 8005cfa:	4153      	adcs	r3, r2
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	001a      	movs	r2, r3
 8005d00:	1dfb      	adds	r3, r7, #7
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d092      	beq.n	8005c2e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	b004      	add	sp, #16
 8005d10:	bd80      	pop	{r7, pc}
 8005d12:	46c0      	nop			; (mov r8, r8)
 8005d14:	fffffe5f 	.word	0xfffffe5f

08005d18 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	0002      	movs	r2, r0
 8005d20:	1dbb      	adds	r3, r7, #6
 8005d22:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005d24:	2300      	movs	r3, #0
 8005d26:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005d28:	1dbb      	adds	r3, r7, #6
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	5e9b      	ldrsh	r3, [r3, r2]
 8005d2e:	2b84      	cmp	r3, #132	; 0x84
 8005d30:	d006      	beq.n	8005d40 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8005d32:	1dbb      	adds	r3, r7, #6
 8005d34:	2200      	movs	r2, #0
 8005d36:	5e9a      	ldrsh	r2, [r3, r2]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	18d3      	adds	r3, r2, r3
 8005d3c:	3303      	adds	r3, #3
 8005d3e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005d40:	68fb      	ldr	r3, [r7, #12]
}
 8005d42:	0018      	movs	r0, r3
 8005d44:	46bd      	mov	sp, r7
 8005d46:	b004      	add	sp, #16
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005d4e:	f000 faa1 	bl	8006294 <vTaskStartScheduler>
  
  return osOK;
 8005d52:	2300      	movs	r3, #0
}
 8005d54:	0018      	movs	r0, r3
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005d5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d5c:	b089      	sub	sp, #36	; 0x24
 8005d5e:	af04      	add	r7, sp, #16
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d020      	beq.n	8005dae <osThreadCreate+0x54>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	699b      	ldr	r3, [r3, #24]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d01c      	beq.n	8005dae <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685c      	ldr	r4, [r3, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681d      	ldr	r5, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	691e      	ldr	r6, [r3, #16]
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2208      	movs	r2, #8
 8005d84:	5e9b      	ldrsh	r3, [r3, r2]
 8005d86:	0018      	movs	r0, r3
 8005d88:	f7ff ffc6 	bl	8005d18 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	695a      	ldr	r2, [r3, #20]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d94:	6839      	ldr	r1, [r7, #0]
 8005d96:	9302      	str	r3, [sp, #8]
 8005d98:	9201      	str	r2, [sp, #4]
 8005d9a:	9000      	str	r0, [sp, #0]
 8005d9c:	000b      	movs	r3, r1
 8005d9e:	0032      	movs	r2, r6
 8005da0:	0029      	movs	r1, r5
 8005da2:	0020      	movs	r0, r4
 8005da4:	f000 f8e3 	bl	8005f6e <xTaskCreateStatic>
 8005da8:	0003      	movs	r3, r0
 8005daa:	60fb      	str	r3, [r7, #12]
 8005dac:	e01d      	b.n	8005dea <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685c      	ldr	r4, [r3, #4]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005dba:	b29e      	uxth	r6, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2208      	movs	r2, #8
 8005dc0:	5e9b      	ldrsh	r3, [r3, r2]
 8005dc2:	0018      	movs	r0, r3
 8005dc4:	f7ff ffa8 	bl	8005d18 <makeFreeRtosPriority>
 8005dc8:	0001      	movs	r1, r0
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	230c      	movs	r3, #12
 8005dce:	18fb      	adds	r3, r7, r3
 8005dd0:	9301      	str	r3, [sp, #4]
 8005dd2:	9100      	str	r1, [sp, #0]
 8005dd4:	0013      	movs	r3, r2
 8005dd6:	0032      	movs	r2, r6
 8005dd8:	0029      	movs	r1, r5
 8005dda:	0020      	movs	r0, r4
 8005ddc:	f000 f90a 	bl	8005ff4 <xTaskCreate>
 8005de0:	0003      	movs	r3, r0
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d001      	beq.n	8005dea <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 8005de6:	2300      	movs	r3, #0
 8005de8:	e000      	b.n	8005dec <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005dea:	68fb      	ldr	r3, [r7, #12]
}
 8005dec:	0018      	movs	r0, r3
 8005dee:	46bd      	mov	sp, r7
 8005df0:	b005      	add	sp, #20
 8005df2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005df4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d001      	beq.n	8005e0a <osDelay+0x16>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	e000      	b.n	8005e0c <osDelay+0x18>
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	0018      	movs	r0, r3
 8005e0e:	f000 fa1b 	bl	8006248 <vTaskDelay>
  
  return osOK;
 8005e12:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005e14:	0018      	movs	r0, r3
 8005e16:	46bd      	mov	sp, r7
 8005e18:	b004      	add	sp, #16
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	3308      	adds	r3, #8
 8005e28:	001a      	movs	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	4252      	negs	r2, r2
 8005e34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3308      	adds	r3, #8
 8005e3a:	001a      	movs	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	3308      	adds	r3, #8
 8005e44:	001a      	movs	r2, r3
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e50:	46c0      	nop			; (mov r8, r8)
 8005e52:	46bd      	mov	sp, r7
 8005e54:	b002      	add	sp, #8
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b082      	sub	sp, #8
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e66:	46c0      	nop			; (mov r8, r8)
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	b002      	add	sp, #8
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b084      	sub	sp, #16
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	685b      	ldr	r3, [r3, #4]
 8005e7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	68fa      	ldr	r2, [r7, #12]
 8005e82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	683a      	ldr	r2, [r7, #0]
 8005e92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	683a      	ldr	r2, [r7, #0]
 8005e98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	1c5a      	adds	r2, r3, #1
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	601a      	str	r2, [r3, #0]
}
 8005eaa:	46c0      	nop			; (mov r8, r8)
 8005eac:	46bd      	mov	sp, r7
 8005eae:	b004      	add	sp, #16
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b084      	sub	sp, #16
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
 8005eba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	d103      	bne.n	8005ed0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	691b      	ldr	r3, [r3, #16]
 8005ecc:	60fb      	str	r3, [r7, #12]
 8005ece:	e00c      	b.n	8005eea <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	3308      	adds	r3, #8
 8005ed4:	60fb      	str	r3, [r7, #12]
 8005ed6:	e002      	b.n	8005ede <vListInsert+0x2c>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	60fb      	str	r3, [r7, #12]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68ba      	ldr	r2, [r7, #8]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d2f6      	bcs.n	8005ed8 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	68fa      	ldr	r2, [r7, #12]
 8005efe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	683a      	ldr	r2, [r7, #0]
 8005f04:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	1c5a      	adds	r2, r3, #1
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	601a      	str	r2, [r3, #0]
}
 8005f16:	46c0      	nop			; (mov r8, r8)
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	b004      	add	sp, #16
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b084      	sub	sp, #16
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	6892      	ldr	r2, [r2, #8]
 8005f34:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	6852      	ldr	r2, [r2, #4]
 8005f3e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	685b      	ldr	r3, [r3, #4]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d103      	bne.n	8005f52 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689a      	ldr	r2, [r3, #8]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	1e5a      	subs	r2, r3, #1
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
}
 8005f66:	0018      	movs	r0, r3
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	b004      	add	sp, #16
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005f6e:	b590      	push	{r4, r7, lr}
 8005f70:	b08d      	sub	sp, #52	; 0x34
 8005f72:	af04      	add	r7, sp, #16
 8005f74:	60f8      	str	r0, [r7, #12]
 8005f76:	60b9      	str	r1, [r7, #8]
 8005f78:	607a      	str	r2, [r7, #4]
 8005f7a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d101      	bne.n	8005f86 <xTaskCreateStatic+0x18>
 8005f82:	b672      	cpsid	i
 8005f84:	e7fe      	b.n	8005f84 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8005f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <xTaskCreateStatic+0x22>
 8005f8c:	b672      	cpsid	i
 8005f8e:	e7fe      	b.n	8005f8e <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f90:	2354      	movs	r3, #84	; 0x54
 8005f92:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	2b54      	cmp	r3, #84	; 0x54
 8005f98:	d001      	beq.n	8005f9e <xTaskCreateStatic+0x30>
 8005f9a:	b672      	cpsid	i
 8005f9c:	e7fe      	b.n	8005f9c <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d020      	beq.n	8005fe6 <xTaskCreateStatic+0x78>
 8005fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d01d      	beq.n	8005fe6 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fac:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fb2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	2251      	movs	r2, #81	; 0x51
 8005fb8:	2102      	movs	r1, #2
 8005fba:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005fbc:	683c      	ldr	r4, [r7, #0]
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	68b9      	ldr	r1, [r7, #8]
 8005fc2:	68f8      	ldr	r0, [r7, #12]
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	9303      	str	r3, [sp, #12]
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	9302      	str	r3, [sp, #8]
 8005fcc:	2318      	movs	r3, #24
 8005fce:	18fb      	adds	r3, r7, r3
 8005fd0:	9301      	str	r3, [sp, #4]
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	0023      	movs	r3, r4
 8005fd8:	f000 f858 	bl	800608c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	0018      	movs	r0, r3
 8005fe0:	f000 f8ce 	bl	8006180 <prvAddNewTaskToReadyList>
 8005fe4:	e001      	b.n	8005fea <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fea:	69bb      	ldr	r3, [r7, #24]
	}
 8005fec:	0018      	movs	r0, r3
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	b009      	add	sp, #36	; 0x24
 8005ff2:	bd90      	pop	{r4, r7, pc}

08005ff4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005ff4:	b590      	push	{r4, r7, lr}
 8005ff6:	b08d      	sub	sp, #52	; 0x34
 8005ff8:	af04      	add	r7, sp, #16
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	603b      	str	r3, [r7, #0]
 8006000:	1dbb      	adds	r3, r7, #6
 8006002:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006004:	1dbb      	adds	r3, r7, #6
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	0018      	movs	r0, r3
 800600c:	f000 fd80 	bl	8006b10 <pvPortMalloc>
 8006010:	0003      	movs	r3, r0
 8006012:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d010      	beq.n	800603c <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800601a:	2054      	movs	r0, #84	; 0x54
 800601c:	f000 fd78 	bl	8006b10 <pvPortMalloc>
 8006020:	0003      	movs	r3, r0
 8006022:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d003      	beq.n	8006032 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	631a      	str	r2, [r3, #48]	; 0x30
 8006030:	e006      	b.n	8006040 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	0018      	movs	r0, r3
 8006036:	f000 fe11 	bl	8006c5c <vPortFree>
 800603a:	e001      	b.n	8006040 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800603c:	2300      	movs	r3, #0
 800603e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d01a      	beq.n	800607c <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	2251      	movs	r2, #81	; 0x51
 800604a:	2100      	movs	r1, #0
 800604c:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800604e:	1dbb      	adds	r3, r7, #6
 8006050:	881a      	ldrh	r2, [r3, #0]
 8006052:	683c      	ldr	r4, [r7, #0]
 8006054:	68b9      	ldr	r1, [r7, #8]
 8006056:	68f8      	ldr	r0, [r7, #12]
 8006058:	2300      	movs	r3, #0
 800605a:	9303      	str	r3, [sp, #12]
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	9302      	str	r3, [sp, #8]
 8006060:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006062:	9301      	str	r3, [sp, #4]
 8006064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006066:	9300      	str	r3, [sp, #0]
 8006068:	0023      	movs	r3, r4
 800606a:	f000 f80f 	bl	800608c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	0018      	movs	r0, r3
 8006072:	f000 f885 	bl	8006180 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006076:	2301      	movs	r3, #1
 8006078:	61bb      	str	r3, [r7, #24]
 800607a:	e002      	b.n	8006082 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800607c:	2301      	movs	r3, #1
 800607e:	425b      	negs	r3, r3
 8006080:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006082:	69bb      	ldr	r3, [r7, #24]
	}
 8006084:	0018      	movs	r0, r3
 8006086:	46bd      	mov	sp, r7
 8006088:	b009      	add	sp, #36	; 0x24
 800608a:	bd90      	pop	{r4, r7, pc}

0800608c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
 8006098:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800609a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4936      	ldr	r1, [pc, #216]	; (800617c <prvInitialiseNewTask+0xf0>)
 80060a2:	468c      	mov	ip, r1
 80060a4:	4463      	add	r3, ip
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	18d3      	adds	r3, r2, r3
 80060aa:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	2207      	movs	r2, #7
 80060b0:	4393      	bics	r3, r2
 80060b2:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	2207      	movs	r2, #7
 80060b8:	4013      	ands	r3, r2
 80060ba:	d001      	beq.n	80060c0 <prvInitialiseNewTask+0x34>
 80060bc:	b672      	cpsid	i
 80060be:	e7fe      	b.n	80060be <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060c0:	2300      	movs	r3, #0
 80060c2:	617b      	str	r3, [r7, #20]
 80060c4:	e013      	b.n	80060ee <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	18d3      	adds	r3, r2, r3
 80060cc:	7818      	ldrb	r0, [r3, #0]
 80060ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060d0:	2134      	movs	r1, #52	; 0x34
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	18d3      	adds	r3, r2, r3
 80060d6:	185b      	adds	r3, r3, r1
 80060d8:	1c02      	adds	r2, r0, #0
 80060da:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	18d3      	adds	r3, r2, r3
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d006      	beq.n	80060f6 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	3301      	adds	r3, #1
 80060ec:	617b      	str	r3, [r7, #20]
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	2b0f      	cmp	r3, #15
 80060f2:	d9e8      	bls.n	80060c6 <prvInitialiseNewTask+0x3a>
 80060f4:	e000      	b.n	80060f8 <prvInitialiseNewTask+0x6c>
		{
			break;
 80060f6:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80060f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fa:	2243      	movs	r2, #67	; 0x43
 80060fc:	2100      	movs	r1, #0
 80060fe:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	2b06      	cmp	r3, #6
 8006104:	d901      	bls.n	800610a <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006106:	2306      	movs	r3, #6
 8006108:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800610a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610c:	6a3a      	ldr	r2, [r7, #32]
 800610e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006112:	6a3a      	ldr	r2, [r7, #32]
 8006114:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006118:	2200      	movs	r2, #0
 800611a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800611c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611e:	3304      	adds	r3, #4
 8006120:	0018      	movs	r0, r3
 8006122:	f7ff fe99 	bl	8005e58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006128:	3318      	adds	r3, #24
 800612a:	0018      	movs	r0, r3
 800612c:	f7ff fe94 	bl	8005e58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006134:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	2207      	movs	r2, #7
 800613a:	1ad2      	subs	r2, r2, r3
 800613c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006142:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006144:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006148:	2200      	movs	r2, #0
 800614a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800614c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800614e:	2250      	movs	r2, #80	; 0x50
 8006150:	2100      	movs	r1, #0
 8006152:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	68f9      	ldr	r1, [r7, #12]
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	0018      	movs	r0, r3
 800615c:	f000 fba8 	bl	80068b0 <pxPortInitialiseStack>
 8006160:	0002      	movs	r2, r0
 8006162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006164:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006170:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006172:	46c0      	nop			; (mov r8, r8)
 8006174:	46bd      	mov	sp, r7
 8006176:	b006      	add	sp, #24
 8006178:	bd80      	pop	{r7, pc}
 800617a:	46c0      	nop			; (mov r8, r8)
 800617c:	3fffffff 	.word	0x3fffffff

08006180 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b082      	sub	sp, #8
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006188:	f000 fc2a 	bl	80069e0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800618c:	4b28      	ldr	r3, [pc, #160]	; (8006230 <prvAddNewTaskToReadyList+0xb0>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	4b27      	ldr	r3, [pc, #156]	; (8006230 <prvAddNewTaskToReadyList+0xb0>)
 8006194:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006196:	4b27      	ldr	r3, [pc, #156]	; (8006234 <prvAddNewTaskToReadyList+0xb4>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d109      	bne.n	80061b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800619e:	4b25      	ldr	r3, [pc, #148]	; (8006234 <prvAddNewTaskToReadyList+0xb4>)
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80061a4:	4b22      	ldr	r3, [pc, #136]	; (8006230 <prvAddNewTaskToReadyList+0xb0>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d110      	bne.n	80061ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80061ac:	f000 fa6e 	bl	800668c <prvInitialiseTaskLists>
 80061b0:	e00d      	b.n	80061ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80061b2:	4b21      	ldr	r3, [pc, #132]	; (8006238 <prvAddNewTaskToReadyList+0xb8>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d109      	bne.n	80061ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80061ba:	4b1e      	ldr	r3, [pc, #120]	; (8006234 <prvAddNewTaskToReadyList+0xb4>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d802      	bhi.n	80061ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80061c8:	4b1a      	ldr	r3, [pc, #104]	; (8006234 <prvAddNewTaskToReadyList+0xb4>)
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80061ce:	4b1b      	ldr	r3, [pc, #108]	; (800623c <prvAddNewTaskToReadyList+0xbc>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	1c5a      	adds	r2, r3, #1
 80061d4:	4b19      	ldr	r3, [pc, #100]	; (800623c <prvAddNewTaskToReadyList+0xbc>)
 80061d6:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061dc:	4b18      	ldr	r3, [pc, #96]	; (8006240 <prvAddNewTaskToReadyList+0xc0>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d903      	bls.n	80061ec <prvAddNewTaskToReadyList+0x6c>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e8:	4b15      	ldr	r3, [pc, #84]	; (8006240 <prvAddNewTaskToReadyList+0xc0>)
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f0:	0013      	movs	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	189b      	adds	r3, r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	4a12      	ldr	r2, [pc, #72]	; (8006244 <prvAddNewTaskToReadyList+0xc4>)
 80061fa:	189a      	adds	r2, r3, r2
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	3304      	adds	r3, #4
 8006200:	0019      	movs	r1, r3
 8006202:	0010      	movs	r0, r2
 8006204:	f7ff fe33 	bl	8005e6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006208:	f000 fbfc 	bl	8006a04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800620c:	4b0a      	ldr	r3, [pc, #40]	; (8006238 <prvAddNewTaskToReadyList+0xb8>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d008      	beq.n	8006226 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006214:	4b07      	ldr	r3, [pc, #28]	; (8006234 <prvAddNewTaskToReadyList+0xb4>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621e:	429a      	cmp	r2, r3
 8006220:	d201      	bcs.n	8006226 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006222:	f000 fbcd 	bl	80069c0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006226:	46c0      	nop			; (mov r8, r8)
 8006228:	46bd      	mov	sp, r7
 800622a:	b002      	add	sp, #8
 800622c:	bd80      	pop	{r7, pc}
 800622e:	46c0      	nop			; (mov r8, r8)
 8006230:	200004f4 	.word	0x200004f4
 8006234:	200003f4 	.word	0x200003f4
 8006238:	20000500 	.word	0x20000500
 800623c:	20000510 	.word	0x20000510
 8006240:	200004fc 	.word	0x200004fc
 8006244:	200003f8 	.word	0x200003f8

08006248 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006248:	b580      	push	{r7, lr}
 800624a:	b084      	sub	sp, #16
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006250:	2300      	movs	r3, #0
 8006252:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d010      	beq.n	800627c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800625a:	4b0d      	ldr	r3, [pc, #52]	; (8006290 <vTaskDelay+0x48>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d001      	beq.n	8006266 <vTaskDelay+0x1e>
 8006262:	b672      	cpsid	i
 8006264:	e7fe      	b.n	8006264 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006266:	f000 f863 	bl	8006330 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2100      	movs	r1, #0
 800626e:	0018      	movs	r0, r3
 8006270:	f000 faca 	bl	8006808 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006274:	f000 f868 	bl	8006348 <xTaskResumeAll>
 8006278:	0003      	movs	r3, r0
 800627a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d101      	bne.n	8006286 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8006282:	f000 fb9d 	bl	80069c0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006286:	46c0      	nop			; (mov r8, r8)
 8006288:	46bd      	mov	sp, r7
 800628a:	b004      	add	sp, #16
 800628c:	bd80      	pop	{r7, pc}
 800628e:	46c0      	nop			; (mov r8, r8)
 8006290:	2000051c 	.word	0x2000051c

08006294 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006294:	b590      	push	{r4, r7, lr}
 8006296:	b089      	sub	sp, #36	; 0x24
 8006298:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800629a:	2300      	movs	r3, #0
 800629c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800629e:	2300      	movs	r3, #0
 80062a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80062a2:	003a      	movs	r2, r7
 80062a4:	1d39      	adds	r1, r7, #4
 80062a6:	2308      	movs	r3, #8
 80062a8:	18fb      	adds	r3, r7, r3
 80062aa:	0018      	movs	r0, r3
 80062ac:	f7fb fdee 	bl	8001e8c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80062b0:	683c      	ldr	r4, [r7, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	4918      	ldr	r1, [pc, #96]	; (8006318 <vTaskStartScheduler+0x84>)
 80062b8:	4818      	ldr	r0, [pc, #96]	; (800631c <vTaskStartScheduler+0x88>)
 80062ba:	9202      	str	r2, [sp, #8]
 80062bc:	9301      	str	r3, [sp, #4]
 80062be:	2300      	movs	r3, #0
 80062c0:	9300      	str	r3, [sp, #0]
 80062c2:	2300      	movs	r3, #0
 80062c4:	0022      	movs	r2, r4
 80062c6:	f7ff fe52 	bl	8005f6e <xTaskCreateStatic>
 80062ca:	0002      	movs	r2, r0
 80062cc:	4b14      	ldr	r3, [pc, #80]	; (8006320 <vTaskStartScheduler+0x8c>)
 80062ce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80062d0:	4b13      	ldr	r3, [pc, #76]	; (8006320 <vTaskStartScheduler+0x8c>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d002      	beq.n	80062de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80062d8:	2301      	movs	r3, #1
 80062da:	60fb      	str	r3, [r7, #12]
 80062dc:	e001      	b.n	80062e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062de:	2300      	movs	r3, #0
 80062e0:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d10d      	bne.n	8006304 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80062e8:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062ea:	4b0e      	ldr	r3, [pc, #56]	; (8006324 <vTaskStartScheduler+0x90>)
 80062ec:	2201      	movs	r2, #1
 80062ee:	4252      	negs	r2, r2
 80062f0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062f2:	4b0d      	ldr	r3, [pc, #52]	; (8006328 <vTaskStartScheduler+0x94>)
 80062f4:	2201      	movs	r2, #1
 80062f6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80062f8:	4b0c      	ldr	r3, [pc, #48]	; (800632c <vTaskStartScheduler+0x98>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062fe:	f000 fb3b 	bl	8006978 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006302:	e004      	b.n	800630e <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	3301      	adds	r3, #1
 8006308:	d101      	bne.n	800630e <vTaskStartScheduler+0x7a>
 800630a:	b672      	cpsid	i
 800630c:	e7fe      	b.n	800630c <vTaskStartScheduler+0x78>
}
 800630e:	46c0      	nop			; (mov r8, r8)
 8006310:	46bd      	mov	sp, r7
 8006312:	b005      	add	sp, #20
 8006314:	bd90      	pop	{r4, r7, pc}
 8006316:	46c0      	nop			; (mov r8, r8)
 8006318:	08007304 	.word	0x08007304
 800631c:	0800666d 	.word	0x0800666d
 8006320:	20000518 	.word	0x20000518
 8006324:	20000514 	.word	0x20000514
 8006328:	20000500 	.word	0x20000500
 800632c:	200004f8 	.word	0x200004f8

08006330 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006330:	b580      	push	{r7, lr}
 8006332:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006334:	4b03      	ldr	r3, [pc, #12]	; (8006344 <vTaskSuspendAll+0x14>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	4b02      	ldr	r3, [pc, #8]	; (8006344 <vTaskSuspendAll+0x14>)
 800633c:	601a      	str	r2, [r3, #0]
}
 800633e:	46c0      	nop			; (mov r8, r8)
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	2000051c 	.word	0x2000051c

08006348 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800634e:	2300      	movs	r3, #0
 8006350:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006352:	2300      	movs	r3, #0
 8006354:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006356:	4b3a      	ldr	r3, [pc, #232]	; (8006440 <xTaskResumeAll+0xf8>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <xTaskResumeAll+0x1a>
 800635e:	b672      	cpsid	i
 8006360:	e7fe      	b.n	8006360 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006362:	f000 fb3d 	bl	80069e0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006366:	4b36      	ldr	r3, [pc, #216]	; (8006440 <xTaskResumeAll+0xf8>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	1e5a      	subs	r2, r3, #1
 800636c:	4b34      	ldr	r3, [pc, #208]	; (8006440 <xTaskResumeAll+0xf8>)
 800636e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006370:	4b33      	ldr	r3, [pc, #204]	; (8006440 <xTaskResumeAll+0xf8>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d15b      	bne.n	8006430 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006378:	4b32      	ldr	r3, [pc, #200]	; (8006444 <xTaskResumeAll+0xfc>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d057      	beq.n	8006430 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006380:	e02f      	b.n	80063e2 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006382:	4b31      	ldr	r3, [pc, #196]	; (8006448 <xTaskResumeAll+0x100>)
 8006384:	68db      	ldr	r3, [r3, #12]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	3318      	adds	r3, #24
 800638e:	0018      	movs	r0, r3
 8006390:	f7ff fdc5 	bl	8005f1e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	3304      	adds	r3, #4
 8006398:	0018      	movs	r0, r3
 800639a:	f7ff fdc0 	bl	8005f1e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a2:	4b2a      	ldr	r3, [pc, #168]	; (800644c <xTaskResumeAll+0x104>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d903      	bls.n	80063b2 <xTaskResumeAll+0x6a>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ae:	4b27      	ldr	r3, [pc, #156]	; (800644c <xTaskResumeAll+0x104>)
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b6:	0013      	movs	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	189b      	adds	r3, r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4a24      	ldr	r2, [pc, #144]	; (8006450 <xTaskResumeAll+0x108>)
 80063c0:	189a      	adds	r2, r3, r2
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	3304      	adds	r3, #4
 80063c6:	0019      	movs	r1, r3
 80063c8:	0010      	movs	r0, r2
 80063ca:	f7ff fd50 	bl	8005e6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d2:	4b20      	ldr	r3, [pc, #128]	; (8006454 <xTaskResumeAll+0x10c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d8:	429a      	cmp	r2, r3
 80063da:	d302      	bcc.n	80063e2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80063dc:	4b1e      	ldr	r3, [pc, #120]	; (8006458 <xTaskResumeAll+0x110>)
 80063de:	2201      	movs	r2, #1
 80063e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063e2:	4b19      	ldr	r3, [pc, #100]	; (8006448 <xTaskResumeAll+0x100>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d1cb      	bne.n	8006382 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80063f0:	f000 f9e6 	bl	80067c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80063f4:	4b19      	ldr	r3, [pc, #100]	; (800645c <xTaskResumeAll+0x114>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d00f      	beq.n	8006420 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006400:	f000 f82e 	bl	8006460 <xTaskIncrementTick>
 8006404:	1e03      	subs	r3, r0, #0
 8006406:	d002      	beq.n	800640e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8006408:	4b13      	ldr	r3, [pc, #76]	; (8006458 <xTaskResumeAll+0x110>)
 800640a:	2201      	movs	r2, #1
 800640c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	3b01      	subs	r3, #1
 8006412:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d1f2      	bne.n	8006400 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800641a:	4b10      	ldr	r3, [pc, #64]	; (800645c <xTaskResumeAll+0x114>)
 800641c:	2200      	movs	r2, #0
 800641e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006420:	4b0d      	ldr	r3, [pc, #52]	; (8006458 <xTaskResumeAll+0x110>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d003      	beq.n	8006430 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006428:	2301      	movs	r3, #1
 800642a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800642c:	f000 fac8 	bl	80069c0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006430:	f000 fae8 	bl	8006a04 <vPortExitCritical>

	return xAlreadyYielded;
 8006434:	68bb      	ldr	r3, [r7, #8]
}
 8006436:	0018      	movs	r0, r3
 8006438:	46bd      	mov	sp, r7
 800643a:	b004      	add	sp, #16
 800643c:	bd80      	pop	{r7, pc}
 800643e:	46c0      	nop			; (mov r8, r8)
 8006440:	2000051c 	.word	0x2000051c
 8006444:	200004f4 	.word	0x200004f4
 8006448:	200004b4 	.word	0x200004b4
 800644c:	200004fc 	.word	0x200004fc
 8006450:	200003f8 	.word	0x200003f8
 8006454:	200003f4 	.word	0x200003f4
 8006458:	20000508 	.word	0x20000508
 800645c:	20000504 	.word	0x20000504

08006460 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006466:	2300      	movs	r3, #0
 8006468:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800646a:	4b4c      	ldr	r3, [pc, #304]	; (800659c <xTaskIncrementTick+0x13c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d000      	beq.n	8006474 <xTaskIncrementTick+0x14>
 8006472:	e083      	b.n	800657c <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006474:	4b4a      	ldr	r3, [pc, #296]	; (80065a0 <xTaskIncrementTick+0x140>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3301      	adds	r3, #1
 800647a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800647c:	4b48      	ldr	r3, [pc, #288]	; (80065a0 <xTaskIncrementTick+0x140>)
 800647e:	693a      	ldr	r2, [r7, #16]
 8006480:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d117      	bne.n	80064b8 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8006488:	4b46      	ldr	r3, [pc, #280]	; (80065a4 <xTaskIncrementTick+0x144>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <xTaskIncrementTick+0x36>
 8006492:	b672      	cpsid	i
 8006494:	e7fe      	b.n	8006494 <xTaskIncrementTick+0x34>
 8006496:	4b43      	ldr	r3, [pc, #268]	; (80065a4 <xTaskIncrementTick+0x144>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	4b42      	ldr	r3, [pc, #264]	; (80065a8 <xTaskIncrementTick+0x148>)
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	4b40      	ldr	r3, [pc, #256]	; (80065a4 <xTaskIncrementTick+0x144>)
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	4b40      	ldr	r3, [pc, #256]	; (80065a8 <xTaskIncrementTick+0x148>)
 80064a6:	68fa      	ldr	r2, [r7, #12]
 80064a8:	601a      	str	r2, [r3, #0]
 80064aa:	4b40      	ldr	r3, [pc, #256]	; (80065ac <xTaskIncrementTick+0x14c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	1c5a      	adds	r2, r3, #1
 80064b0:	4b3e      	ldr	r3, [pc, #248]	; (80065ac <xTaskIncrementTick+0x14c>)
 80064b2:	601a      	str	r2, [r3, #0]
 80064b4:	f000 f984 	bl	80067c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80064b8:	4b3d      	ldr	r3, [pc, #244]	; (80065b0 <xTaskIncrementTick+0x150>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d34e      	bcc.n	8006560 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064c2:	4b38      	ldr	r3, [pc, #224]	; (80065a4 <xTaskIncrementTick+0x144>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d101      	bne.n	80064d0 <xTaskIncrementTick+0x70>
 80064cc:	2301      	movs	r3, #1
 80064ce:	e000      	b.n	80064d2 <xTaskIncrementTick+0x72>
 80064d0:	2300      	movs	r3, #0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d004      	beq.n	80064e0 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064d6:	4b36      	ldr	r3, [pc, #216]	; (80065b0 <xTaskIncrementTick+0x150>)
 80064d8:	2201      	movs	r2, #1
 80064da:	4252      	negs	r2, r2
 80064dc:	601a      	str	r2, [r3, #0]
					break;
 80064de:	e03f      	b.n	8006560 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80064e0:	4b30      	ldr	r3, [pc, #192]	; (80065a4 <xTaskIncrementTick+0x144>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68db      	ldr	r3, [r3, #12]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d203      	bcs.n	8006500 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80064f8:	4b2d      	ldr	r3, [pc, #180]	; (80065b0 <xTaskIncrementTick+0x150>)
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	601a      	str	r2, [r3, #0]
						break;
 80064fe:	e02f      	b.n	8006560 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	3304      	adds	r3, #4
 8006504:	0018      	movs	r0, r3
 8006506:	f7ff fd0a 	bl	8005f1e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650e:	2b00      	cmp	r3, #0
 8006510:	d004      	beq.n	800651c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	3318      	adds	r3, #24
 8006516:	0018      	movs	r0, r3
 8006518:	f7ff fd01 	bl	8005f1e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006520:	4b24      	ldr	r3, [pc, #144]	; (80065b4 <xTaskIncrementTick+0x154>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	429a      	cmp	r2, r3
 8006526:	d903      	bls.n	8006530 <xTaskIncrementTick+0xd0>
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652c:	4b21      	ldr	r3, [pc, #132]	; (80065b4 <xTaskIncrementTick+0x154>)
 800652e:	601a      	str	r2, [r3, #0]
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006534:	0013      	movs	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	189b      	adds	r3, r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	4a1e      	ldr	r2, [pc, #120]	; (80065b8 <xTaskIncrementTick+0x158>)
 800653e:	189a      	adds	r2, r3, r2
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	3304      	adds	r3, #4
 8006544:	0019      	movs	r1, r3
 8006546:	0010      	movs	r0, r2
 8006548:	f7ff fc91 	bl	8005e6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006550:	4b1a      	ldr	r3, [pc, #104]	; (80065bc <xTaskIncrementTick+0x15c>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006556:	429a      	cmp	r2, r3
 8006558:	d3b3      	bcc.n	80064c2 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800655a:	2301      	movs	r3, #1
 800655c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800655e:	e7b0      	b.n	80064c2 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006560:	4b16      	ldr	r3, [pc, #88]	; (80065bc <xTaskIncrementTick+0x15c>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006566:	4914      	ldr	r1, [pc, #80]	; (80065b8 <xTaskIncrementTick+0x158>)
 8006568:	0013      	movs	r3, r2
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	189b      	adds	r3, r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	585b      	ldr	r3, [r3, r1]
 8006572:	2b01      	cmp	r3, #1
 8006574:	d907      	bls.n	8006586 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006576:	2301      	movs	r3, #1
 8006578:	617b      	str	r3, [r7, #20]
 800657a:	e004      	b.n	8006586 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800657c:	4b10      	ldr	r3, [pc, #64]	; (80065c0 <xTaskIncrementTick+0x160>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	1c5a      	adds	r2, r3, #1
 8006582:	4b0f      	ldr	r3, [pc, #60]	; (80065c0 <xTaskIncrementTick+0x160>)
 8006584:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006586:	4b0f      	ldr	r3, [pc, #60]	; (80065c4 <xTaskIncrementTick+0x164>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d001      	beq.n	8006592 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800658e:	2301      	movs	r3, #1
 8006590:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006592:	697b      	ldr	r3, [r7, #20]
}
 8006594:	0018      	movs	r0, r3
 8006596:	46bd      	mov	sp, r7
 8006598:	b006      	add	sp, #24
 800659a:	bd80      	pop	{r7, pc}
 800659c:	2000051c 	.word	0x2000051c
 80065a0:	200004f8 	.word	0x200004f8
 80065a4:	200004ac 	.word	0x200004ac
 80065a8:	200004b0 	.word	0x200004b0
 80065ac:	2000050c 	.word	0x2000050c
 80065b0:	20000514 	.word	0x20000514
 80065b4:	200004fc 	.word	0x200004fc
 80065b8:	200003f8 	.word	0x200003f8
 80065bc:	200003f4 	.word	0x200003f4
 80065c0:	20000504 	.word	0x20000504
 80065c4:	20000508 	.word	0x20000508

080065c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80065ce:	4b22      	ldr	r3, [pc, #136]	; (8006658 <vTaskSwitchContext+0x90>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d003      	beq.n	80065de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80065d6:	4b21      	ldr	r3, [pc, #132]	; (800665c <vTaskSwitchContext+0x94>)
 80065d8:	2201      	movs	r2, #1
 80065da:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80065dc:	e037      	b.n	800664e <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80065de:	4b1f      	ldr	r3, [pc, #124]	; (800665c <vTaskSwitchContext+0x94>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80065e4:	4b1e      	ldr	r3, [pc, #120]	; (8006660 <vTaskSwitchContext+0x98>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	607b      	str	r3, [r7, #4]
 80065ea:	e007      	b.n	80065fc <vTaskSwitchContext+0x34>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <vTaskSwitchContext+0x2e>
 80065f2:	b672      	cpsid	i
 80065f4:	e7fe      	b.n	80065f4 <vTaskSwitchContext+0x2c>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3b01      	subs	r3, #1
 80065fa:	607b      	str	r3, [r7, #4]
 80065fc:	4919      	ldr	r1, [pc, #100]	; (8006664 <vTaskSwitchContext+0x9c>)
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	0013      	movs	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	189b      	adds	r3, r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	585b      	ldr	r3, [r3, r1]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d0ee      	beq.n	80065ec <vTaskSwitchContext+0x24>
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	0013      	movs	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	189b      	adds	r3, r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4a12      	ldr	r2, [pc, #72]	; (8006664 <vTaskSwitchContext+0x9c>)
 800661a:	189b      	adds	r3, r3, r2
 800661c:	603b      	str	r3, [r7, #0]
 800661e:	683b      	ldr	r3, [r7, #0]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	605a      	str	r2, [r3, #4]
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	3308      	adds	r3, #8
 8006630:	429a      	cmp	r2, r3
 8006632:	d104      	bne.n	800663e <vTaskSwitchContext+0x76>
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	685a      	ldr	r2, [r3, #4]
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	605a      	str	r2, [r3, #4]
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	68da      	ldr	r2, [r3, #12]
 8006644:	4b08      	ldr	r3, [pc, #32]	; (8006668 <vTaskSwitchContext+0xa0>)
 8006646:	601a      	str	r2, [r3, #0]
 8006648:	4b05      	ldr	r3, [pc, #20]	; (8006660 <vTaskSwitchContext+0x98>)
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	601a      	str	r2, [r3, #0]
}
 800664e:	46c0      	nop			; (mov r8, r8)
 8006650:	46bd      	mov	sp, r7
 8006652:	b002      	add	sp, #8
 8006654:	bd80      	pop	{r7, pc}
 8006656:	46c0      	nop			; (mov r8, r8)
 8006658:	2000051c 	.word	0x2000051c
 800665c:	20000508 	.word	0x20000508
 8006660:	200004fc 	.word	0x200004fc
 8006664:	200003f8 	.word	0x200003f8
 8006668:	200003f4 	.word	0x200003f4

0800666c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006674:	f000 f84e 	bl	8006714 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006678:	4b03      	ldr	r3, [pc, #12]	; (8006688 <prvIdleTask+0x1c>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b01      	cmp	r3, #1
 800667e:	d9f9      	bls.n	8006674 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006680:	f000 f99e 	bl	80069c0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8006684:	e7f6      	b.n	8006674 <prvIdleTask+0x8>
 8006686:	46c0      	nop			; (mov r8, r8)
 8006688:	200003f8 	.word	0x200003f8

0800668c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006692:	2300      	movs	r3, #0
 8006694:	607b      	str	r3, [r7, #4]
 8006696:	e00c      	b.n	80066b2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006698:	687a      	ldr	r2, [r7, #4]
 800669a:	0013      	movs	r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	189b      	adds	r3, r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4a14      	ldr	r2, [pc, #80]	; (80066f4 <prvInitialiseTaskLists+0x68>)
 80066a4:	189b      	adds	r3, r3, r2
 80066a6:	0018      	movs	r0, r3
 80066a8:	f7ff fbb8 	bl	8005e1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	3301      	adds	r3, #1
 80066b0:	607b      	str	r3, [r7, #4]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b06      	cmp	r3, #6
 80066b6:	d9ef      	bls.n	8006698 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80066b8:	4b0f      	ldr	r3, [pc, #60]	; (80066f8 <prvInitialiseTaskLists+0x6c>)
 80066ba:	0018      	movs	r0, r3
 80066bc:	f7ff fbae 	bl	8005e1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80066c0:	4b0e      	ldr	r3, [pc, #56]	; (80066fc <prvInitialiseTaskLists+0x70>)
 80066c2:	0018      	movs	r0, r3
 80066c4:	f7ff fbaa 	bl	8005e1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80066c8:	4b0d      	ldr	r3, [pc, #52]	; (8006700 <prvInitialiseTaskLists+0x74>)
 80066ca:	0018      	movs	r0, r3
 80066cc:	f7ff fba6 	bl	8005e1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80066d0:	4b0c      	ldr	r3, [pc, #48]	; (8006704 <prvInitialiseTaskLists+0x78>)
 80066d2:	0018      	movs	r0, r3
 80066d4:	f7ff fba2 	bl	8005e1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80066d8:	4b0b      	ldr	r3, [pc, #44]	; (8006708 <prvInitialiseTaskLists+0x7c>)
 80066da:	0018      	movs	r0, r3
 80066dc:	f7ff fb9e 	bl	8005e1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80066e0:	4b0a      	ldr	r3, [pc, #40]	; (800670c <prvInitialiseTaskLists+0x80>)
 80066e2:	4a05      	ldr	r2, [pc, #20]	; (80066f8 <prvInitialiseTaskLists+0x6c>)
 80066e4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80066e6:	4b0a      	ldr	r3, [pc, #40]	; (8006710 <prvInitialiseTaskLists+0x84>)
 80066e8:	4a04      	ldr	r2, [pc, #16]	; (80066fc <prvInitialiseTaskLists+0x70>)
 80066ea:	601a      	str	r2, [r3, #0]
}
 80066ec:	46c0      	nop			; (mov r8, r8)
 80066ee:	46bd      	mov	sp, r7
 80066f0:	b002      	add	sp, #8
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	200003f8 	.word	0x200003f8
 80066f8:	20000484 	.word	0x20000484
 80066fc:	20000498 	.word	0x20000498
 8006700:	200004b4 	.word	0x200004b4
 8006704:	200004c8 	.word	0x200004c8
 8006708:	200004e0 	.word	0x200004e0
 800670c:	200004ac 	.word	0x200004ac
 8006710:	200004b0 	.word	0x200004b0

08006714 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800671a:	e01a      	b.n	8006752 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800671c:	f000 f960 	bl	80069e0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006720:	4b10      	ldr	r3, [pc, #64]	; (8006764 <prvCheckTasksWaitingTermination+0x50>)
 8006722:	68db      	ldr	r3, [r3, #12]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	3304      	adds	r3, #4
 800672c:	0018      	movs	r0, r3
 800672e:	f7ff fbf6 	bl	8005f1e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006732:	4b0d      	ldr	r3, [pc, #52]	; (8006768 <prvCheckTasksWaitingTermination+0x54>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	1e5a      	subs	r2, r3, #1
 8006738:	4b0b      	ldr	r3, [pc, #44]	; (8006768 <prvCheckTasksWaitingTermination+0x54>)
 800673a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800673c:	4b0b      	ldr	r3, [pc, #44]	; (800676c <prvCheckTasksWaitingTermination+0x58>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	1e5a      	subs	r2, r3, #1
 8006742:	4b0a      	ldr	r3, [pc, #40]	; (800676c <prvCheckTasksWaitingTermination+0x58>)
 8006744:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8006746:	f000 f95d 	bl	8006a04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	0018      	movs	r0, r3
 800674e:	f000 f80f 	bl	8006770 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006752:	4b06      	ldr	r3, [pc, #24]	; (800676c <prvCheckTasksWaitingTermination+0x58>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1e0      	bne.n	800671c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800675a:	46c0      	nop			; (mov r8, r8)
 800675c:	46bd      	mov	sp, r7
 800675e:	b002      	add	sp, #8
 8006760:	bd80      	pop	{r7, pc}
 8006762:	46c0      	nop			; (mov r8, r8)
 8006764:	200004c8 	.word	0x200004c8
 8006768:	200004f4 	.word	0x200004f4
 800676c:	200004dc 	.word	0x200004dc

08006770 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2251      	movs	r2, #81	; 0x51
 800677c:	5c9b      	ldrb	r3, [r3, r2]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d109      	bne.n	8006796 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006786:	0018      	movs	r0, r3
 8006788:	f000 fa68 	bl	8006c5c <vPortFree>
				vPortFree( pxTCB );
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	0018      	movs	r0, r3
 8006790:	f000 fa64 	bl	8006c5c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006794:	e010      	b.n	80067b8 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2251      	movs	r2, #81	; 0x51
 800679a:	5c9b      	ldrb	r3, [r3, r2]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d104      	bne.n	80067aa <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	0018      	movs	r0, r3
 80067a4:	f000 fa5a 	bl	8006c5c <vPortFree>
	}
 80067a8:	e006      	b.n	80067b8 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2251      	movs	r2, #81	; 0x51
 80067ae:	5c9b      	ldrb	r3, [r3, r2]
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d001      	beq.n	80067b8 <prvDeleteTCB+0x48>
 80067b4:	b672      	cpsid	i
 80067b6:	e7fe      	b.n	80067b6 <prvDeleteTCB+0x46>
	}
 80067b8:	46c0      	nop			; (mov r8, r8)
 80067ba:	46bd      	mov	sp, r7
 80067bc:	b002      	add	sp, #8
 80067be:	bd80      	pop	{r7, pc}

080067c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80067c6:	4b0e      	ldr	r3, [pc, #56]	; (8006800 <prvResetNextTaskUnblockTime+0x40>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <prvResetNextTaskUnblockTime+0x14>
 80067d0:	2301      	movs	r3, #1
 80067d2:	e000      	b.n	80067d6 <prvResetNextTaskUnblockTime+0x16>
 80067d4:	2300      	movs	r3, #0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d004      	beq.n	80067e4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80067da:	4b0a      	ldr	r3, [pc, #40]	; (8006804 <prvResetNextTaskUnblockTime+0x44>)
 80067dc:	2201      	movs	r2, #1
 80067de:	4252      	negs	r2, r2
 80067e0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80067e2:	e008      	b.n	80067f6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80067e4:	4b06      	ldr	r3, [pc, #24]	; (8006800 <prvResetNextTaskUnblockTime+0x40>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	4b04      	ldr	r3, [pc, #16]	; (8006804 <prvResetNextTaskUnblockTime+0x44>)
 80067f4:	601a      	str	r2, [r3, #0]
}
 80067f6:	46c0      	nop			; (mov r8, r8)
 80067f8:	46bd      	mov	sp, r7
 80067fa:	b002      	add	sp, #8
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	46c0      	nop			; (mov r8, r8)
 8006800:	200004ac 	.word	0x200004ac
 8006804:	20000514 	.word	0x20000514

08006808 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006812:	4b21      	ldr	r3, [pc, #132]	; (8006898 <prvAddCurrentTaskToDelayedList+0x90>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006818:	4b20      	ldr	r3, [pc, #128]	; (800689c <prvAddCurrentTaskToDelayedList+0x94>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	3304      	adds	r3, #4
 800681e:	0018      	movs	r0, r3
 8006820:	f7ff fb7d 	bl	8005f1e <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	3301      	adds	r3, #1
 8006828:	d10b      	bne.n	8006842 <prvAddCurrentTaskToDelayedList+0x3a>
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d008      	beq.n	8006842 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006830:	4b1a      	ldr	r3, [pc, #104]	; (800689c <prvAddCurrentTaskToDelayedList+0x94>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	1d1a      	adds	r2, r3, #4
 8006836:	4b1a      	ldr	r3, [pc, #104]	; (80068a0 <prvAddCurrentTaskToDelayedList+0x98>)
 8006838:	0011      	movs	r1, r2
 800683a:	0018      	movs	r0, r3
 800683c:	f7ff fb17 	bl	8005e6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006840:	e026      	b.n	8006890 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	18d3      	adds	r3, r2, r3
 8006848:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800684a:	4b14      	ldr	r3, [pc, #80]	; (800689c <prvAddCurrentTaskToDelayedList+0x94>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006852:	68ba      	ldr	r2, [r7, #8]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	429a      	cmp	r2, r3
 8006858:	d209      	bcs.n	800686e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800685a:	4b12      	ldr	r3, [pc, #72]	; (80068a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	4b0f      	ldr	r3, [pc, #60]	; (800689c <prvAddCurrentTaskToDelayedList+0x94>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3304      	adds	r3, #4
 8006864:	0019      	movs	r1, r3
 8006866:	0010      	movs	r0, r2
 8006868:	f7ff fb23 	bl	8005eb2 <vListInsert>
}
 800686c:	e010      	b.n	8006890 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800686e:	4b0e      	ldr	r3, [pc, #56]	; (80068a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	4b0a      	ldr	r3, [pc, #40]	; (800689c <prvAddCurrentTaskToDelayedList+0x94>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3304      	adds	r3, #4
 8006878:	0019      	movs	r1, r3
 800687a:	0010      	movs	r0, r2
 800687c:	f7ff fb19 	bl	8005eb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006880:	4b0a      	ldr	r3, [pc, #40]	; (80068ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68ba      	ldr	r2, [r7, #8]
 8006886:	429a      	cmp	r2, r3
 8006888:	d202      	bcs.n	8006890 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800688a:	4b08      	ldr	r3, [pc, #32]	; (80068ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800688c:	68ba      	ldr	r2, [r7, #8]
 800688e:	601a      	str	r2, [r3, #0]
}
 8006890:	46c0      	nop			; (mov r8, r8)
 8006892:	46bd      	mov	sp, r7
 8006894:	b004      	add	sp, #16
 8006896:	bd80      	pop	{r7, pc}
 8006898:	200004f8 	.word	0x200004f8
 800689c:	200003f4 	.word	0x200003f4
 80068a0:	200004e0 	.word	0x200004e0
 80068a4:	200004b0 	.word	0x200004b0
 80068a8:	200004ac 	.word	0x200004ac
 80068ac:	20000514 	.word	0x20000514

080068b0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	3b04      	subs	r3, #4
 80068c0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2280      	movs	r2, #128	; 0x80
 80068c6:	0452      	lsls	r2, r2, #17
 80068c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	3b04      	subs	r3, #4
 80068ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	3b04      	subs	r3, #4
 80068da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80068dc:	4a08      	ldr	r2, [pc, #32]	; (8006900 <pxPortInitialiseStack+0x50>)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	3b14      	subs	r3, #20
 80068e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80068e8:	687a      	ldr	r2, [r7, #4]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3b20      	subs	r3, #32
 80068f2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80068f4:	68fb      	ldr	r3, [r7, #12]
}
 80068f6:	0018      	movs	r0, r3
 80068f8:	46bd      	mov	sp, r7
 80068fa:	b004      	add	sp, #16
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	46c0      	nop			; (mov r8, r8)
 8006900:	08006905 	.word	0x08006905

08006904 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800690a:	2300      	movs	r3, #0
 800690c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800690e:	4b07      	ldr	r3, [pc, #28]	; (800692c <prvTaskExitError+0x28>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3301      	adds	r3, #1
 8006914:	d001      	beq.n	800691a <prvTaskExitError+0x16>
 8006916:	b672      	cpsid	i
 8006918:	e7fe      	b.n	8006918 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800691a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800691c:	46c0      	nop			; (mov r8, r8)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d0fc      	beq.n	800691e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006924:	46c0      	nop			; (mov r8, r8)
 8006926:	46bd      	mov	sp, r7
 8006928:	b002      	add	sp, #8
 800692a:	bd80      	pop	{r7, pc}
 800692c:	20000008 	.word	0x20000008

08006930 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8006934:	46c0      	nop			; (mov r8, r8)
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
 800693a:	0000      	movs	r0, r0
 800693c:	0000      	movs	r0, r0
	...

08006940 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006940:	4a0b      	ldr	r2, [pc, #44]	; (8006970 <pxCurrentTCBConst2>)
 8006942:	6813      	ldr	r3, [r2, #0]
 8006944:	6818      	ldr	r0, [r3, #0]
 8006946:	3020      	adds	r0, #32
 8006948:	f380 8809 	msr	PSP, r0
 800694c:	2002      	movs	r0, #2
 800694e:	f380 8814 	msr	CONTROL, r0
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8006958:	46ae      	mov	lr, r5
 800695a:	bc08      	pop	{r3}
 800695c:	bc04      	pop	{r2}
 800695e:	b662      	cpsie	i
 8006960:	4718      	bx	r3
 8006962:	46c0      	nop			; (mov r8, r8)
 8006964:	46c0      	nop			; (mov r8, r8)
 8006966:	46c0      	nop			; (mov r8, r8)
 8006968:	46c0      	nop			; (mov r8, r8)
 800696a:	46c0      	nop			; (mov r8, r8)
 800696c:	46c0      	nop			; (mov r8, r8)
 800696e:	46c0      	nop			; (mov r8, r8)

08006970 <pxCurrentTCBConst2>:
 8006970:	200003f4 	.word	0x200003f4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8006974:	46c0      	nop			; (mov r8, r8)
 8006976:	46c0      	nop			; (mov r8, r8)

08006978 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006978:	b580      	push	{r7, lr}
 800697a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800697c:	4b0e      	ldr	r3, [pc, #56]	; (80069b8 <xPortStartScheduler+0x40>)
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	4b0d      	ldr	r3, [pc, #52]	; (80069b8 <xPortStartScheduler+0x40>)
 8006982:	21ff      	movs	r1, #255	; 0xff
 8006984:	0409      	lsls	r1, r1, #16
 8006986:	430a      	orrs	r2, r1
 8006988:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800698a:	4b0b      	ldr	r3, [pc, #44]	; (80069b8 <xPortStartScheduler+0x40>)
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	4b0a      	ldr	r3, [pc, #40]	; (80069b8 <xPortStartScheduler+0x40>)
 8006990:	21ff      	movs	r1, #255	; 0xff
 8006992:	0609      	lsls	r1, r1, #24
 8006994:	430a      	orrs	r2, r1
 8006996:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8006998:	f000 f898 	bl	8006acc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800699c:	4b07      	ldr	r3, [pc, #28]	; (80069bc <xPortStartScheduler+0x44>)
 800699e:	2200      	movs	r2, #0
 80069a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80069a2:	f7ff ffcd 	bl	8006940 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069a6:	f7ff fe0f 	bl	80065c8 <vTaskSwitchContext>
	prvTaskExitError();
 80069aa:	f7ff ffab 	bl	8006904 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	0018      	movs	r0, r3
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	46c0      	nop			; (mov r8, r8)
 80069b8:	e000ed20 	.word	0xe000ed20
 80069bc:	20000008 	.word	0x20000008

080069c0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 80069c4:	4b05      	ldr	r3, [pc, #20]	; (80069dc <vPortYield+0x1c>)
 80069c6:	2280      	movs	r2, #128	; 0x80
 80069c8:	0552      	lsls	r2, r2, #21
 80069ca:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80069cc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80069d0:	f3bf 8f6f 	isb	sy
}
 80069d4:	46c0      	nop			; (mov r8, r8)
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	46c0      	nop			; (mov r8, r8)
 80069dc:	e000ed04 	.word	0xe000ed04

080069e0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80069e4:	b672      	cpsid	i
    uxCriticalNesting++;
 80069e6:	4b06      	ldr	r3, [pc, #24]	; (8006a00 <vPortEnterCritical+0x20>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	1c5a      	adds	r2, r3, #1
 80069ec:	4b04      	ldr	r3, [pc, #16]	; (8006a00 <vPortEnterCritical+0x20>)
 80069ee:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80069f0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80069f4:	f3bf 8f6f 	isb	sy
}
 80069f8:	46c0      	nop			; (mov r8, r8)
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}
 80069fe:	46c0      	nop			; (mov r8, r8)
 8006a00:	20000008 	.word	0x20000008

08006a04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a08:	4b09      	ldr	r3, [pc, #36]	; (8006a30 <vPortExitCritical+0x2c>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <vPortExitCritical+0x10>
 8006a10:	b672      	cpsid	i
 8006a12:	e7fe      	b.n	8006a12 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8006a14:	4b06      	ldr	r3, [pc, #24]	; (8006a30 <vPortExitCritical+0x2c>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	1e5a      	subs	r2, r3, #1
 8006a1a:	4b05      	ldr	r3, [pc, #20]	; (8006a30 <vPortExitCritical+0x2c>)
 8006a1c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8006a1e:	4b04      	ldr	r3, [pc, #16]	; (8006a30 <vPortExitCritical+0x2c>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d100      	bne.n	8006a28 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8006a26:	b662      	cpsie	i
    }
}
 8006a28:	46c0      	nop			; (mov r8, r8)
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	46c0      	nop			; (mov r8, r8)
 8006a30:	20000008 	.word	0x20000008

08006a34 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8006a34:	f3ef 8010 	mrs	r0, PRIMASK
 8006a38:	b672      	cpsid	i
 8006a3a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8006a3c:	46c0      	nop			; (mov r8, r8)
 8006a3e:	0018      	movs	r0, r3

08006a40 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8006a40:	f380 8810 	msr	PRIMASK, r0
 8006a44:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8006a46:	46c0      	nop			; (mov r8, r8)
	...

08006a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a50:	f3ef 8009 	mrs	r0, PSP
 8006a54:	4b0e      	ldr	r3, [pc, #56]	; (8006a90 <pxCurrentTCBConst>)
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	3820      	subs	r0, #32
 8006a5a:	6010      	str	r0, [r2, #0]
 8006a5c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006a5e:	4644      	mov	r4, r8
 8006a60:	464d      	mov	r5, r9
 8006a62:	4656      	mov	r6, sl
 8006a64:	465f      	mov	r7, fp
 8006a66:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8006a68:	b508      	push	{r3, lr}
 8006a6a:	b672      	cpsid	i
 8006a6c:	f7ff fdac 	bl	80065c8 <vTaskSwitchContext>
 8006a70:	b662      	cpsie	i
 8006a72:	bc0c      	pop	{r2, r3}
 8006a74:	6811      	ldr	r1, [r2, #0]
 8006a76:	6808      	ldr	r0, [r1, #0]
 8006a78:	3010      	adds	r0, #16
 8006a7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006a7c:	46a0      	mov	r8, r4
 8006a7e:	46a9      	mov	r9, r5
 8006a80:	46b2      	mov	sl, r6
 8006a82:	46bb      	mov	fp, r7
 8006a84:	f380 8809 	msr	PSP, r0
 8006a88:	3820      	subs	r0, #32
 8006a8a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8006a8c:	4718      	bx	r3
 8006a8e:	46c0      	nop			; (mov r8, r8)

08006a90 <pxCurrentTCBConst>:
 8006a90:	200003f4 	.word	0x200003f4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8006a94:	46c0      	nop			; (mov r8, r8)
 8006a96:	46c0      	nop			; (mov r8, r8)

08006a98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8006a9e:	f7ff ffc9 	bl	8006a34 <ulSetInterruptMaskFromISR>
 8006aa2:	0003      	movs	r3, r0
 8006aa4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006aa6:	f7ff fcdb 	bl	8006460 <xTaskIncrementTick>
 8006aaa:	1e03      	subs	r3, r0, #0
 8006aac:	d003      	beq.n	8006ab6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8006aae:	4b06      	ldr	r3, [pc, #24]	; (8006ac8 <SysTick_Handler+0x30>)
 8006ab0:	2280      	movs	r2, #128	; 0x80
 8006ab2:	0552      	lsls	r2, r2, #21
 8006ab4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	0018      	movs	r0, r3
 8006aba:	f7ff ffc1 	bl	8006a40 <vClearInterruptMaskFromISR>
}
 8006abe:	46c0      	nop			; (mov r8, r8)
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	b002      	add	sp, #8
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	46c0      	nop			; (mov r8, r8)
 8006ac8:	e000ed04 	.word	0xe000ed04

08006acc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8006ad0:	4b0b      	ldr	r3, [pc, #44]	; (8006b00 <prvSetupTimerInterrupt+0x34>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8006ad6:	4b0b      	ldr	r3, [pc, #44]	; (8006b04 <prvSetupTimerInterrupt+0x38>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006adc:	4b0a      	ldr	r3, [pc, #40]	; (8006b08 <prvSetupTimerInterrupt+0x3c>)
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	23fa      	movs	r3, #250	; 0xfa
 8006ae2:	0099      	lsls	r1, r3, #2
 8006ae4:	0010      	movs	r0, r2
 8006ae6:	f7f9 fb0f 	bl	8000108 <__udivsi3>
 8006aea:	0003      	movs	r3, r0
 8006aec:	001a      	movs	r2, r3
 8006aee:	4b07      	ldr	r3, [pc, #28]	; (8006b0c <prvSetupTimerInterrupt+0x40>)
 8006af0:	3a01      	subs	r2, #1
 8006af2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8006af4:	4b02      	ldr	r3, [pc, #8]	; (8006b00 <prvSetupTimerInterrupt+0x34>)
 8006af6:	2207      	movs	r2, #7
 8006af8:	601a      	str	r2, [r3, #0]
}
 8006afa:	46c0      	nop			; (mov r8, r8)
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	e000e010 	.word	0xe000e010
 8006b04:	e000e018 	.word	0xe000e018
 8006b08:	20000000 	.word	0x20000000
 8006b0c:	e000e014 	.word	0xe000e014

08006b10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8006b1c:	f7ff fc08 	bl	8006330 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b20:	4b49      	ldr	r3, [pc, #292]	; (8006c48 <pvPortMalloc+0x138>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d101      	bne.n	8006b2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b28:	f000 f8e0 	bl	8006cec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b2c:	4b47      	ldr	r3, [pc, #284]	; (8006c4c <pvPortMalloc+0x13c>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	4013      	ands	r3, r2
 8006b34:	d000      	beq.n	8006b38 <pvPortMalloc+0x28>
 8006b36:	e079      	b.n	8006c2c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d012      	beq.n	8006b64 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8006b3e:	2208      	movs	r2, #8
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	189b      	adds	r3, r3, r2
 8006b44:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2207      	movs	r2, #7
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	d00a      	beq.n	8006b64 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2207      	movs	r2, #7
 8006b52:	4393      	bics	r3, r2
 8006b54:	3308      	adds	r3, #8
 8006b56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2207      	movs	r2, #7
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	d001      	beq.n	8006b64 <pvPortMalloc+0x54>
 8006b60:	b672      	cpsid	i
 8006b62:	e7fe      	b.n	8006b62 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d060      	beq.n	8006c2c <pvPortMalloc+0x11c>
 8006b6a:	4b39      	ldr	r3, [pc, #228]	; (8006c50 <pvPortMalloc+0x140>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d85b      	bhi.n	8006c2c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006b74:	4b37      	ldr	r3, [pc, #220]	; (8006c54 <pvPortMalloc+0x144>)
 8006b76:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8006b78:	4b36      	ldr	r3, [pc, #216]	; (8006c54 <pvPortMalloc+0x144>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b7e:	e004      	b.n	8006b8a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	687a      	ldr	r2, [r7, #4]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d903      	bls.n	8006b9c <pvPortMalloc+0x8c>
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1f1      	bne.n	8006b80 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006b9c:	4b2a      	ldr	r3, [pc, #168]	; (8006c48 <pvPortMalloc+0x138>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d042      	beq.n	8006c2c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2208      	movs	r2, #8
 8006bac:	189b      	adds	r3, r3, r2
 8006bae:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	685a      	ldr	r2, [r3, #4]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	1ad2      	subs	r2, r2, r3
 8006bc0:	2308      	movs	r3, #8
 8006bc2:	005b      	lsls	r3, r3, #1
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d916      	bls.n	8006bf6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006bc8:	697a      	ldr	r2, [r7, #20]
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	18d3      	adds	r3, r2, r3
 8006bce:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2207      	movs	r2, #7
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	d001      	beq.n	8006bdc <pvPortMalloc+0xcc>
 8006bd8:	b672      	cpsid	i
 8006bda:	e7fe      	b.n	8006bda <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	685a      	ldr	r2, [r3, #4]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	1ad2      	subs	r2, r2, r3
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	687a      	ldr	r2, [r7, #4]
 8006bec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	f000 f8db 	bl	8006dac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006bf6:	4b16      	ldr	r3, [pc, #88]	; (8006c50 <pvPortMalloc+0x140>)
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	1ad2      	subs	r2, r2, r3
 8006c00:	4b13      	ldr	r3, [pc, #76]	; (8006c50 <pvPortMalloc+0x140>)
 8006c02:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c04:	4b12      	ldr	r3, [pc, #72]	; (8006c50 <pvPortMalloc+0x140>)
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	4b13      	ldr	r3, [pc, #76]	; (8006c58 <pvPortMalloc+0x148>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d203      	bcs.n	8006c18 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c10:	4b0f      	ldr	r3, [pc, #60]	; (8006c50 <pvPortMalloc+0x140>)
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	4b10      	ldr	r3, [pc, #64]	; (8006c58 <pvPortMalloc+0x148>)
 8006c16:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	685a      	ldr	r2, [r3, #4]
 8006c1c:	4b0b      	ldr	r3, [pc, #44]	; (8006c4c <pvPortMalloc+0x13c>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	431a      	orrs	r2, r3
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c2c:	f7ff fb8c 	bl	8006348 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2207      	movs	r2, #7
 8006c34:	4013      	ands	r3, r2
 8006c36:	d001      	beq.n	8006c3c <pvPortMalloc+0x12c>
 8006c38:	b672      	cpsid	i
 8006c3a:	e7fe      	b.n	8006c3a <pvPortMalloc+0x12a>
	return pvReturn;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
}
 8006c3e:	0018      	movs	r0, r3
 8006c40:	46bd      	mov	sp, r7
 8006c42:	b006      	add	sp, #24
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	46c0      	nop			; (mov r8, r8)
 8006c48:	20001128 	.word	0x20001128
 8006c4c:	20001134 	.word	0x20001134
 8006c50:	2000112c 	.word	0x2000112c
 8006c54:	20001120 	.word	0x20001120
 8006c58:	20001130 	.word	0x20001130

08006c5c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d035      	beq.n	8006cda <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c6e:	2308      	movs	r3, #8
 8006c70:	425b      	negs	r3, r3
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	18d3      	adds	r3, r2, r3
 8006c76:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	4b18      	ldr	r3, [pc, #96]	; (8006ce4 <vPortFree+0x88>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4013      	ands	r3, r2
 8006c86:	d101      	bne.n	8006c8c <vPortFree+0x30>
 8006c88:	b672      	cpsid	i
 8006c8a:	e7fe      	b.n	8006c8a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d001      	beq.n	8006c98 <vPortFree+0x3c>
 8006c94:	b672      	cpsid	i
 8006c96:	e7fe      	b.n	8006c96 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	685a      	ldr	r2, [r3, #4]
 8006c9c:	4b11      	ldr	r3, [pc, #68]	; (8006ce4 <vPortFree+0x88>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	d01a      	beq.n	8006cda <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d116      	bne.n	8006cda <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	4b0c      	ldr	r3, [pc, #48]	; (8006ce4 <vPortFree+0x88>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	43db      	mvns	r3, r3
 8006cb6:	401a      	ands	r2, r3
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006cbc:	f7ff fb38 	bl	8006330 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	4b08      	ldr	r3, [pc, #32]	; (8006ce8 <vPortFree+0x8c>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	18d2      	adds	r2, r2, r3
 8006cca:	4b07      	ldr	r3, [pc, #28]	; (8006ce8 <vPortFree+0x8c>)
 8006ccc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	0018      	movs	r0, r3
 8006cd2:	f000 f86b 	bl	8006dac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006cd6:	f7ff fb37 	bl	8006348 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006cda:	46c0      	nop			; (mov r8, r8)
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	b004      	add	sp, #16
 8006ce0:	bd80      	pop	{r7, pc}
 8006ce2:	46c0      	nop			; (mov r8, r8)
 8006ce4:	20001134 	.word	0x20001134
 8006ce8:	2000112c 	.word	0x2000112c

08006cec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006cf2:	23c0      	movs	r3, #192	; 0xc0
 8006cf4:	011b      	lsls	r3, r3, #4
 8006cf6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006cf8:	4b26      	ldr	r3, [pc, #152]	; (8006d94 <prvHeapInit+0xa8>)
 8006cfa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2207      	movs	r2, #7
 8006d00:	4013      	ands	r3, r2
 8006d02:	d00c      	beq.n	8006d1e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	3307      	adds	r3, #7
 8006d08:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2207      	movs	r2, #7
 8006d0e:	4393      	bics	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	1ad2      	subs	r2, r2, r3
 8006d18:	4b1e      	ldr	r3, [pc, #120]	; (8006d94 <prvHeapInit+0xa8>)
 8006d1a:	18d3      	adds	r3, r2, r3
 8006d1c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006d22:	4b1d      	ldr	r3, [pc, #116]	; (8006d98 <prvHeapInit+0xac>)
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006d28:	4b1b      	ldr	r3, [pc, #108]	; (8006d98 <prvHeapInit+0xac>)
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	18d3      	adds	r3, r2, r3
 8006d34:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d36:	2208      	movs	r2, #8
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	1a9b      	subs	r3, r3, r2
 8006d3c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2207      	movs	r2, #7
 8006d42:	4393      	bics	r3, r2
 8006d44:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d46:	68fa      	ldr	r2, [r7, #12]
 8006d48:	4b14      	ldr	r3, [pc, #80]	; (8006d9c <prvHeapInit+0xb0>)
 8006d4a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8006d4c:	4b13      	ldr	r3, [pc, #76]	; (8006d9c <prvHeapInit+0xb0>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2200      	movs	r2, #0
 8006d52:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d54:	4b11      	ldr	r3, [pc, #68]	; (8006d9c <prvHeapInit+0xb0>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	1ad2      	subs	r2, r2, r3
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d6a:	4b0c      	ldr	r3, [pc, #48]	; (8006d9c <prvHeapInit+0xb0>)
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	683b      	ldr	r3, [r7, #0]
 8006d70:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	4b0a      	ldr	r3, [pc, #40]	; (8006da0 <prvHeapInit+0xb4>)
 8006d78:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	4b09      	ldr	r3, [pc, #36]	; (8006da4 <prvHeapInit+0xb8>)
 8006d80:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d82:	4b09      	ldr	r3, [pc, #36]	; (8006da8 <prvHeapInit+0xbc>)
 8006d84:	2280      	movs	r2, #128	; 0x80
 8006d86:	0612      	lsls	r2, r2, #24
 8006d88:	601a      	str	r2, [r3, #0]
}
 8006d8a:	46c0      	nop			; (mov r8, r8)
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	b004      	add	sp, #16
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	46c0      	nop			; (mov r8, r8)
 8006d94:	20000520 	.word	0x20000520
 8006d98:	20001120 	.word	0x20001120
 8006d9c:	20001128 	.word	0x20001128
 8006da0:	20001130 	.word	0x20001130
 8006da4:	2000112c 	.word	0x2000112c
 8006da8:	20001134 	.word	0x20001134

08006dac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006db4:	4b27      	ldr	r3, [pc, #156]	; (8006e54 <prvInsertBlockIntoFreeList+0xa8>)
 8006db6:	60fb      	str	r3, [r7, #12]
 8006db8:	e002      	b.n	8006dc0 <prvInsertBlockIntoFreeList+0x14>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d8f7      	bhi.n	8006dba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	18d3      	adds	r3, r2, r3
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d108      	bne.n	8006dee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	685a      	ldr	r2, [r3, #4]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	18d2      	adds	r2, r2, r3
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	18d2      	adds	r2, r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d118      	bne.n	8006e34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	4b14      	ldr	r3, [pc, #80]	; (8006e58 <prvInsertBlockIntoFreeList+0xac>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d00d      	beq.n	8006e2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	18d2      	adds	r2, r2, r3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	601a      	str	r2, [r3, #0]
 8006e28:	e008      	b.n	8006e3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006e2a:	4b0b      	ldr	r3, [pc, #44]	; (8006e58 <prvInsertBlockIntoFreeList+0xac>)
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	601a      	str	r2, [r3, #0]
 8006e32:	e003      	b.n	8006e3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681a      	ldr	r2, [r3, #0]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d002      	beq.n	8006e4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e4a:	46c0      	nop			; (mov r8, r8)
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	b004      	add	sp, #16
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	46c0      	nop			; (mov r8, r8)
 8006e54:	20001120 	.word	0x20001120
 8006e58:	20001128 	.word	0x20001128

08006e5c <floorf>:
 8006e5c:	b570      	push	{r4, r5, r6, lr}
 8006e5e:	0045      	lsls	r5, r0, #1
 8006e60:	086e      	lsrs	r6, r5, #1
 8006e62:	0e2d      	lsrs	r5, r5, #24
 8006e64:	3d7f      	subs	r5, #127	; 0x7f
 8006e66:	0004      	movs	r4, r0
 8006e68:	2d16      	cmp	r5, #22
 8006e6a:	dc24      	bgt.n	8006eb6 <floorf+0x5a>
 8006e6c:	2d00      	cmp	r5, #0
 8006e6e:	da0e      	bge.n	8006e8e <floorf+0x32>
 8006e70:	4915      	ldr	r1, [pc, #84]	; (8006ec8 <floorf+0x6c>)
 8006e72:	f7f9 fa27 	bl	80002c4 <__aeabi_fadd>
 8006e76:	2100      	movs	r1, #0
 8006e78:	f7f9 f9f8 	bl	800026c <__aeabi_fcmpgt>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	d004      	beq.n	8006e8a <floorf+0x2e>
 8006e80:	2c00      	cmp	r4, #0
 8006e82:	da1f      	bge.n	8006ec4 <floorf+0x68>
 8006e84:	2e00      	cmp	r6, #0
 8006e86:	d000      	beq.n	8006e8a <floorf+0x2e>
 8006e88:	4c10      	ldr	r4, [pc, #64]	; (8006ecc <floorf+0x70>)
 8006e8a:	1c20      	adds	r0, r4, #0
 8006e8c:	e019      	b.n	8006ec2 <floorf+0x66>
 8006e8e:	4e10      	ldr	r6, [pc, #64]	; (8006ed0 <floorf+0x74>)
 8006e90:	412e      	asrs	r6, r5
 8006e92:	4206      	tst	r6, r0
 8006e94:	d015      	beq.n	8006ec2 <floorf+0x66>
 8006e96:	490c      	ldr	r1, [pc, #48]	; (8006ec8 <floorf+0x6c>)
 8006e98:	f7f9 fa14 	bl	80002c4 <__aeabi_fadd>
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	f7f9 f9e5 	bl	800026c <__aeabi_fcmpgt>
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	d0f1      	beq.n	8006e8a <floorf+0x2e>
 8006ea6:	2c00      	cmp	r4, #0
 8006ea8:	da03      	bge.n	8006eb2 <floorf+0x56>
 8006eaa:	2380      	movs	r3, #128	; 0x80
 8006eac:	041b      	lsls	r3, r3, #16
 8006eae:	412b      	asrs	r3, r5
 8006eb0:	18e4      	adds	r4, r4, r3
 8006eb2:	43b4      	bics	r4, r6
 8006eb4:	e7e9      	b.n	8006e8a <floorf+0x2e>
 8006eb6:	4b07      	ldr	r3, [pc, #28]	; (8006ed4 <floorf+0x78>)
 8006eb8:	429e      	cmp	r6, r3
 8006eba:	d902      	bls.n	8006ec2 <floorf+0x66>
 8006ebc:	1c01      	adds	r1, r0, #0
 8006ebe:	f7f9 fa01 	bl	80002c4 <__aeabi_fadd>
 8006ec2:	bd70      	pop	{r4, r5, r6, pc}
 8006ec4:	2400      	movs	r4, #0
 8006ec6:	e7e0      	b.n	8006e8a <floorf+0x2e>
 8006ec8:	7149f2ca 	.word	0x7149f2ca
 8006ecc:	bf800000 	.word	0xbf800000
 8006ed0:	007fffff 	.word	0x007fffff
 8006ed4:	7f7fffff 	.word	0x7f7fffff

08006ed8 <atan2f>:
 8006ed8:	b510      	push	{r4, lr}
 8006eda:	f000 f801 	bl	8006ee0 <__ieee754_atan2f>
 8006ede:	bd10      	pop	{r4, pc}

08006ee0 <__ieee754_atan2f>:
 8006ee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ee2:	25ff      	movs	r5, #255	; 0xff
 8006ee4:	004a      	lsls	r2, r1, #1
 8006ee6:	9101      	str	r1, [sp, #4]
 8006ee8:	0852      	lsrs	r2, r2, #1
 8006eea:	05ed      	lsls	r5, r5, #23
 8006eec:	42aa      	cmp	r2, r5
 8006eee:	dc04      	bgt.n	8006efa <__ieee754_atan2f+0x1a>
 8006ef0:	0043      	lsls	r3, r0, #1
 8006ef2:	0007      	movs	r7, r0
 8006ef4:	085b      	lsrs	r3, r3, #1
 8006ef6:	42ab      	cmp	r3, r5
 8006ef8:	dd02      	ble.n	8006f00 <__ieee754_atan2f+0x20>
 8006efa:	f7f9 f9e3 	bl	80002c4 <__aeabi_fadd>
 8006efe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006f00:	24fe      	movs	r4, #254	; 0xfe
 8006f02:	05a4      	lsls	r4, r4, #22
 8006f04:	42a1      	cmp	r1, r4
 8006f06:	d102      	bne.n	8006f0e <__ieee754_atan2f+0x2e>
 8006f08:	f000 f872 	bl	8006ff0 <atanf>
 8006f0c:	e7f7      	b.n	8006efe <__ieee754_atan2f+0x1e>
 8006f0e:	2602      	movs	r6, #2
 8006f10:	178c      	asrs	r4, r1, #30
 8006f12:	4034      	ands	r4, r6
 8006f14:	0fc6      	lsrs	r6, r0, #31
 8006f16:	4334      	orrs	r4, r6
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d105      	bne.n	8006f28 <__ieee754_atan2f+0x48>
 8006f1c:	2c02      	cmp	r4, #2
 8006f1e:	d050      	beq.n	8006fc2 <__ieee754_atan2f+0xe2>
 8006f20:	2c03      	cmp	r4, #3
 8006f22:	d1ec      	bne.n	8006efe <__ieee754_atan2f+0x1e>
 8006f24:	4829      	ldr	r0, [pc, #164]	; (8006fcc <__ieee754_atan2f+0xec>)
 8006f26:	e7ea      	b.n	8006efe <__ieee754_atan2f+0x1e>
 8006f28:	2a00      	cmp	r2, #0
 8006f2a:	d103      	bne.n	8006f34 <__ieee754_atan2f+0x54>
 8006f2c:	2f00      	cmp	r7, #0
 8006f2e:	da4a      	bge.n	8006fc6 <__ieee754_atan2f+0xe6>
 8006f30:	4827      	ldr	r0, [pc, #156]	; (8006fd0 <__ieee754_atan2f+0xf0>)
 8006f32:	e7e4      	b.n	8006efe <__ieee754_atan2f+0x1e>
 8006f34:	42aa      	cmp	r2, r5
 8006f36:	d117      	bne.n	8006f68 <__ieee754_atan2f+0x88>
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d10b      	bne.n	8006f54 <__ieee754_atan2f+0x74>
 8006f3c:	2c02      	cmp	r4, #2
 8006f3e:	d005      	beq.n	8006f4c <__ieee754_atan2f+0x6c>
 8006f40:	2c03      	cmp	r4, #3
 8006f42:	d005      	beq.n	8006f50 <__ieee754_atan2f+0x70>
 8006f44:	2c01      	cmp	r4, #1
 8006f46:	d13a      	bne.n	8006fbe <__ieee754_atan2f+0xde>
 8006f48:	4822      	ldr	r0, [pc, #136]	; (8006fd4 <__ieee754_atan2f+0xf4>)
 8006f4a:	e7d8      	b.n	8006efe <__ieee754_atan2f+0x1e>
 8006f4c:	4822      	ldr	r0, [pc, #136]	; (8006fd8 <__ieee754_atan2f+0xf8>)
 8006f4e:	e7d6      	b.n	8006efe <__ieee754_atan2f+0x1e>
 8006f50:	4822      	ldr	r0, [pc, #136]	; (8006fdc <__ieee754_atan2f+0xfc>)
 8006f52:	e7d4      	b.n	8006efe <__ieee754_atan2f+0x1e>
 8006f54:	2c02      	cmp	r4, #2
 8006f56:	d034      	beq.n	8006fc2 <__ieee754_atan2f+0xe2>
 8006f58:	2c03      	cmp	r4, #3
 8006f5a:	d0e3      	beq.n	8006f24 <__ieee754_atan2f+0x44>
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	2c01      	cmp	r4, #1
 8006f60:	d1cd      	bne.n	8006efe <__ieee754_atan2f+0x1e>
 8006f62:	2080      	movs	r0, #128	; 0x80
 8006f64:	0600      	lsls	r0, r0, #24
 8006f66:	e7ca      	b.n	8006efe <__ieee754_atan2f+0x1e>
 8006f68:	42ab      	cmp	r3, r5
 8006f6a:	d0df      	beq.n	8006f2c <__ieee754_atan2f+0x4c>
 8006f6c:	1a9b      	subs	r3, r3, r2
 8006f6e:	15db      	asrs	r3, r3, #23
 8006f70:	2b3c      	cmp	r3, #60	; 0x3c
 8006f72:	dc14      	bgt.n	8006f9e <__ieee754_atan2f+0xbe>
 8006f74:	2900      	cmp	r1, #0
 8006f76:	da01      	bge.n	8006f7c <__ieee754_atan2f+0x9c>
 8006f78:	333c      	adds	r3, #60	; 0x3c
 8006f7a:	db12      	blt.n	8006fa2 <__ieee754_atan2f+0xc2>
 8006f7c:	f7f9 fb3c 	bl	80005f8 <__aeabi_fdiv>
 8006f80:	f000 f948 	bl	8007214 <fabsf>
 8006f84:	f000 f834 	bl	8006ff0 <atanf>
 8006f88:	2c01      	cmp	r4, #1
 8006f8a:	d00c      	beq.n	8006fa6 <__ieee754_atan2f+0xc6>
 8006f8c:	2c02      	cmp	r4, #2
 8006f8e:	d00e      	beq.n	8006fae <__ieee754_atan2f+0xce>
 8006f90:	2c00      	cmp	r4, #0
 8006f92:	d0b4      	beq.n	8006efe <__ieee754_atan2f+0x1e>
 8006f94:	4912      	ldr	r1, [pc, #72]	; (8006fe0 <__ieee754_atan2f+0x100>)
 8006f96:	f7f9 f995 	bl	80002c4 <__aeabi_fadd>
 8006f9a:	4912      	ldr	r1, [pc, #72]	; (8006fe4 <__ieee754_atan2f+0x104>)
 8006f9c:	e00c      	b.n	8006fb8 <__ieee754_atan2f+0xd8>
 8006f9e:	4812      	ldr	r0, [pc, #72]	; (8006fe8 <__ieee754_atan2f+0x108>)
 8006fa0:	e7f2      	b.n	8006f88 <__ieee754_atan2f+0xa8>
 8006fa2:	2000      	movs	r0, #0
 8006fa4:	e7f0      	b.n	8006f88 <__ieee754_atan2f+0xa8>
 8006fa6:	2380      	movs	r3, #128	; 0x80
 8006fa8:	061b      	lsls	r3, r3, #24
 8006faa:	18c0      	adds	r0, r0, r3
 8006fac:	e7a7      	b.n	8006efe <__ieee754_atan2f+0x1e>
 8006fae:	490c      	ldr	r1, [pc, #48]	; (8006fe0 <__ieee754_atan2f+0x100>)
 8006fb0:	f7f9 f988 	bl	80002c4 <__aeabi_fadd>
 8006fb4:	1c01      	adds	r1, r0, #0
 8006fb6:	480b      	ldr	r0, [pc, #44]	; (8006fe4 <__ieee754_atan2f+0x104>)
 8006fb8:	f7f9 fe28 	bl	8000c0c <__aeabi_fsub>
 8006fbc:	e79f      	b.n	8006efe <__ieee754_atan2f+0x1e>
 8006fbe:	480b      	ldr	r0, [pc, #44]	; (8006fec <__ieee754_atan2f+0x10c>)
 8006fc0:	e79d      	b.n	8006efe <__ieee754_atan2f+0x1e>
 8006fc2:	4808      	ldr	r0, [pc, #32]	; (8006fe4 <__ieee754_atan2f+0x104>)
 8006fc4:	e79b      	b.n	8006efe <__ieee754_atan2f+0x1e>
 8006fc6:	4808      	ldr	r0, [pc, #32]	; (8006fe8 <__ieee754_atan2f+0x108>)
 8006fc8:	e799      	b.n	8006efe <__ieee754_atan2f+0x1e>
 8006fca:	46c0      	nop			; (mov r8, r8)
 8006fcc:	c0490fdb 	.word	0xc0490fdb
 8006fd0:	bfc90fdb 	.word	0xbfc90fdb
 8006fd4:	bf490fdb 	.word	0xbf490fdb
 8006fd8:	4016cbe4 	.word	0x4016cbe4
 8006fdc:	c016cbe4 	.word	0xc016cbe4
 8006fe0:	33bbbd2e 	.word	0x33bbbd2e
 8006fe4:	40490fdb 	.word	0x40490fdb
 8006fe8:	3fc90fdb 	.word	0x3fc90fdb
 8006fec:	3f490fdb 	.word	0x3f490fdb

08006ff0 <atanf>:
 8006ff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ff2:	4b71      	ldr	r3, [pc, #452]	; (80071b8 <atanf+0x1c8>)
 8006ff4:	0045      	lsls	r5, r0, #1
 8006ff6:	1c04      	adds	r4, r0, #0
 8006ff8:	9001      	str	r0, [sp, #4]
 8006ffa:	086d      	lsrs	r5, r5, #1
 8006ffc:	429d      	cmp	r5, r3
 8006ffe:	dd0f      	ble.n	8007020 <atanf+0x30>
 8007000:	23ff      	movs	r3, #255	; 0xff
 8007002:	05db      	lsls	r3, r3, #23
 8007004:	429d      	cmp	r5, r3
 8007006:	dd04      	ble.n	8007012 <atanf+0x22>
 8007008:	1c01      	adds	r1, r0, #0
 800700a:	f7f9 f95b 	bl	80002c4 <__aeabi_fadd>
 800700e:	1c04      	adds	r4, r0, #0
 8007010:	e004      	b.n	800701c <atanf+0x2c>
 8007012:	9b01      	ldr	r3, [sp, #4]
 8007014:	2b00      	cmp	r3, #0
 8007016:	dc00      	bgt.n	800701a <atanf+0x2a>
 8007018:	e0cb      	b.n	80071b2 <atanf+0x1c2>
 800701a:	4c68      	ldr	r4, [pc, #416]	; (80071bc <atanf+0x1cc>)
 800701c:	1c20      	adds	r0, r4, #0
 800701e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007020:	4b67      	ldr	r3, [pc, #412]	; (80071c0 <atanf+0x1d0>)
 8007022:	429d      	cmp	r5, r3
 8007024:	dc0e      	bgt.n	8007044 <atanf+0x54>
 8007026:	4b67      	ldr	r3, [pc, #412]	; (80071c4 <atanf+0x1d4>)
 8007028:	429d      	cmp	r5, r3
 800702a:	dc08      	bgt.n	800703e <atanf+0x4e>
 800702c:	4966      	ldr	r1, [pc, #408]	; (80071c8 <atanf+0x1d8>)
 800702e:	f7f9 f949 	bl	80002c4 <__aeabi_fadd>
 8007032:	21fe      	movs	r1, #254	; 0xfe
 8007034:	0589      	lsls	r1, r1, #22
 8007036:	f7f9 f919 	bl	800026c <__aeabi_fcmpgt>
 800703a:	2800      	cmp	r0, #0
 800703c:	d1ee      	bne.n	800701c <atanf+0x2c>
 800703e:	2501      	movs	r5, #1
 8007040:	426d      	negs	r5, r5
 8007042:	e01b      	b.n	800707c <atanf+0x8c>
 8007044:	f000 f8e6 	bl	8007214 <fabsf>
 8007048:	4b60      	ldr	r3, [pc, #384]	; (80071cc <atanf+0x1dc>)
 800704a:	1c04      	adds	r4, r0, #0
 800704c:	429d      	cmp	r5, r3
 800704e:	dc7b      	bgt.n	8007148 <atanf+0x158>
 8007050:	4b5f      	ldr	r3, [pc, #380]	; (80071d0 <atanf+0x1e0>)
 8007052:	429d      	cmp	r5, r3
 8007054:	dc67      	bgt.n	8007126 <atanf+0x136>
 8007056:	1c01      	adds	r1, r0, #0
 8007058:	f7f9 f934 	bl	80002c4 <__aeabi_fadd>
 800705c:	21fe      	movs	r1, #254	; 0xfe
 800705e:	0589      	lsls	r1, r1, #22
 8007060:	f7f9 fdd4 	bl	8000c0c <__aeabi_fsub>
 8007064:	2180      	movs	r1, #128	; 0x80
 8007066:	1c05      	adds	r5, r0, #0
 8007068:	05c9      	lsls	r1, r1, #23
 800706a:	1c20      	adds	r0, r4, #0
 800706c:	f7f9 f92a 	bl	80002c4 <__aeabi_fadd>
 8007070:	1c01      	adds	r1, r0, #0
 8007072:	1c28      	adds	r0, r5, #0
 8007074:	f7f9 fac0 	bl	80005f8 <__aeabi_fdiv>
 8007078:	2500      	movs	r5, #0
 800707a:	1c04      	adds	r4, r0, #0
 800707c:	1c21      	adds	r1, r4, #0
 800707e:	1c20      	adds	r0, r4, #0
 8007080:	f7f9 fc92 	bl	80009a8 <__aeabi_fmul>
 8007084:	1c01      	adds	r1, r0, #0
 8007086:	1c07      	adds	r7, r0, #0
 8007088:	f7f9 fc8e 	bl	80009a8 <__aeabi_fmul>
 800708c:	4951      	ldr	r1, [pc, #324]	; (80071d4 <atanf+0x1e4>)
 800708e:	1c06      	adds	r6, r0, #0
 8007090:	f7f9 fc8a 	bl	80009a8 <__aeabi_fmul>
 8007094:	4950      	ldr	r1, [pc, #320]	; (80071d8 <atanf+0x1e8>)
 8007096:	f7f9 f915 	bl	80002c4 <__aeabi_fadd>
 800709a:	1c31      	adds	r1, r6, #0
 800709c:	f7f9 fc84 	bl	80009a8 <__aeabi_fmul>
 80070a0:	494e      	ldr	r1, [pc, #312]	; (80071dc <atanf+0x1ec>)
 80070a2:	f7f9 f90f 	bl	80002c4 <__aeabi_fadd>
 80070a6:	1c31      	adds	r1, r6, #0
 80070a8:	f7f9 fc7e 	bl	80009a8 <__aeabi_fmul>
 80070ac:	494c      	ldr	r1, [pc, #304]	; (80071e0 <atanf+0x1f0>)
 80070ae:	f7f9 f909 	bl	80002c4 <__aeabi_fadd>
 80070b2:	1c31      	adds	r1, r6, #0
 80070b4:	f7f9 fc78 	bl	80009a8 <__aeabi_fmul>
 80070b8:	494a      	ldr	r1, [pc, #296]	; (80071e4 <atanf+0x1f4>)
 80070ba:	f7f9 f903 	bl	80002c4 <__aeabi_fadd>
 80070be:	1c31      	adds	r1, r6, #0
 80070c0:	f7f9 fc72 	bl	80009a8 <__aeabi_fmul>
 80070c4:	4948      	ldr	r1, [pc, #288]	; (80071e8 <atanf+0x1f8>)
 80070c6:	f7f9 f8fd 	bl	80002c4 <__aeabi_fadd>
 80070ca:	1c39      	adds	r1, r7, #0
 80070cc:	f7f9 fc6c 	bl	80009a8 <__aeabi_fmul>
 80070d0:	4946      	ldr	r1, [pc, #280]	; (80071ec <atanf+0x1fc>)
 80070d2:	1c07      	adds	r7, r0, #0
 80070d4:	1c30      	adds	r0, r6, #0
 80070d6:	f7f9 fc67 	bl	80009a8 <__aeabi_fmul>
 80070da:	4945      	ldr	r1, [pc, #276]	; (80071f0 <atanf+0x200>)
 80070dc:	f7f9 fd96 	bl	8000c0c <__aeabi_fsub>
 80070e0:	1c31      	adds	r1, r6, #0
 80070e2:	f7f9 fc61 	bl	80009a8 <__aeabi_fmul>
 80070e6:	4943      	ldr	r1, [pc, #268]	; (80071f4 <atanf+0x204>)
 80070e8:	f7f9 fd90 	bl	8000c0c <__aeabi_fsub>
 80070ec:	1c31      	adds	r1, r6, #0
 80070ee:	f7f9 fc5b 	bl	80009a8 <__aeabi_fmul>
 80070f2:	4941      	ldr	r1, [pc, #260]	; (80071f8 <atanf+0x208>)
 80070f4:	f7f9 fd8a 	bl	8000c0c <__aeabi_fsub>
 80070f8:	1c31      	adds	r1, r6, #0
 80070fa:	f7f9 fc55 	bl	80009a8 <__aeabi_fmul>
 80070fe:	493f      	ldr	r1, [pc, #252]	; (80071fc <atanf+0x20c>)
 8007100:	f7f9 fd84 	bl	8000c0c <__aeabi_fsub>
 8007104:	1c31      	adds	r1, r6, #0
 8007106:	f7f9 fc4f 	bl	80009a8 <__aeabi_fmul>
 800710a:	1c01      	adds	r1, r0, #0
 800710c:	1c38      	adds	r0, r7, #0
 800710e:	f7f9 f8d9 	bl	80002c4 <__aeabi_fadd>
 8007112:	1c21      	adds	r1, r4, #0
 8007114:	f7f9 fc48 	bl	80009a8 <__aeabi_fmul>
 8007118:	1c6b      	adds	r3, r5, #1
 800711a:	d134      	bne.n	8007186 <atanf+0x196>
 800711c:	1c01      	adds	r1, r0, #0
 800711e:	1c20      	adds	r0, r4, #0
 8007120:	f7f9 fd74 	bl	8000c0c <__aeabi_fsub>
 8007124:	e773      	b.n	800700e <atanf+0x1e>
 8007126:	21fe      	movs	r1, #254	; 0xfe
 8007128:	0589      	lsls	r1, r1, #22
 800712a:	f7f9 fd6f 	bl	8000c0c <__aeabi_fsub>
 800712e:	21fe      	movs	r1, #254	; 0xfe
 8007130:	1c05      	adds	r5, r0, #0
 8007132:	0589      	lsls	r1, r1, #22
 8007134:	1c20      	adds	r0, r4, #0
 8007136:	f7f9 f8c5 	bl	80002c4 <__aeabi_fadd>
 800713a:	1c01      	adds	r1, r0, #0
 800713c:	1c28      	adds	r0, r5, #0
 800713e:	f7f9 fa5b 	bl	80005f8 <__aeabi_fdiv>
 8007142:	2501      	movs	r5, #1
 8007144:	1c04      	adds	r4, r0, #0
 8007146:	e799      	b.n	800707c <atanf+0x8c>
 8007148:	4b2d      	ldr	r3, [pc, #180]	; (8007200 <atanf+0x210>)
 800714a:	429d      	cmp	r5, r3
 800714c:	dc14      	bgt.n	8007178 <atanf+0x188>
 800714e:	21ff      	movs	r1, #255	; 0xff
 8007150:	0589      	lsls	r1, r1, #22
 8007152:	f7f9 fd5b 	bl	8000c0c <__aeabi_fsub>
 8007156:	21ff      	movs	r1, #255	; 0xff
 8007158:	1c05      	adds	r5, r0, #0
 800715a:	0589      	lsls	r1, r1, #22
 800715c:	1c20      	adds	r0, r4, #0
 800715e:	f7f9 fc23 	bl	80009a8 <__aeabi_fmul>
 8007162:	21fe      	movs	r1, #254	; 0xfe
 8007164:	0589      	lsls	r1, r1, #22
 8007166:	f7f9 f8ad 	bl	80002c4 <__aeabi_fadd>
 800716a:	1c01      	adds	r1, r0, #0
 800716c:	1c28      	adds	r0, r5, #0
 800716e:	f7f9 fa43 	bl	80005f8 <__aeabi_fdiv>
 8007172:	2502      	movs	r5, #2
 8007174:	1c04      	adds	r4, r0, #0
 8007176:	e781      	b.n	800707c <atanf+0x8c>
 8007178:	1c01      	adds	r1, r0, #0
 800717a:	4822      	ldr	r0, [pc, #136]	; (8007204 <atanf+0x214>)
 800717c:	f7f9 fa3c 	bl	80005f8 <__aeabi_fdiv>
 8007180:	2503      	movs	r5, #3
 8007182:	1c04      	adds	r4, r0, #0
 8007184:	e77a      	b.n	800707c <atanf+0x8c>
 8007186:	4b20      	ldr	r3, [pc, #128]	; (8007208 <atanf+0x218>)
 8007188:	00ad      	lsls	r5, r5, #2
 800718a:	58e9      	ldr	r1, [r5, r3]
 800718c:	f7f9 fd3e 	bl	8000c0c <__aeabi_fsub>
 8007190:	1c21      	adds	r1, r4, #0
 8007192:	f7f9 fd3b 	bl	8000c0c <__aeabi_fsub>
 8007196:	4b1d      	ldr	r3, [pc, #116]	; (800720c <atanf+0x21c>)
 8007198:	1c01      	adds	r1, r0, #0
 800719a:	58e8      	ldr	r0, [r5, r3]
 800719c:	f7f9 fd36 	bl	8000c0c <__aeabi_fsub>
 80071a0:	9b01      	ldr	r3, [sp, #4]
 80071a2:	1c04      	adds	r4, r0, #0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	db00      	blt.n	80071aa <atanf+0x1ba>
 80071a8:	e738      	b.n	800701c <atanf+0x2c>
 80071aa:	2380      	movs	r3, #128	; 0x80
 80071ac:	061b      	lsls	r3, r3, #24
 80071ae:	18c4      	adds	r4, r0, r3
 80071b0:	e734      	b.n	800701c <atanf+0x2c>
 80071b2:	4c17      	ldr	r4, [pc, #92]	; (8007210 <atanf+0x220>)
 80071b4:	e732      	b.n	800701c <atanf+0x2c>
 80071b6:	46c0      	nop			; (mov r8, r8)
 80071b8:	507fffff 	.word	0x507fffff
 80071bc:	3fc90fdb 	.word	0x3fc90fdb
 80071c0:	3edfffff 	.word	0x3edfffff
 80071c4:	30ffffff 	.word	0x30ffffff
 80071c8:	7149f2ca 	.word	0x7149f2ca
 80071cc:	3f97ffff 	.word	0x3f97ffff
 80071d0:	3f2fffff 	.word	0x3f2fffff
 80071d4:	3c8569d7 	.word	0x3c8569d7
 80071d8:	3d4bda59 	.word	0x3d4bda59
 80071dc:	3d886b35 	.word	0x3d886b35
 80071e0:	3dba2e6e 	.word	0x3dba2e6e
 80071e4:	3e124925 	.word	0x3e124925
 80071e8:	3eaaaaab 	.word	0x3eaaaaab
 80071ec:	bd15a221 	.word	0xbd15a221
 80071f0:	3d6ef16b 	.word	0x3d6ef16b
 80071f4:	3d9d8795 	.word	0x3d9d8795
 80071f8:	3de38e38 	.word	0x3de38e38
 80071fc:	3e4ccccd 	.word	0x3e4ccccd
 8007200:	401bffff 	.word	0x401bffff
 8007204:	bf800000 	.word	0xbf800000
 8007208:	08007434 	.word	0x08007434
 800720c:	08007424 	.word	0x08007424
 8007210:	bfc90fdb 	.word	0xbfc90fdb

08007214 <fabsf>:
 8007214:	0040      	lsls	r0, r0, #1
 8007216:	0840      	lsrs	r0, r0, #1
 8007218:	4770      	bx	lr
	...

0800721c <__libc_init_array>:
 800721c:	b570      	push	{r4, r5, r6, lr}
 800721e:	2600      	movs	r6, #0
 8007220:	4d0c      	ldr	r5, [pc, #48]	; (8007254 <__libc_init_array+0x38>)
 8007222:	4c0d      	ldr	r4, [pc, #52]	; (8007258 <__libc_init_array+0x3c>)
 8007224:	1b64      	subs	r4, r4, r5
 8007226:	10a4      	asrs	r4, r4, #2
 8007228:	42a6      	cmp	r6, r4
 800722a:	d109      	bne.n	8007240 <__libc_init_array+0x24>
 800722c:	2600      	movs	r6, #0
 800722e:	f000 f821 	bl	8007274 <_init>
 8007232:	4d0a      	ldr	r5, [pc, #40]	; (800725c <__libc_init_array+0x40>)
 8007234:	4c0a      	ldr	r4, [pc, #40]	; (8007260 <__libc_init_array+0x44>)
 8007236:	1b64      	subs	r4, r4, r5
 8007238:	10a4      	asrs	r4, r4, #2
 800723a:	42a6      	cmp	r6, r4
 800723c:	d105      	bne.n	800724a <__libc_init_array+0x2e>
 800723e:	bd70      	pop	{r4, r5, r6, pc}
 8007240:	00b3      	lsls	r3, r6, #2
 8007242:	58eb      	ldr	r3, [r5, r3]
 8007244:	4798      	blx	r3
 8007246:	3601      	adds	r6, #1
 8007248:	e7ee      	b.n	8007228 <__libc_init_array+0xc>
 800724a:	00b3      	lsls	r3, r6, #2
 800724c:	58eb      	ldr	r3, [r5, r3]
 800724e:	4798      	blx	r3
 8007250:	3601      	adds	r6, #1
 8007252:	e7f2      	b.n	800723a <__libc_init_array+0x1e>
 8007254:	08007444 	.word	0x08007444
 8007258:	08007444 	.word	0x08007444
 800725c:	08007444 	.word	0x08007444
 8007260:	08007448 	.word	0x08007448

08007264 <memset>:
 8007264:	0003      	movs	r3, r0
 8007266:	1812      	adds	r2, r2, r0
 8007268:	4293      	cmp	r3, r2
 800726a:	d100      	bne.n	800726e <memset+0xa>
 800726c:	4770      	bx	lr
 800726e:	7019      	strb	r1, [r3, #0]
 8007270:	3301      	adds	r3, #1
 8007272:	e7f9      	b.n	8007268 <memset+0x4>

08007274 <_init>:
 8007274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007276:	46c0      	nop			; (mov r8, r8)
 8007278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800727a:	bc08      	pop	{r3}
 800727c:	469e      	mov	lr, r3
 800727e:	4770      	bx	lr

08007280 <_fini>:
 8007280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007282:	46c0      	nop			; (mov r8, r8)
 8007284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007286:	bc08      	pop	{r3}
 8007288:	469e      	mov	lr, r3
 800728a:	4770      	bx	lr
