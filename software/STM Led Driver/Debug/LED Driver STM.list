
LED Driver STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b1c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000160  08005bdc  08005bdc  00015bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d3c  08005d3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08005d3c  08005d3c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005d3c  08005d3c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d3c  08005d3c  00015d3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d40  08005d40  00015d40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005d44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000000c  08005d50  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08005d50  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ece8  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002002  00000000  00000000  0002ed1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c18  00000000  00000000  00030d20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b20  00000000  00000000  00031938  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000036e2  00000000  00000000  00032458  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000adbf  00000000  00000000  00035b3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00050586  00000000  00000000  000408f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00090e7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002eac  00000000  00000000  00090efc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005bc4 	.word	0x08005bc4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08005bc4 	.word	0x08005bc4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c08      	adds	r0, r1, #0
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fb6d 	bl	8000908 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 faef 	bl	800081c <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fb5f 	bl	8000908 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fb55 	bl	8000908 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fafd 	bl	800086c <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 faf3 	bl	800086c <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_f2uiz>:
 8000294:	219e      	movs	r1, #158	; 0x9e
 8000296:	b510      	push	{r4, lr}
 8000298:	05c9      	lsls	r1, r1, #23
 800029a:	1c04      	adds	r4, r0, #0
 800029c:	f7ff fff0 	bl	8000280 <__aeabi_fcmpge>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d103      	bne.n	80002ac <__aeabi_f2uiz+0x18>
 80002a4:	1c20      	adds	r0, r4, #0
 80002a6:	f000 fe75 	bl	8000f94 <__aeabi_f2iz>
 80002aa:	bd10      	pop	{r4, pc}
 80002ac:	219e      	movs	r1, #158	; 0x9e
 80002ae:	1c20      	adds	r0, r4, #0
 80002b0:	05c9      	lsls	r1, r1, #23
 80002b2:	f000 fcab 	bl	8000c0c <__aeabi_fsub>
 80002b6:	f000 fe6d 	bl	8000f94 <__aeabi_f2iz>
 80002ba:	2380      	movs	r3, #128	; 0x80
 80002bc:	061b      	lsls	r3, r3, #24
 80002be:	469c      	mov	ip, r3
 80002c0:	4460      	add	r0, ip
 80002c2:	e7f2      	b.n	80002aa <__aeabi_f2uiz+0x16>

080002c4 <__aeabi_fadd>:
 80002c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002c6:	4647      	mov	r7, r8
 80002c8:	46ce      	mov	lr, r9
 80002ca:	0243      	lsls	r3, r0, #9
 80002cc:	0a5b      	lsrs	r3, r3, #9
 80002ce:	0044      	lsls	r4, r0, #1
 80002d0:	0fc2      	lsrs	r2, r0, #31
 80002d2:	469c      	mov	ip, r3
 80002d4:	0048      	lsls	r0, r1, #1
 80002d6:	00dd      	lsls	r5, r3, #3
 80002d8:	024b      	lsls	r3, r1, #9
 80002da:	0e24      	lsrs	r4, r4, #24
 80002dc:	0a5b      	lsrs	r3, r3, #9
 80002de:	0e00      	lsrs	r0, r0, #24
 80002e0:	b580      	push	{r7, lr}
 80002e2:	4698      	mov	r8, r3
 80002e4:	0026      	movs	r6, r4
 80002e6:	4691      	mov	r9, r2
 80002e8:	0fc9      	lsrs	r1, r1, #31
 80002ea:	00db      	lsls	r3, r3, #3
 80002ec:	1a27      	subs	r7, r4, r0
 80002ee:	428a      	cmp	r2, r1
 80002f0:	d029      	beq.n	8000346 <__aeabi_fadd+0x82>
 80002f2:	2f00      	cmp	r7, #0
 80002f4:	dd15      	ble.n	8000322 <__aeabi_fadd+0x5e>
 80002f6:	2800      	cmp	r0, #0
 80002f8:	d14a      	bne.n	8000390 <__aeabi_fadd+0xcc>
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d000      	beq.n	8000300 <__aeabi_fadd+0x3c>
 80002fe:	e095      	b.n	800042c <__aeabi_fadd+0x168>
 8000300:	08ed      	lsrs	r5, r5, #3
 8000302:	2cff      	cmp	r4, #255	; 0xff
 8000304:	d100      	bne.n	8000308 <__aeabi_fadd+0x44>
 8000306:	e088      	b.n	800041a <__aeabi_fadd+0x156>
 8000308:	026b      	lsls	r3, r5, #9
 800030a:	0a5b      	lsrs	r3, r3, #9
 800030c:	b2e6      	uxtb	r6, r4
 800030e:	025b      	lsls	r3, r3, #9
 8000310:	05f6      	lsls	r6, r6, #23
 8000312:	0a58      	lsrs	r0, r3, #9
 8000314:	4330      	orrs	r0, r6
 8000316:	07d2      	lsls	r2, r2, #31
 8000318:	4310      	orrs	r0, r2
 800031a:	bc0c      	pop	{r2, r3}
 800031c:	4690      	mov	r8, r2
 800031e:	4699      	mov	r9, r3
 8000320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000322:	2f00      	cmp	r7, #0
 8000324:	d000      	beq.n	8000328 <__aeabi_fadd+0x64>
 8000326:	e087      	b.n	8000438 <__aeabi_fadd+0x174>
 8000328:	1c60      	adds	r0, r4, #1
 800032a:	b2c0      	uxtb	r0, r0
 800032c:	2801      	cmp	r0, #1
 800032e:	dc00      	bgt.n	8000332 <__aeabi_fadd+0x6e>
 8000330:	e0b6      	b.n	80004a0 <__aeabi_fadd+0x1dc>
 8000332:	1aee      	subs	r6, r5, r3
 8000334:	0172      	lsls	r2, r6, #5
 8000336:	d500      	bpl.n	800033a <__aeabi_fadd+0x76>
 8000338:	e0c5      	b.n	80004c6 <__aeabi_fadd+0x202>
 800033a:	2e00      	cmp	r6, #0
 800033c:	d13d      	bne.n	80003ba <__aeabi_fadd+0xf6>
 800033e:	2200      	movs	r2, #0
 8000340:	2600      	movs	r6, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e7e3      	b.n	800030e <__aeabi_fadd+0x4a>
 8000346:	2f00      	cmp	r7, #0
 8000348:	dc00      	bgt.n	800034c <__aeabi_fadd+0x88>
 800034a:	e096      	b.n	800047a <__aeabi_fadd+0x1b6>
 800034c:	2800      	cmp	r0, #0
 800034e:	d05d      	beq.n	800040c <__aeabi_fadd+0x148>
 8000350:	2cff      	cmp	r4, #255	; 0xff
 8000352:	d060      	beq.n	8000416 <__aeabi_fadd+0x152>
 8000354:	2280      	movs	r2, #128	; 0x80
 8000356:	04d2      	lsls	r2, r2, #19
 8000358:	4313      	orrs	r3, r2
 800035a:	2f1b      	cmp	r7, #27
 800035c:	dd00      	ble.n	8000360 <__aeabi_fadd+0x9c>
 800035e:	e0ec      	b.n	800053a <__aeabi_fadd+0x276>
 8000360:	2220      	movs	r2, #32
 8000362:	1bd2      	subs	r2, r2, r7
 8000364:	0018      	movs	r0, r3
 8000366:	4093      	lsls	r3, r2
 8000368:	40f8      	lsrs	r0, r7
 800036a:	1e5a      	subs	r2, r3, #1
 800036c:	4193      	sbcs	r3, r2
 800036e:	4303      	orrs	r3, r0
 8000370:	18ed      	adds	r5, r5, r3
 8000372:	016b      	lsls	r3, r5, #5
 8000374:	d57b      	bpl.n	800046e <__aeabi_fadd+0x1aa>
 8000376:	3401      	adds	r4, #1
 8000378:	2cff      	cmp	r4, #255	; 0xff
 800037a:	d100      	bne.n	800037e <__aeabi_fadd+0xba>
 800037c:	e0b7      	b.n	80004ee <__aeabi_fadd+0x22a>
 800037e:	2201      	movs	r2, #1
 8000380:	2607      	movs	r6, #7
 8000382:	402a      	ands	r2, r5
 8000384:	086b      	lsrs	r3, r5, #1
 8000386:	4d9a      	ldr	r5, [pc, #616]	; (80005f0 <__aeabi_fadd+0x32c>)
 8000388:	401d      	ands	r5, r3
 800038a:	4315      	orrs	r5, r2
 800038c:	402e      	ands	r6, r5
 800038e:	e029      	b.n	80003e4 <__aeabi_fadd+0x120>
 8000390:	2cff      	cmp	r4, #255	; 0xff
 8000392:	d0b5      	beq.n	8000300 <__aeabi_fadd+0x3c>
 8000394:	2280      	movs	r2, #128	; 0x80
 8000396:	04d2      	lsls	r2, r2, #19
 8000398:	4313      	orrs	r3, r2
 800039a:	2f1b      	cmp	r7, #27
 800039c:	dd00      	ble.n	80003a0 <__aeabi_fadd+0xdc>
 800039e:	e0b2      	b.n	8000506 <__aeabi_fadd+0x242>
 80003a0:	2220      	movs	r2, #32
 80003a2:	1bd2      	subs	r2, r2, r7
 80003a4:	0019      	movs	r1, r3
 80003a6:	4093      	lsls	r3, r2
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	1e5a      	subs	r2, r3, #1
 80003ac:	4193      	sbcs	r3, r2
 80003ae:	430b      	orrs	r3, r1
 80003b0:	1aed      	subs	r5, r5, r3
 80003b2:	016b      	lsls	r3, r5, #5
 80003b4:	d55b      	bpl.n	800046e <__aeabi_fadd+0x1aa>
 80003b6:	01ad      	lsls	r5, r5, #6
 80003b8:	09ae      	lsrs	r6, r5, #6
 80003ba:	0030      	movs	r0, r6
 80003bc:	f001 fd48 	bl	8001e50 <__clzsi2>
 80003c0:	3805      	subs	r0, #5
 80003c2:	4086      	lsls	r6, r0
 80003c4:	4284      	cmp	r4, r0
 80003c6:	dc65      	bgt.n	8000494 <__aeabi_fadd+0x1d0>
 80003c8:	1b04      	subs	r4, r0, r4
 80003ca:	0033      	movs	r3, r6
 80003cc:	2020      	movs	r0, #32
 80003ce:	3401      	adds	r4, #1
 80003d0:	40e3      	lsrs	r3, r4
 80003d2:	1b04      	subs	r4, r0, r4
 80003d4:	40a6      	lsls	r6, r4
 80003d6:	1e75      	subs	r5, r6, #1
 80003d8:	41ae      	sbcs	r6, r5
 80003da:	4333      	orrs	r3, r6
 80003dc:	2607      	movs	r6, #7
 80003de:	001d      	movs	r5, r3
 80003e0:	2400      	movs	r4, #0
 80003e2:	401e      	ands	r6, r3
 80003e4:	2201      	movs	r2, #1
 80003e6:	464b      	mov	r3, r9
 80003e8:	401a      	ands	r2, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d004      	beq.n	80003f8 <__aeabi_fadd+0x134>
 80003ee:	230f      	movs	r3, #15
 80003f0:	402b      	ands	r3, r5
 80003f2:	2b04      	cmp	r3, #4
 80003f4:	d000      	beq.n	80003f8 <__aeabi_fadd+0x134>
 80003f6:	3504      	adds	r5, #4
 80003f8:	016b      	lsls	r3, r5, #5
 80003fa:	d400      	bmi.n	80003fe <__aeabi_fadd+0x13a>
 80003fc:	e780      	b.n	8000300 <__aeabi_fadd+0x3c>
 80003fe:	3401      	adds	r4, #1
 8000400:	b2e6      	uxtb	r6, r4
 8000402:	2cff      	cmp	r4, #255	; 0xff
 8000404:	d12f      	bne.n	8000466 <__aeabi_fadd+0x1a2>
 8000406:	26ff      	movs	r6, #255	; 0xff
 8000408:	2300      	movs	r3, #0
 800040a:	e780      	b.n	800030e <__aeabi_fadd+0x4a>
 800040c:	2b00      	cmp	r3, #0
 800040e:	d152      	bne.n	80004b6 <__aeabi_fadd+0x1f2>
 8000410:	2cff      	cmp	r4, #255	; 0xff
 8000412:	d000      	beq.n	8000416 <__aeabi_fadd+0x152>
 8000414:	e774      	b.n	8000300 <__aeabi_fadd+0x3c>
 8000416:	000a      	movs	r2, r1
 8000418:	08ed      	lsrs	r5, r5, #3
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0f3      	beq.n	8000406 <__aeabi_fadd+0x142>
 800041e:	2380      	movs	r3, #128	; 0x80
 8000420:	03db      	lsls	r3, r3, #15
 8000422:	432b      	orrs	r3, r5
 8000424:	025b      	lsls	r3, r3, #9
 8000426:	0a5b      	lsrs	r3, r3, #9
 8000428:	26ff      	movs	r6, #255	; 0xff
 800042a:	e770      	b.n	800030e <__aeabi_fadd+0x4a>
 800042c:	3f01      	subs	r7, #1
 800042e:	2f00      	cmp	r7, #0
 8000430:	d0be      	beq.n	80003b0 <__aeabi_fadd+0xec>
 8000432:	2cff      	cmp	r4, #255	; 0xff
 8000434:	d1b1      	bne.n	800039a <__aeabi_fadd+0xd6>
 8000436:	e763      	b.n	8000300 <__aeabi_fadd+0x3c>
 8000438:	2c00      	cmp	r4, #0
 800043a:	d047      	beq.n	80004cc <__aeabi_fadd+0x208>
 800043c:	28ff      	cmp	r0, #255	; 0xff
 800043e:	d069      	beq.n	8000514 <__aeabi_fadd+0x250>
 8000440:	2480      	movs	r4, #128	; 0x80
 8000442:	04e4      	lsls	r4, r4, #19
 8000444:	427a      	negs	r2, r7
 8000446:	4325      	orrs	r5, r4
 8000448:	2a1b      	cmp	r2, #27
 800044a:	dd00      	ble.n	800044e <__aeabi_fadd+0x18a>
 800044c:	e0c5      	b.n	80005da <__aeabi_fadd+0x316>
 800044e:	002c      	movs	r4, r5
 8000450:	2620      	movs	r6, #32
 8000452:	40d4      	lsrs	r4, r2
 8000454:	1ab2      	subs	r2, r6, r2
 8000456:	4095      	lsls	r5, r2
 8000458:	1e6a      	subs	r2, r5, #1
 800045a:	4195      	sbcs	r5, r2
 800045c:	4325      	orrs	r5, r4
 800045e:	1b5d      	subs	r5, r3, r5
 8000460:	0004      	movs	r4, r0
 8000462:	4689      	mov	r9, r1
 8000464:	e7a5      	b.n	80003b2 <__aeabi_fadd+0xee>
 8000466:	01ab      	lsls	r3, r5, #6
 8000468:	0a5b      	lsrs	r3, r3, #9
 800046a:	e750      	b.n	800030e <__aeabi_fadd+0x4a>
 800046c:	2400      	movs	r4, #0
 800046e:	2201      	movs	r2, #1
 8000470:	464b      	mov	r3, r9
 8000472:	401a      	ands	r2, r3
 8000474:	076b      	lsls	r3, r5, #29
 8000476:	d1ba      	bne.n	80003ee <__aeabi_fadd+0x12a>
 8000478:	e742      	b.n	8000300 <__aeabi_fadd+0x3c>
 800047a:	2f00      	cmp	r7, #0
 800047c:	d13b      	bne.n	80004f6 <__aeabi_fadd+0x232>
 800047e:	3401      	adds	r4, #1
 8000480:	b2e0      	uxtb	r0, r4
 8000482:	2801      	cmp	r0, #1
 8000484:	dd4a      	ble.n	800051c <__aeabi_fadd+0x258>
 8000486:	2cff      	cmp	r4, #255	; 0xff
 8000488:	d0bd      	beq.n	8000406 <__aeabi_fadd+0x142>
 800048a:	2607      	movs	r6, #7
 800048c:	18ed      	adds	r5, r5, r3
 800048e:	086d      	lsrs	r5, r5, #1
 8000490:	402e      	ands	r6, r5
 8000492:	e7a7      	b.n	80003e4 <__aeabi_fadd+0x120>
 8000494:	2307      	movs	r3, #7
 8000496:	4d57      	ldr	r5, [pc, #348]	; (80005f4 <__aeabi_fadd+0x330>)
 8000498:	1a24      	subs	r4, r4, r0
 800049a:	4035      	ands	r5, r6
 800049c:	401e      	ands	r6, r3
 800049e:	e7a1      	b.n	80003e4 <__aeabi_fadd+0x120>
 80004a0:	2c00      	cmp	r4, #0
 80004a2:	d11b      	bne.n	80004dc <__aeabi_fadd+0x218>
 80004a4:	2d00      	cmp	r5, #0
 80004a6:	d16e      	bne.n	8000586 <__aeabi_fadd+0x2c2>
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d100      	bne.n	80004ae <__aeabi_fadd+0x1ea>
 80004ac:	e09a      	b.n	80005e4 <__aeabi_fadd+0x320>
 80004ae:	000a      	movs	r2, r1
 80004b0:	001d      	movs	r5, r3
 80004b2:	003c      	movs	r4, r7
 80004b4:	e724      	b.n	8000300 <__aeabi_fadd+0x3c>
 80004b6:	3f01      	subs	r7, #1
 80004b8:	2f00      	cmp	r7, #0
 80004ba:	d100      	bne.n	80004be <__aeabi_fadd+0x1fa>
 80004bc:	e758      	b.n	8000370 <__aeabi_fadd+0xac>
 80004be:	2cff      	cmp	r4, #255	; 0xff
 80004c0:	d000      	beq.n	80004c4 <__aeabi_fadd+0x200>
 80004c2:	e74a      	b.n	800035a <__aeabi_fadd+0x96>
 80004c4:	e7a7      	b.n	8000416 <__aeabi_fadd+0x152>
 80004c6:	1b5e      	subs	r6, r3, r5
 80004c8:	4689      	mov	r9, r1
 80004ca:	e776      	b.n	80003ba <__aeabi_fadd+0xf6>
 80004cc:	2d00      	cmp	r5, #0
 80004ce:	d11c      	bne.n	800050a <__aeabi_fadd+0x246>
 80004d0:	000a      	movs	r2, r1
 80004d2:	28ff      	cmp	r0, #255	; 0xff
 80004d4:	d01f      	beq.n	8000516 <__aeabi_fadd+0x252>
 80004d6:	0004      	movs	r4, r0
 80004d8:	001d      	movs	r5, r3
 80004da:	e711      	b.n	8000300 <__aeabi_fadd+0x3c>
 80004dc:	2d00      	cmp	r5, #0
 80004de:	d15d      	bne.n	800059c <__aeabi_fadd+0x2d8>
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d117      	bne.n	8000514 <__aeabi_fadd+0x250>
 80004e4:	2380      	movs	r3, #128	; 0x80
 80004e6:	2200      	movs	r2, #0
 80004e8:	03db      	lsls	r3, r3, #15
 80004ea:	26ff      	movs	r6, #255	; 0xff
 80004ec:	e70f      	b.n	800030e <__aeabi_fadd+0x4a>
 80004ee:	000a      	movs	r2, r1
 80004f0:	26ff      	movs	r6, #255	; 0xff
 80004f2:	2300      	movs	r3, #0
 80004f4:	e70b      	b.n	800030e <__aeabi_fadd+0x4a>
 80004f6:	2c00      	cmp	r4, #0
 80004f8:	d121      	bne.n	800053e <__aeabi_fadd+0x27a>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	d166      	bne.n	80005cc <__aeabi_fadd+0x308>
 80004fe:	28ff      	cmp	r0, #255	; 0xff
 8000500:	d1e9      	bne.n	80004d6 <__aeabi_fadd+0x212>
 8000502:	001d      	movs	r5, r3
 8000504:	e787      	b.n	8000416 <__aeabi_fadd+0x152>
 8000506:	2301      	movs	r3, #1
 8000508:	e752      	b.n	80003b0 <__aeabi_fadd+0xec>
 800050a:	1c7a      	adds	r2, r7, #1
 800050c:	d0a7      	beq.n	800045e <__aeabi_fadd+0x19a>
 800050e:	43fa      	mvns	r2, r7
 8000510:	28ff      	cmp	r0, #255	; 0xff
 8000512:	d199      	bne.n	8000448 <__aeabi_fadd+0x184>
 8000514:	000a      	movs	r2, r1
 8000516:	001d      	movs	r5, r3
 8000518:	24ff      	movs	r4, #255	; 0xff
 800051a:	e6f1      	b.n	8000300 <__aeabi_fadd+0x3c>
 800051c:	2e00      	cmp	r6, #0
 800051e:	d121      	bne.n	8000564 <__aeabi_fadd+0x2a0>
 8000520:	2d00      	cmp	r5, #0
 8000522:	d04f      	beq.n	80005c4 <__aeabi_fadd+0x300>
 8000524:	2b00      	cmp	r3, #0
 8000526:	d04c      	beq.n	80005c2 <__aeabi_fadd+0x2fe>
 8000528:	18ed      	adds	r5, r5, r3
 800052a:	016b      	lsls	r3, r5, #5
 800052c:	d59e      	bpl.n	800046c <__aeabi_fadd+0x1a8>
 800052e:	4b31      	ldr	r3, [pc, #196]	; (80005f4 <__aeabi_fadd+0x330>)
 8000530:	3607      	adds	r6, #7
 8000532:	402e      	ands	r6, r5
 8000534:	2401      	movs	r4, #1
 8000536:	401d      	ands	r5, r3
 8000538:	e754      	b.n	80003e4 <__aeabi_fadd+0x120>
 800053a:	2301      	movs	r3, #1
 800053c:	e718      	b.n	8000370 <__aeabi_fadd+0xac>
 800053e:	28ff      	cmp	r0, #255	; 0xff
 8000540:	d0df      	beq.n	8000502 <__aeabi_fadd+0x23e>
 8000542:	2480      	movs	r4, #128	; 0x80
 8000544:	04e4      	lsls	r4, r4, #19
 8000546:	427f      	negs	r7, r7
 8000548:	4325      	orrs	r5, r4
 800054a:	2f1b      	cmp	r7, #27
 800054c:	dc4d      	bgt.n	80005ea <__aeabi_fadd+0x326>
 800054e:	2620      	movs	r6, #32
 8000550:	1bf6      	subs	r6, r6, r7
 8000552:	002c      	movs	r4, r5
 8000554:	40b5      	lsls	r5, r6
 8000556:	40fc      	lsrs	r4, r7
 8000558:	1e6a      	subs	r2, r5, #1
 800055a:	4195      	sbcs	r5, r2
 800055c:	4325      	orrs	r5, r4
 800055e:	18ed      	adds	r5, r5, r3
 8000560:	0004      	movs	r4, r0
 8000562:	e706      	b.n	8000372 <__aeabi_fadd+0xae>
 8000564:	2d00      	cmp	r5, #0
 8000566:	d0cc      	beq.n	8000502 <__aeabi_fadd+0x23e>
 8000568:	2b00      	cmp	r3, #0
 800056a:	d100      	bne.n	800056e <__aeabi_fadd+0x2aa>
 800056c:	e753      	b.n	8000416 <__aeabi_fadd+0x152>
 800056e:	2180      	movs	r1, #128	; 0x80
 8000570:	4660      	mov	r0, ip
 8000572:	03c9      	lsls	r1, r1, #15
 8000574:	4208      	tst	r0, r1
 8000576:	d003      	beq.n	8000580 <__aeabi_fadd+0x2bc>
 8000578:	4640      	mov	r0, r8
 800057a:	4208      	tst	r0, r1
 800057c:	d100      	bne.n	8000580 <__aeabi_fadd+0x2bc>
 800057e:	001d      	movs	r5, r3
 8000580:	2101      	movs	r1, #1
 8000582:	4011      	ands	r1, r2
 8000584:	e747      	b.n	8000416 <__aeabi_fadd+0x152>
 8000586:	2b00      	cmp	r3, #0
 8000588:	d100      	bne.n	800058c <__aeabi_fadd+0x2c8>
 800058a:	e6b9      	b.n	8000300 <__aeabi_fadd+0x3c>
 800058c:	1aea      	subs	r2, r5, r3
 800058e:	0150      	lsls	r0, r2, #5
 8000590:	d525      	bpl.n	80005de <__aeabi_fadd+0x31a>
 8000592:	2607      	movs	r6, #7
 8000594:	1b5d      	subs	r5, r3, r5
 8000596:	402e      	ands	r6, r5
 8000598:	4689      	mov	r9, r1
 800059a:	e723      	b.n	80003e4 <__aeabi_fadd+0x120>
 800059c:	24ff      	movs	r4, #255	; 0xff
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d100      	bne.n	80005a4 <__aeabi_fadd+0x2e0>
 80005a2:	e6ad      	b.n	8000300 <__aeabi_fadd+0x3c>
 80005a4:	2280      	movs	r2, #128	; 0x80
 80005a6:	4660      	mov	r0, ip
 80005a8:	03d2      	lsls	r2, r2, #15
 80005aa:	4210      	tst	r0, r2
 80005ac:	d004      	beq.n	80005b8 <__aeabi_fadd+0x2f4>
 80005ae:	4640      	mov	r0, r8
 80005b0:	4210      	tst	r0, r2
 80005b2:	d101      	bne.n	80005b8 <__aeabi_fadd+0x2f4>
 80005b4:	001d      	movs	r5, r3
 80005b6:	4689      	mov	r9, r1
 80005b8:	2201      	movs	r2, #1
 80005ba:	464b      	mov	r3, r9
 80005bc:	24ff      	movs	r4, #255	; 0xff
 80005be:	401a      	ands	r2, r3
 80005c0:	e69e      	b.n	8000300 <__aeabi_fadd+0x3c>
 80005c2:	002b      	movs	r3, r5
 80005c4:	08dd      	lsrs	r5, r3, #3
 80005c6:	000a      	movs	r2, r1
 80005c8:	2400      	movs	r4, #0
 80005ca:	e69d      	b.n	8000308 <__aeabi_fadd+0x44>
 80005cc:	1c7a      	adds	r2, r7, #1
 80005ce:	d0c6      	beq.n	800055e <__aeabi_fadd+0x29a>
 80005d0:	43ff      	mvns	r7, r7
 80005d2:	28ff      	cmp	r0, #255	; 0xff
 80005d4:	d1b9      	bne.n	800054a <__aeabi_fadd+0x286>
 80005d6:	001d      	movs	r5, r3
 80005d8:	e71d      	b.n	8000416 <__aeabi_fadd+0x152>
 80005da:	2501      	movs	r5, #1
 80005dc:	e73f      	b.n	800045e <__aeabi_fadd+0x19a>
 80005de:	1e15      	subs	r5, r2, #0
 80005e0:	d000      	beq.n	80005e4 <__aeabi_fadd+0x320>
 80005e2:	e744      	b.n	800046e <__aeabi_fadd+0x1aa>
 80005e4:	2200      	movs	r2, #0
 80005e6:	2300      	movs	r3, #0
 80005e8:	e691      	b.n	800030e <__aeabi_fadd+0x4a>
 80005ea:	2501      	movs	r5, #1
 80005ec:	e7b7      	b.n	800055e <__aeabi_fadd+0x29a>
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	7dffffff 	.word	0x7dffffff
 80005f4:	fbffffff 	.word	0xfbffffff

080005f8 <__aeabi_fdiv>:
 80005f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fa:	4657      	mov	r7, sl
 80005fc:	464e      	mov	r6, r9
 80005fe:	4645      	mov	r5, r8
 8000600:	46de      	mov	lr, fp
 8000602:	0244      	lsls	r4, r0, #9
 8000604:	b5e0      	push	{r5, r6, r7, lr}
 8000606:	0046      	lsls	r6, r0, #1
 8000608:	4688      	mov	r8, r1
 800060a:	0a64      	lsrs	r4, r4, #9
 800060c:	0e36      	lsrs	r6, r6, #24
 800060e:	0fc7      	lsrs	r7, r0, #31
 8000610:	2e00      	cmp	r6, #0
 8000612:	d063      	beq.n	80006dc <__aeabi_fdiv+0xe4>
 8000614:	2eff      	cmp	r6, #255	; 0xff
 8000616:	d024      	beq.n	8000662 <__aeabi_fdiv+0x6a>
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	00e4      	lsls	r4, r4, #3
 800061c:	04db      	lsls	r3, r3, #19
 800061e:	431c      	orrs	r4, r3
 8000620:	2300      	movs	r3, #0
 8000622:	4699      	mov	r9, r3
 8000624:	469b      	mov	fp, r3
 8000626:	3e7f      	subs	r6, #127	; 0x7f
 8000628:	4643      	mov	r3, r8
 800062a:	4642      	mov	r2, r8
 800062c:	025d      	lsls	r5, r3, #9
 800062e:	0fd2      	lsrs	r2, r2, #31
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	0a6d      	lsrs	r5, r5, #9
 8000634:	0e1b      	lsrs	r3, r3, #24
 8000636:	4690      	mov	r8, r2
 8000638:	4692      	mov	sl, r2
 800063a:	d065      	beq.n	8000708 <__aeabi_fdiv+0x110>
 800063c:	2bff      	cmp	r3, #255	; 0xff
 800063e:	d055      	beq.n	80006ec <__aeabi_fdiv+0xf4>
 8000640:	2280      	movs	r2, #128	; 0x80
 8000642:	2100      	movs	r1, #0
 8000644:	00ed      	lsls	r5, r5, #3
 8000646:	04d2      	lsls	r2, r2, #19
 8000648:	3b7f      	subs	r3, #127	; 0x7f
 800064a:	4315      	orrs	r5, r2
 800064c:	1af6      	subs	r6, r6, r3
 800064e:	4643      	mov	r3, r8
 8000650:	464a      	mov	r2, r9
 8000652:	407b      	eors	r3, r7
 8000654:	2a0f      	cmp	r2, #15
 8000656:	d900      	bls.n	800065a <__aeabi_fdiv+0x62>
 8000658:	e08d      	b.n	8000776 <__aeabi_fdiv+0x17e>
 800065a:	486d      	ldr	r0, [pc, #436]	; (8000810 <__aeabi_fdiv+0x218>)
 800065c:	0092      	lsls	r2, r2, #2
 800065e:	5882      	ldr	r2, [r0, r2]
 8000660:	4697      	mov	pc, r2
 8000662:	2c00      	cmp	r4, #0
 8000664:	d154      	bne.n	8000710 <__aeabi_fdiv+0x118>
 8000666:	2308      	movs	r3, #8
 8000668:	4699      	mov	r9, r3
 800066a:	3b06      	subs	r3, #6
 800066c:	26ff      	movs	r6, #255	; 0xff
 800066e:	469b      	mov	fp, r3
 8000670:	e7da      	b.n	8000628 <__aeabi_fdiv+0x30>
 8000672:	2500      	movs	r5, #0
 8000674:	4653      	mov	r3, sl
 8000676:	2902      	cmp	r1, #2
 8000678:	d01b      	beq.n	80006b2 <__aeabi_fdiv+0xba>
 800067a:	2903      	cmp	r1, #3
 800067c:	d100      	bne.n	8000680 <__aeabi_fdiv+0x88>
 800067e:	e0bf      	b.n	8000800 <__aeabi_fdiv+0x208>
 8000680:	2901      	cmp	r1, #1
 8000682:	d028      	beq.n	80006d6 <__aeabi_fdiv+0xde>
 8000684:	0030      	movs	r0, r6
 8000686:	307f      	adds	r0, #127	; 0x7f
 8000688:	2800      	cmp	r0, #0
 800068a:	dd20      	ble.n	80006ce <__aeabi_fdiv+0xd6>
 800068c:	076a      	lsls	r2, r5, #29
 800068e:	d004      	beq.n	800069a <__aeabi_fdiv+0xa2>
 8000690:	220f      	movs	r2, #15
 8000692:	402a      	ands	r2, r5
 8000694:	2a04      	cmp	r2, #4
 8000696:	d000      	beq.n	800069a <__aeabi_fdiv+0xa2>
 8000698:	3504      	adds	r5, #4
 800069a:	012a      	lsls	r2, r5, #4
 800069c:	d503      	bpl.n	80006a6 <__aeabi_fdiv+0xae>
 800069e:	0030      	movs	r0, r6
 80006a0:	4a5c      	ldr	r2, [pc, #368]	; (8000814 <__aeabi_fdiv+0x21c>)
 80006a2:	3080      	adds	r0, #128	; 0x80
 80006a4:	4015      	ands	r5, r2
 80006a6:	28fe      	cmp	r0, #254	; 0xfe
 80006a8:	dc03      	bgt.n	80006b2 <__aeabi_fdiv+0xba>
 80006aa:	01ac      	lsls	r4, r5, #6
 80006ac:	0a64      	lsrs	r4, r4, #9
 80006ae:	b2c2      	uxtb	r2, r0
 80006b0:	e001      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 80006b2:	22ff      	movs	r2, #255	; 0xff
 80006b4:	2400      	movs	r4, #0
 80006b6:	0264      	lsls	r4, r4, #9
 80006b8:	05d2      	lsls	r2, r2, #23
 80006ba:	0a60      	lsrs	r0, r4, #9
 80006bc:	07db      	lsls	r3, r3, #31
 80006be:	4310      	orrs	r0, r2
 80006c0:	4318      	orrs	r0, r3
 80006c2:	bc3c      	pop	{r2, r3, r4, r5}
 80006c4:	4690      	mov	r8, r2
 80006c6:	4699      	mov	r9, r3
 80006c8:	46a2      	mov	sl, r4
 80006ca:	46ab      	mov	fp, r5
 80006cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80006ce:	2201      	movs	r2, #1
 80006d0:	1a10      	subs	r0, r2, r0
 80006d2:	281b      	cmp	r0, #27
 80006d4:	dd7c      	ble.n	80007d0 <__aeabi_fdiv+0x1d8>
 80006d6:	2200      	movs	r2, #0
 80006d8:	2400      	movs	r4, #0
 80006da:	e7ec      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 80006dc:	2c00      	cmp	r4, #0
 80006de:	d11d      	bne.n	800071c <__aeabi_fdiv+0x124>
 80006e0:	2304      	movs	r3, #4
 80006e2:	4699      	mov	r9, r3
 80006e4:	3b03      	subs	r3, #3
 80006e6:	2600      	movs	r6, #0
 80006e8:	469b      	mov	fp, r3
 80006ea:	e79d      	b.n	8000628 <__aeabi_fdiv+0x30>
 80006ec:	3eff      	subs	r6, #255	; 0xff
 80006ee:	2d00      	cmp	r5, #0
 80006f0:	d120      	bne.n	8000734 <__aeabi_fdiv+0x13c>
 80006f2:	2102      	movs	r1, #2
 80006f4:	4643      	mov	r3, r8
 80006f6:	464a      	mov	r2, r9
 80006f8:	407b      	eors	r3, r7
 80006fa:	430a      	orrs	r2, r1
 80006fc:	2a0f      	cmp	r2, #15
 80006fe:	d8d8      	bhi.n	80006b2 <__aeabi_fdiv+0xba>
 8000700:	4845      	ldr	r0, [pc, #276]	; (8000818 <__aeabi_fdiv+0x220>)
 8000702:	0092      	lsls	r2, r2, #2
 8000704:	5882      	ldr	r2, [r0, r2]
 8000706:	4697      	mov	pc, r2
 8000708:	2d00      	cmp	r5, #0
 800070a:	d119      	bne.n	8000740 <__aeabi_fdiv+0x148>
 800070c:	2101      	movs	r1, #1
 800070e:	e7f1      	b.n	80006f4 <__aeabi_fdiv+0xfc>
 8000710:	230c      	movs	r3, #12
 8000712:	4699      	mov	r9, r3
 8000714:	3b09      	subs	r3, #9
 8000716:	26ff      	movs	r6, #255	; 0xff
 8000718:	469b      	mov	fp, r3
 800071a:	e785      	b.n	8000628 <__aeabi_fdiv+0x30>
 800071c:	0020      	movs	r0, r4
 800071e:	f001 fb97 	bl	8001e50 <__clzsi2>
 8000722:	2676      	movs	r6, #118	; 0x76
 8000724:	1f43      	subs	r3, r0, #5
 8000726:	409c      	lsls	r4, r3
 8000728:	2300      	movs	r3, #0
 800072a:	4276      	negs	r6, r6
 800072c:	1a36      	subs	r6, r6, r0
 800072e:	4699      	mov	r9, r3
 8000730:	469b      	mov	fp, r3
 8000732:	e779      	b.n	8000628 <__aeabi_fdiv+0x30>
 8000734:	464a      	mov	r2, r9
 8000736:	2303      	movs	r3, #3
 8000738:	431a      	orrs	r2, r3
 800073a:	4691      	mov	r9, r2
 800073c:	2103      	movs	r1, #3
 800073e:	e786      	b.n	800064e <__aeabi_fdiv+0x56>
 8000740:	0028      	movs	r0, r5
 8000742:	f001 fb85 	bl	8001e50 <__clzsi2>
 8000746:	1f43      	subs	r3, r0, #5
 8000748:	1836      	adds	r6, r6, r0
 800074a:	409d      	lsls	r5, r3
 800074c:	3676      	adds	r6, #118	; 0x76
 800074e:	2100      	movs	r1, #0
 8000750:	e77d      	b.n	800064e <__aeabi_fdiv+0x56>
 8000752:	2480      	movs	r4, #128	; 0x80
 8000754:	2300      	movs	r3, #0
 8000756:	03e4      	lsls	r4, r4, #15
 8000758:	22ff      	movs	r2, #255	; 0xff
 800075a:	e7ac      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 800075c:	2500      	movs	r5, #0
 800075e:	2380      	movs	r3, #128	; 0x80
 8000760:	03db      	lsls	r3, r3, #15
 8000762:	421c      	tst	r4, r3
 8000764:	d028      	beq.n	80007b8 <__aeabi_fdiv+0x1c0>
 8000766:	421d      	tst	r5, r3
 8000768:	d126      	bne.n	80007b8 <__aeabi_fdiv+0x1c0>
 800076a:	432b      	orrs	r3, r5
 800076c:	025c      	lsls	r4, r3, #9
 800076e:	0a64      	lsrs	r4, r4, #9
 8000770:	4643      	mov	r3, r8
 8000772:	22ff      	movs	r2, #255	; 0xff
 8000774:	e79f      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 8000776:	0162      	lsls	r2, r4, #5
 8000778:	016c      	lsls	r4, r5, #5
 800077a:	42a2      	cmp	r2, r4
 800077c:	d224      	bcs.n	80007c8 <__aeabi_fdiv+0x1d0>
 800077e:	211b      	movs	r1, #27
 8000780:	2500      	movs	r5, #0
 8000782:	3e01      	subs	r6, #1
 8000784:	2701      	movs	r7, #1
 8000786:	0010      	movs	r0, r2
 8000788:	006d      	lsls	r5, r5, #1
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	2800      	cmp	r0, #0
 800078e:	db01      	blt.n	8000794 <__aeabi_fdiv+0x19c>
 8000790:	4294      	cmp	r4, r2
 8000792:	d801      	bhi.n	8000798 <__aeabi_fdiv+0x1a0>
 8000794:	1b12      	subs	r2, r2, r4
 8000796:	433d      	orrs	r5, r7
 8000798:	3901      	subs	r1, #1
 800079a:	2900      	cmp	r1, #0
 800079c:	d1f3      	bne.n	8000786 <__aeabi_fdiv+0x18e>
 800079e:	0014      	movs	r4, r2
 80007a0:	1e62      	subs	r2, r4, #1
 80007a2:	4194      	sbcs	r4, r2
 80007a4:	4325      	orrs	r5, r4
 80007a6:	e76d      	b.n	8000684 <__aeabi_fdiv+0x8c>
 80007a8:	46ba      	mov	sl, r7
 80007aa:	4659      	mov	r1, fp
 80007ac:	0025      	movs	r5, r4
 80007ae:	4653      	mov	r3, sl
 80007b0:	2902      	cmp	r1, #2
 80007b2:	d000      	beq.n	80007b6 <__aeabi_fdiv+0x1be>
 80007b4:	e761      	b.n	800067a <__aeabi_fdiv+0x82>
 80007b6:	e77c      	b.n	80006b2 <__aeabi_fdiv+0xba>
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	03db      	lsls	r3, r3, #15
 80007bc:	431c      	orrs	r4, r3
 80007be:	0264      	lsls	r4, r4, #9
 80007c0:	0a64      	lsrs	r4, r4, #9
 80007c2:	003b      	movs	r3, r7
 80007c4:	22ff      	movs	r2, #255	; 0xff
 80007c6:	e776      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 80007c8:	1b12      	subs	r2, r2, r4
 80007ca:	211a      	movs	r1, #26
 80007cc:	2501      	movs	r5, #1
 80007ce:	e7d9      	b.n	8000784 <__aeabi_fdiv+0x18c>
 80007d0:	369e      	adds	r6, #158	; 0x9e
 80007d2:	002a      	movs	r2, r5
 80007d4:	40b5      	lsls	r5, r6
 80007d6:	002c      	movs	r4, r5
 80007d8:	40c2      	lsrs	r2, r0
 80007da:	1e65      	subs	r5, r4, #1
 80007dc:	41ac      	sbcs	r4, r5
 80007de:	4314      	orrs	r4, r2
 80007e0:	0762      	lsls	r2, r4, #29
 80007e2:	d004      	beq.n	80007ee <__aeabi_fdiv+0x1f6>
 80007e4:	220f      	movs	r2, #15
 80007e6:	4022      	ands	r2, r4
 80007e8:	2a04      	cmp	r2, #4
 80007ea:	d000      	beq.n	80007ee <__aeabi_fdiv+0x1f6>
 80007ec:	3404      	adds	r4, #4
 80007ee:	0162      	lsls	r2, r4, #5
 80007f0:	d403      	bmi.n	80007fa <__aeabi_fdiv+0x202>
 80007f2:	01a4      	lsls	r4, r4, #6
 80007f4:	0a64      	lsrs	r4, r4, #9
 80007f6:	2200      	movs	r2, #0
 80007f8:	e75d      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 80007fa:	2201      	movs	r2, #1
 80007fc:	2400      	movs	r4, #0
 80007fe:	e75a      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 8000800:	2480      	movs	r4, #128	; 0x80
 8000802:	03e4      	lsls	r4, r4, #15
 8000804:	432c      	orrs	r4, r5
 8000806:	0264      	lsls	r4, r4, #9
 8000808:	0a64      	lsrs	r4, r4, #9
 800080a:	22ff      	movs	r2, #255	; 0xff
 800080c:	e753      	b.n	80006b6 <__aeabi_fdiv+0xbe>
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	08005c04 	.word	0x08005c04
 8000814:	f7ffffff 	.word	0xf7ffffff
 8000818:	08005c44 	.word	0x08005c44

0800081c <__eqsf2>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	0042      	lsls	r2, r0, #1
 8000820:	024e      	lsls	r6, r1, #9
 8000822:	004c      	lsls	r4, r1, #1
 8000824:	0245      	lsls	r5, r0, #9
 8000826:	0a6d      	lsrs	r5, r5, #9
 8000828:	0e12      	lsrs	r2, r2, #24
 800082a:	0fc3      	lsrs	r3, r0, #31
 800082c:	0a76      	lsrs	r6, r6, #9
 800082e:	0e24      	lsrs	r4, r4, #24
 8000830:	0fc9      	lsrs	r1, r1, #31
 8000832:	2aff      	cmp	r2, #255	; 0xff
 8000834:	d00f      	beq.n	8000856 <__eqsf2+0x3a>
 8000836:	2cff      	cmp	r4, #255	; 0xff
 8000838:	d011      	beq.n	800085e <__eqsf2+0x42>
 800083a:	2001      	movs	r0, #1
 800083c:	42a2      	cmp	r2, r4
 800083e:	d000      	beq.n	8000842 <__eqsf2+0x26>
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	42b5      	cmp	r5, r6
 8000844:	d1fc      	bne.n	8000840 <__eqsf2+0x24>
 8000846:	428b      	cmp	r3, r1
 8000848:	d00d      	beq.n	8000866 <__eqsf2+0x4a>
 800084a:	2a00      	cmp	r2, #0
 800084c:	d1f8      	bne.n	8000840 <__eqsf2+0x24>
 800084e:	0028      	movs	r0, r5
 8000850:	1e45      	subs	r5, r0, #1
 8000852:	41a8      	sbcs	r0, r5
 8000854:	e7f4      	b.n	8000840 <__eqsf2+0x24>
 8000856:	2001      	movs	r0, #1
 8000858:	2d00      	cmp	r5, #0
 800085a:	d1f1      	bne.n	8000840 <__eqsf2+0x24>
 800085c:	e7eb      	b.n	8000836 <__eqsf2+0x1a>
 800085e:	2001      	movs	r0, #1
 8000860:	2e00      	cmp	r6, #0
 8000862:	d1ed      	bne.n	8000840 <__eqsf2+0x24>
 8000864:	e7e9      	b.n	800083a <__eqsf2+0x1e>
 8000866:	2000      	movs	r0, #0
 8000868:	e7ea      	b.n	8000840 <__eqsf2+0x24>
 800086a:	46c0      	nop			; (mov r8, r8)

0800086c <__gesf2>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	004a      	lsls	r2, r1, #1
 8000870:	024e      	lsls	r6, r1, #9
 8000872:	0245      	lsls	r5, r0, #9
 8000874:	0044      	lsls	r4, r0, #1
 8000876:	0a6d      	lsrs	r5, r5, #9
 8000878:	0e24      	lsrs	r4, r4, #24
 800087a:	0fc3      	lsrs	r3, r0, #31
 800087c:	0a76      	lsrs	r6, r6, #9
 800087e:	0e12      	lsrs	r2, r2, #24
 8000880:	0fc9      	lsrs	r1, r1, #31
 8000882:	2cff      	cmp	r4, #255	; 0xff
 8000884:	d015      	beq.n	80008b2 <__gesf2+0x46>
 8000886:	2aff      	cmp	r2, #255	; 0xff
 8000888:	d00e      	beq.n	80008a8 <__gesf2+0x3c>
 800088a:	2c00      	cmp	r4, #0
 800088c:	d115      	bne.n	80008ba <__gesf2+0x4e>
 800088e:	2a00      	cmp	r2, #0
 8000890:	d101      	bne.n	8000896 <__gesf2+0x2a>
 8000892:	2e00      	cmp	r6, #0
 8000894:	d01c      	beq.n	80008d0 <__gesf2+0x64>
 8000896:	2d00      	cmp	r5, #0
 8000898:	d014      	beq.n	80008c4 <__gesf2+0x58>
 800089a:	428b      	cmp	r3, r1
 800089c:	d027      	beq.n	80008ee <__gesf2+0x82>
 800089e:	2002      	movs	r0, #2
 80008a0:	3b01      	subs	r3, #1
 80008a2:	4018      	ands	r0, r3
 80008a4:	3801      	subs	r0, #1
 80008a6:	bd70      	pop	{r4, r5, r6, pc}
 80008a8:	2e00      	cmp	r6, #0
 80008aa:	d0ee      	beq.n	800088a <__gesf2+0x1e>
 80008ac:	2002      	movs	r0, #2
 80008ae:	4240      	negs	r0, r0
 80008b0:	e7f9      	b.n	80008a6 <__gesf2+0x3a>
 80008b2:	2d00      	cmp	r5, #0
 80008b4:	d1fa      	bne.n	80008ac <__gesf2+0x40>
 80008b6:	2aff      	cmp	r2, #255	; 0xff
 80008b8:	d00e      	beq.n	80008d8 <__gesf2+0x6c>
 80008ba:	2a00      	cmp	r2, #0
 80008bc:	d10e      	bne.n	80008dc <__gesf2+0x70>
 80008be:	2e00      	cmp	r6, #0
 80008c0:	d0ed      	beq.n	800089e <__gesf2+0x32>
 80008c2:	e00b      	b.n	80008dc <__gesf2+0x70>
 80008c4:	2301      	movs	r3, #1
 80008c6:	3901      	subs	r1, #1
 80008c8:	4399      	bics	r1, r3
 80008ca:	0008      	movs	r0, r1
 80008cc:	3001      	adds	r0, #1
 80008ce:	e7ea      	b.n	80008a6 <__gesf2+0x3a>
 80008d0:	2000      	movs	r0, #0
 80008d2:	2d00      	cmp	r5, #0
 80008d4:	d0e7      	beq.n	80008a6 <__gesf2+0x3a>
 80008d6:	e7e2      	b.n	800089e <__gesf2+0x32>
 80008d8:	2e00      	cmp	r6, #0
 80008da:	d1e7      	bne.n	80008ac <__gesf2+0x40>
 80008dc:	428b      	cmp	r3, r1
 80008de:	d1de      	bne.n	800089e <__gesf2+0x32>
 80008e0:	4294      	cmp	r4, r2
 80008e2:	dd05      	ble.n	80008f0 <__gesf2+0x84>
 80008e4:	2102      	movs	r1, #2
 80008e6:	1e58      	subs	r0, r3, #1
 80008e8:	4008      	ands	r0, r1
 80008ea:	3801      	subs	r0, #1
 80008ec:	e7db      	b.n	80008a6 <__gesf2+0x3a>
 80008ee:	2400      	movs	r4, #0
 80008f0:	42a2      	cmp	r2, r4
 80008f2:	dc04      	bgt.n	80008fe <__gesf2+0x92>
 80008f4:	42b5      	cmp	r5, r6
 80008f6:	d8d2      	bhi.n	800089e <__gesf2+0x32>
 80008f8:	2000      	movs	r0, #0
 80008fa:	42b5      	cmp	r5, r6
 80008fc:	d2d3      	bcs.n	80008a6 <__gesf2+0x3a>
 80008fe:	1e58      	subs	r0, r3, #1
 8000900:	2301      	movs	r3, #1
 8000902:	4398      	bics	r0, r3
 8000904:	3001      	adds	r0, #1
 8000906:	e7ce      	b.n	80008a6 <__gesf2+0x3a>

08000908 <__lesf2>:
 8000908:	b530      	push	{r4, r5, lr}
 800090a:	0042      	lsls	r2, r0, #1
 800090c:	0244      	lsls	r4, r0, #9
 800090e:	024d      	lsls	r5, r1, #9
 8000910:	0fc3      	lsrs	r3, r0, #31
 8000912:	0048      	lsls	r0, r1, #1
 8000914:	0a64      	lsrs	r4, r4, #9
 8000916:	0e12      	lsrs	r2, r2, #24
 8000918:	0a6d      	lsrs	r5, r5, #9
 800091a:	0e00      	lsrs	r0, r0, #24
 800091c:	0fc9      	lsrs	r1, r1, #31
 800091e:	2aff      	cmp	r2, #255	; 0xff
 8000920:	d012      	beq.n	8000948 <__lesf2+0x40>
 8000922:	28ff      	cmp	r0, #255	; 0xff
 8000924:	d00c      	beq.n	8000940 <__lesf2+0x38>
 8000926:	2a00      	cmp	r2, #0
 8000928:	d112      	bne.n	8000950 <__lesf2+0x48>
 800092a:	2800      	cmp	r0, #0
 800092c:	d119      	bne.n	8000962 <__lesf2+0x5a>
 800092e:	2d00      	cmp	r5, #0
 8000930:	d117      	bne.n	8000962 <__lesf2+0x5a>
 8000932:	2c00      	cmp	r4, #0
 8000934:	d02b      	beq.n	800098e <__lesf2+0x86>
 8000936:	2002      	movs	r0, #2
 8000938:	3b01      	subs	r3, #1
 800093a:	4018      	ands	r0, r3
 800093c:	3801      	subs	r0, #1
 800093e:	e026      	b.n	800098e <__lesf2+0x86>
 8000940:	2d00      	cmp	r5, #0
 8000942:	d0f0      	beq.n	8000926 <__lesf2+0x1e>
 8000944:	2002      	movs	r0, #2
 8000946:	e022      	b.n	800098e <__lesf2+0x86>
 8000948:	2c00      	cmp	r4, #0
 800094a:	d1fb      	bne.n	8000944 <__lesf2+0x3c>
 800094c:	28ff      	cmp	r0, #255	; 0xff
 800094e:	d01f      	beq.n	8000990 <__lesf2+0x88>
 8000950:	2800      	cmp	r0, #0
 8000952:	d11f      	bne.n	8000994 <__lesf2+0x8c>
 8000954:	2d00      	cmp	r5, #0
 8000956:	d11d      	bne.n	8000994 <__lesf2+0x8c>
 8000958:	2002      	movs	r0, #2
 800095a:	3b01      	subs	r3, #1
 800095c:	4018      	ands	r0, r3
 800095e:	3801      	subs	r0, #1
 8000960:	e015      	b.n	800098e <__lesf2+0x86>
 8000962:	2c00      	cmp	r4, #0
 8000964:	d00e      	beq.n	8000984 <__lesf2+0x7c>
 8000966:	428b      	cmp	r3, r1
 8000968:	d1e5      	bne.n	8000936 <__lesf2+0x2e>
 800096a:	2200      	movs	r2, #0
 800096c:	4290      	cmp	r0, r2
 800096e:	dc04      	bgt.n	800097a <__lesf2+0x72>
 8000970:	42ac      	cmp	r4, r5
 8000972:	d8e0      	bhi.n	8000936 <__lesf2+0x2e>
 8000974:	2000      	movs	r0, #0
 8000976:	42ac      	cmp	r4, r5
 8000978:	d209      	bcs.n	800098e <__lesf2+0x86>
 800097a:	1e58      	subs	r0, r3, #1
 800097c:	2301      	movs	r3, #1
 800097e:	4398      	bics	r0, r3
 8000980:	3001      	adds	r0, #1
 8000982:	e004      	b.n	800098e <__lesf2+0x86>
 8000984:	2301      	movs	r3, #1
 8000986:	3901      	subs	r1, #1
 8000988:	4399      	bics	r1, r3
 800098a:	0008      	movs	r0, r1
 800098c:	3001      	adds	r0, #1
 800098e:	bd30      	pop	{r4, r5, pc}
 8000990:	2d00      	cmp	r5, #0
 8000992:	d1d7      	bne.n	8000944 <__lesf2+0x3c>
 8000994:	428b      	cmp	r3, r1
 8000996:	d1ce      	bne.n	8000936 <__lesf2+0x2e>
 8000998:	4282      	cmp	r2, r0
 800099a:	dde7      	ble.n	800096c <__lesf2+0x64>
 800099c:	2102      	movs	r1, #2
 800099e:	1e58      	subs	r0, r3, #1
 80009a0:	4008      	ands	r0, r1
 80009a2:	3801      	subs	r0, #1
 80009a4:	e7f3      	b.n	800098e <__lesf2+0x86>
 80009a6:	46c0      	nop			; (mov r8, r8)

080009a8 <__aeabi_fmul>:
 80009a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009aa:	464e      	mov	r6, r9
 80009ac:	4657      	mov	r7, sl
 80009ae:	4645      	mov	r5, r8
 80009b0:	46de      	mov	lr, fp
 80009b2:	b5e0      	push	{r5, r6, r7, lr}
 80009b4:	0243      	lsls	r3, r0, #9
 80009b6:	0a5b      	lsrs	r3, r3, #9
 80009b8:	0045      	lsls	r5, r0, #1
 80009ba:	b083      	sub	sp, #12
 80009bc:	1c0f      	adds	r7, r1, #0
 80009be:	4699      	mov	r9, r3
 80009c0:	0e2d      	lsrs	r5, r5, #24
 80009c2:	0fc6      	lsrs	r6, r0, #31
 80009c4:	2d00      	cmp	r5, #0
 80009c6:	d057      	beq.n	8000a78 <__aeabi_fmul+0xd0>
 80009c8:	2dff      	cmp	r5, #255	; 0xff
 80009ca:	d024      	beq.n	8000a16 <__aeabi_fmul+0x6e>
 80009cc:	2080      	movs	r0, #128	; 0x80
 80009ce:	00db      	lsls	r3, r3, #3
 80009d0:	04c0      	lsls	r0, r0, #19
 80009d2:	4318      	orrs	r0, r3
 80009d4:	2300      	movs	r3, #0
 80009d6:	4681      	mov	r9, r0
 80009d8:	469a      	mov	sl, r3
 80009da:	469b      	mov	fp, r3
 80009dc:	3d7f      	subs	r5, #127	; 0x7f
 80009de:	027c      	lsls	r4, r7, #9
 80009e0:	007a      	lsls	r2, r7, #1
 80009e2:	0ffb      	lsrs	r3, r7, #31
 80009e4:	0a64      	lsrs	r4, r4, #9
 80009e6:	0e12      	lsrs	r2, r2, #24
 80009e8:	4698      	mov	r8, r3
 80009ea:	d023      	beq.n	8000a34 <__aeabi_fmul+0x8c>
 80009ec:	2aff      	cmp	r2, #255	; 0xff
 80009ee:	d04b      	beq.n	8000a88 <__aeabi_fmul+0xe0>
 80009f0:	00e3      	lsls	r3, r4, #3
 80009f2:	2480      	movs	r4, #128	; 0x80
 80009f4:	2000      	movs	r0, #0
 80009f6:	04e4      	lsls	r4, r4, #19
 80009f8:	3a7f      	subs	r2, #127	; 0x7f
 80009fa:	431c      	orrs	r4, r3
 80009fc:	18ad      	adds	r5, r5, r2
 80009fe:	1c6b      	adds	r3, r5, #1
 8000a00:	4647      	mov	r7, r8
 8000a02:	9301      	str	r3, [sp, #4]
 8000a04:	4653      	mov	r3, sl
 8000a06:	4077      	eors	r7, r6
 8000a08:	003a      	movs	r2, r7
 8000a0a:	2b0f      	cmp	r3, #15
 8000a0c:	d848      	bhi.n	8000aa0 <__aeabi_fmul+0xf8>
 8000a0e:	497d      	ldr	r1, [pc, #500]	; (8000c04 <__aeabi_fmul+0x25c>)
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	58cb      	ldr	r3, [r1, r3]
 8000a14:	469f      	mov	pc, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fmul+0x74>
 8000a1a:	e085      	b.n	8000b28 <__aeabi_fmul+0x180>
 8000a1c:	3308      	adds	r3, #8
 8000a1e:	469a      	mov	sl, r3
 8000a20:	3b06      	subs	r3, #6
 8000a22:	469b      	mov	fp, r3
 8000a24:	027c      	lsls	r4, r7, #9
 8000a26:	007a      	lsls	r2, r7, #1
 8000a28:	0ffb      	lsrs	r3, r7, #31
 8000a2a:	25ff      	movs	r5, #255	; 0xff
 8000a2c:	0a64      	lsrs	r4, r4, #9
 8000a2e:	0e12      	lsrs	r2, r2, #24
 8000a30:	4698      	mov	r8, r3
 8000a32:	d1db      	bne.n	80009ec <__aeabi_fmul+0x44>
 8000a34:	2c00      	cmp	r4, #0
 8000a36:	d000      	beq.n	8000a3a <__aeabi_fmul+0x92>
 8000a38:	e090      	b.n	8000b5c <__aeabi_fmul+0x1b4>
 8000a3a:	4652      	mov	r2, sl
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	431a      	orrs	r2, r3
 8000a40:	4692      	mov	sl, r2
 8000a42:	2001      	movs	r0, #1
 8000a44:	e7db      	b.n	80009fe <__aeabi_fmul+0x56>
 8000a46:	464c      	mov	r4, r9
 8000a48:	4658      	mov	r0, fp
 8000a4a:	0017      	movs	r7, r2
 8000a4c:	2802      	cmp	r0, #2
 8000a4e:	d024      	beq.n	8000a9a <__aeabi_fmul+0xf2>
 8000a50:	2803      	cmp	r0, #3
 8000a52:	d100      	bne.n	8000a56 <__aeabi_fmul+0xae>
 8000a54:	e0cf      	b.n	8000bf6 <__aeabi_fmul+0x24e>
 8000a56:	2200      	movs	r2, #0
 8000a58:	2300      	movs	r3, #0
 8000a5a:	2801      	cmp	r0, #1
 8000a5c:	d14d      	bne.n	8000afa <__aeabi_fmul+0x152>
 8000a5e:	0258      	lsls	r0, r3, #9
 8000a60:	05d2      	lsls	r2, r2, #23
 8000a62:	0a40      	lsrs	r0, r0, #9
 8000a64:	07ff      	lsls	r7, r7, #31
 8000a66:	4310      	orrs	r0, r2
 8000a68:	4338      	orrs	r0, r7
 8000a6a:	b003      	add	sp, #12
 8000a6c:	bc3c      	pop	{r2, r3, r4, r5}
 8000a6e:	4690      	mov	r8, r2
 8000a70:	4699      	mov	r9, r3
 8000a72:	46a2      	mov	sl, r4
 8000a74:	46ab      	mov	fp, r5
 8000a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d15b      	bne.n	8000b34 <__aeabi_fmul+0x18c>
 8000a7c:	2304      	movs	r3, #4
 8000a7e:	469a      	mov	sl, r3
 8000a80:	3b03      	subs	r3, #3
 8000a82:	2500      	movs	r5, #0
 8000a84:	469b      	mov	fp, r3
 8000a86:	e7aa      	b.n	80009de <__aeabi_fmul+0x36>
 8000a88:	35ff      	adds	r5, #255	; 0xff
 8000a8a:	2c00      	cmp	r4, #0
 8000a8c:	d160      	bne.n	8000b50 <__aeabi_fmul+0x1a8>
 8000a8e:	4652      	mov	r2, sl
 8000a90:	2302      	movs	r3, #2
 8000a92:	431a      	orrs	r2, r3
 8000a94:	4692      	mov	sl, r2
 8000a96:	2002      	movs	r0, #2
 8000a98:	e7b1      	b.n	80009fe <__aeabi_fmul+0x56>
 8000a9a:	22ff      	movs	r2, #255	; 0xff
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	e7de      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000aa0:	464b      	mov	r3, r9
 8000aa2:	0c1b      	lsrs	r3, r3, #16
 8000aa4:	469c      	mov	ip, r3
 8000aa6:	464b      	mov	r3, r9
 8000aa8:	0426      	lsls	r6, r4, #16
 8000aaa:	0c36      	lsrs	r6, r6, #16
 8000aac:	0418      	lsls	r0, r3, #16
 8000aae:	4661      	mov	r1, ip
 8000ab0:	0033      	movs	r3, r6
 8000ab2:	0c22      	lsrs	r2, r4, #16
 8000ab4:	4664      	mov	r4, ip
 8000ab6:	0c00      	lsrs	r0, r0, #16
 8000ab8:	4343      	muls	r3, r0
 8000aba:	434e      	muls	r6, r1
 8000abc:	4350      	muls	r0, r2
 8000abe:	4354      	muls	r4, r2
 8000ac0:	1980      	adds	r0, r0, r6
 8000ac2:	0c1a      	lsrs	r2, r3, #16
 8000ac4:	1812      	adds	r2, r2, r0
 8000ac6:	4296      	cmp	r6, r2
 8000ac8:	d903      	bls.n	8000ad2 <__aeabi_fmul+0x12a>
 8000aca:	2180      	movs	r1, #128	; 0x80
 8000acc:	0249      	lsls	r1, r1, #9
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4464      	add	r4, ip
 8000ad2:	041b      	lsls	r3, r3, #16
 8000ad4:	0c1b      	lsrs	r3, r3, #16
 8000ad6:	0410      	lsls	r0, r2, #16
 8000ad8:	18c0      	adds	r0, r0, r3
 8000ada:	0183      	lsls	r3, r0, #6
 8000adc:	1e5e      	subs	r6, r3, #1
 8000ade:	41b3      	sbcs	r3, r6
 8000ae0:	0e80      	lsrs	r0, r0, #26
 8000ae2:	4318      	orrs	r0, r3
 8000ae4:	0c13      	lsrs	r3, r2, #16
 8000ae6:	191b      	adds	r3, r3, r4
 8000ae8:	019b      	lsls	r3, r3, #6
 8000aea:	4303      	orrs	r3, r0
 8000aec:	001c      	movs	r4, r3
 8000aee:	0123      	lsls	r3, r4, #4
 8000af0:	d579      	bpl.n	8000be6 <__aeabi_fmul+0x23e>
 8000af2:	2301      	movs	r3, #1
 8000af4:	0862      	lsrs	r2, r4, #1
 8000af6:	401c      	ands	r4, r3
 8000af8:	4314      	orrs	r4, r2
 8000afa:	9a01      	ldr	r2, [sp, #4]
 8000afc:	327f      	adds	r2, #127	; 0x7f
 8000afe:	2a00      	cmp	r2, #0
 8000b00:	dd4d      	ble.n	8000b9e <__aeabi_fmul+0x1f6>
 8000b02:	0763      	lsls	r3, r4, #29
 8000b04:	d004      	beq.n	8000b10 <__aeabi_fmul+0x168>
 8000b06:	230f      	movs	r3, #15
 8000b08:	4023      	ands	r3, r4
 8000b0a:	2b04      	cmp	r3, #4
 8000b0c:	d000      	beq.n	8000b10 <__aeabi_fmul+0x168>
 8000b0e:	3404      	adds	r4, #4
 8000b10:	0123      	lsls	r3, r4, #4
 8000b12:	d503      	bpl.n	8000b1c <__aeabi_fmul+0x174>
 8000b14:	4b3c      	ldr	r3, [pc, #240]	; (8000c08 <__aeabi_fmul+0x260>)
 8000b16:	9a01      	ldr	r2, [sp, #4]
 8000b18:	401c      	ands	r4, r3
 8000b1a:	3280      	adds	r2, #128	; 0x80
 8000b1c:	2afe      	cmp	r2, #254	; 0xfe
 8000b1e:	dcbc      	bgt.n	8000a9a <__aeabi_fmul+0xf2>
 8000b20:	01a3      	lsls	r3, r4, #6
 8000b22:	0a5b      	lsrs	r3, r3, #9
 8000b24:	b2d2      	uxtb	r2, r2
 8000b26:	e79a      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000b28:	230c      	movs	r3, #12
 8000b2a:	469a      	mov	sl, r3
 8000b2c:	3b09      	subs	r3, #9
 8000b2e:	25ff      	movs	r5, #255	; 0xff
 8000b30:	469b      	mov	fp, r3
 8000b32:	e754      	b.n	80009de <__aeabi_fmul+0x36>
 8000b34:	0018      	movs	r0, r3
 8000b36:	f001 f98b 	bl	8001e50 <__clzsi2>
 8000b3a:	464a      	mov	r2, r9
 8000b3c:	1f43      	subs	r3, r0, #5
 8000b3e:	2576      	movs	r5, #118	; 0x76
 8000b40:	409a      	lsls	r2, r3
 8000b42:	2300      	movs	r3, #0
 8000b44:	426d      	negs	r5, r5
 8000b46:	4691      	mov	r9, r2
 8000b48:	1a2d      	subs	r5, r5, r0
 8000b4a:	469a      	mov	sl, r3
 8000b4c:	469b      	mov	fp, r3
 8000b4e:	e746      	b.n	80009de <__aeabi_fmul+0x36>
 8000b50:	4652      	mov	r2, sl
 8000b52:	2303      	movs	r3, #3
 8000b54:	431a      	orrs	r2, r3
 8000b56:	4692      	mov	sl, r2
 8000b58:	2003      	movs	r0, #3
 8000b5a:	e750      	b.n	80009fe <__aeabi_fmul+0x56>
 8000b5c:	0020      	movs	r0, r4
 8000b5e:	f001 f977 	bl	8001e50 <__clzsi2>
 8000b62:	1f43      	subs	r3, r0, #5
 8000b64:	1a2d      	subs	r5, r5, r0
 8000b66:	409c      	lsls	r4, r3
 8000b68:	3d76      	subs	r5, #118	; 0x76
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	e747      	b.n	80009fe <__aeabi_fmul+0x56>
 8000b6e:	2380      	movs	r3, #128	; 0x80
 8000b70:	2700      	movs	r7, #0
 8000b72:	03db      	lsls	r3, r3, #15
 8000b74:	22ff      	movs	r2, #255	; 0xff
 8000b76:	e772      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000b78:	4642      	mov	r2, r8
 8000b7a:	e766      	b.n	8000a4a <__aeabi_fmul+0xa2>
 8000b7c:	464c      	mov	r4, r9
 8000b7e:	0032      	movs	r2, r6
 8000b80:	4658      	mov	r0, fp
 8000b82:	e762      	b.n	8000a4a <__aeabi_fmul+0xa2>
 8000b84:	2380      	movs	r3, #128	; 0x80
 8000b86:	464a      	mov	r2, r9
 8000b88:	03db      	lsls	r3, r3, #15
 8000b8a:	421a      	tst	r2, r3
 8000b8c:	d022      	beq.n	8000bd4 <__aeabi_fmul+0x22c>
 8000b8e:	421c      	tst	r4, r3
 8000b90:	d120      	bne.n	8000bd4 <__aeabi_fmul+0x22c>
 8000b92:	4323      	orrs	r3, r4
 8000b94:	025b      	lsls	r3, r3, #9
 8000b96:	0a5b      	lsrs	r3, r3, #9
 8000b98:	4647      	mov	r7, r8
 8000b9a:	22ff      	movs	r2, #255	; 0xff
 8000b9c:	e75f      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	1a9a      	subs	r2, r3, r2
 8000ba2:	2a1b      	cmp	r2, #27
 8000ba4:	dc21      	bgt.n	8000bea <__aeabi_fmul+0x242>
 8000ba6:	0023      	movs	r3, r4
 8000ba8:	9901      	ldr	r1, [sp, #4]
 8000baa:	40d3      	lsrs	r3, r2
 8000bac:	319e      	adds	r1, #158	; 0x9e
 8000bae:	408c      	lsls	r4, r1
 8000bb0:	001a      	movs	r2, r3
 8000bb2:	0023      	movs	r3, r4
 8000bb4:	1e5c      	subs	r4, r3, #1
 8000bb6:	41a3      	sbcs	r3, r4
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	075a      	lsls	r2, r3, #29
 8000bbc:	d004      	beq.n	8000bc8 <__aeabi_fmul+0x220>
 8000bbe:	220f      	movs	r2, #15
 8000bc0:	401a      	ands	r2, r3
 8000bc2:	2a04      	cmp	r2, #4
 8000bc4:	d000      	beq.n	8000bc8 <__aeabi_fmul+0x220>
 8000bc6:	3304      	adds	r3, #4
 8000bc8:	015a      	lsls	r2, r3, #5
 8000bca:	d411      	bmi.n	8000bf0 <__aeabi_fmul+0x248>
 8000bcc:	019b      	lsls	r3, r3, #6
 8000bce:	0a5b      	lsrs	r3, r3, #9
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	e744      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000bd4:	2380      	movs	r3, #128	; 0x80
 8000bd6:	464a      	mov	r2, r9
 8000bd8:	03db      	lsls	r3, r3, #15
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	025b      	lsls	r3, r3, #9
 8000bde:	0a5b      	lsrs	r3, r3, #9
 8000be0:	0037      	movs	r7, r6
 8000be2:	22ff      	movs	r2, #255	; 0xff
 8000be4:	e73b      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000be6:	9501      	str	r5, [sp, #4]
 8000be8:	e787      	b.n	8000afa <__aeabi_fmul+0x152>
 8000bea:	2200      	movs	r2, #0
 8000bec:	2300      	movs	r3, #0
 8000bee:	e736      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e733      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000bf6:	2380      	movs	r3, #128	; 0x80
 8000bf8:	03db      	lsls	r3, r3, #15
 8000bfa:	4323      	orrs	r3, r4
 8000bfc:	025b      	lsls	r3, r3, #9
 8000bfe:	0a5b      	lsrs	r3, r3, #9
 8000c00:	22ff      	movs	r2, #255	; 0xff
 8000c02:	e72c      	b.n	8000a5e <__aeabi_fmul+0xb6>
 8000c04:	08005c84 	.word	0x08005c84
 8000c08:	f7ffffff 	.word	0xf7ffffff

08000c0c <__aeabi_fsub>:
 8000c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0e:	4647      	mov	r7, r8
 8000c10:	46ce      	mov	lr, r9
 8000c12:	0044      	lsls	r4, r0, #1
 8000c14:	0fc2      	lsrs	r2, r0, #31
 8000c16:	b580      	push	{r7, lr}
 8000c18:	0247      	lsls	r7, r0, #9
 8000c1a:	0248      	lsls	r0, r1, #9
 8000c1c:	0a40      	lsrs	r0, r0, #9
 8000c1e:	4684      	mov	ip, r0
 8000c20:	4666      	mov	r6, ip
 8000c22:	0048      	lsls	r0, r1, #1
 8000c24:	0a7f      	lsrs	r7, r7, #9
 8000c26:	0e24      	lsrs	r4, r4, #24
 8000c28:	00f6      	lsls	r6, r6, #3
 8000c2a:	0025      	movs	r5, r4
 8000c2c:	4690      	mov	r8, r2
 8000c2e:	00fb      	lsls	r3, r7, #3
 8000c30:	0e00      	lsrs	r0, r0, #24
 8000c32:	0fc9      	lsrs	r1, r1, #31
 8000c34:	46b1      	mov	r9, r6
 8000c36:	28ff      	cmp	r0, #255	; 0xff
 8000c38:	d100      	bne.n	8000c3c <__aeabi_fsub+0x30>
 8000c3a:	e085      	b.n	8000d48 <__aeabi_fsub+0x13c>
 8000c3c:	2601      	movs	r6, #1
 8000c3e:	4071      	eors	r1, r6
 8000c40:	1a26      	subs	r6, r4, r0
 8000c42:	4291      	cmp	r1, r2
 8000c44:	d057      	beq.n	8000cf6 <__aeabi_fsub+0xea>
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	dd43      	ble.n	8000cd2 <__aeabi_fsub+0xc6>
 8000c4a:	2800      	cmp	r0, #0
 8000c4c:	d000      	beq.n	8000c50 <__aeabi_fsub+0x44>
 8000c4e:	e07f      	b.n	8000d50 <__aeabi_fsub+0x144>
 8000c50:	4649      	mov	r1, r9
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d100      	bne.n	8000c58 <__aeabi_fsub+0x4c>
 8000c56:	e0aa      	b.n	8000dae <__aeabi_fsub+0x1a2>
 8000c58:	3e01      	subs	r6, #1
 8000c5a:	2e00      	cmp	r6, #0
 8000c5c:	d000      	beq.n	8000c60 <__aeabi_fsub+0x54>
 8000c5e:	e0f7      	b.n	8000e50 <__aeabi_fsub+0x244>
 8000c60:	1a5b      	subs	r3, r3, r1
 8000c62:	015a      	lsls	r2, r3, #5
 8000c64:	d400      	bmi.n	8000c68 <__aeabi_fsub+0x5c>
 8000c66:	e08b      	b.n	8000d80 <__aeabi_fsub+0x174>
 8000c68:	019b      	lsls	r3, r3, #6
 8000c6a:	099c      	lsrs	r4, r3, #6
 8000c6c:	0020      	movs	r0, r4
 8000c6e:	f001 f8ef 	bl	8001e50 <__clzsi2>
 8000c72:	3805      	subs	r0, #5
 8000c74:	4084      	lsls	r4, r0
 8000c76:	4285      	cmp	r5, r0
 8000c78:	dd00      	ble.n	8000c7c <__aeabi_fsub+0x70>
 8000c7a:	e0d3      	b.n	8000e24 <__aeabi_fsub+0x218>
 8000c7c:	1b45      	subs	r5, r0, r5
 8000c7e:	0023      	movs	r3, r4
 8000c80:	2020      	movs	r0, #32
 8000c82:	3501      	adds	r5, #1
 8000c84:	40eb      	lsrs	r3, r5
 8000c86:	1b45      	subs	r5, r0, r5
 8000c88:	40ac      	lsls	r4, r5
 8000c8a:	1e62      	subs	r2, r4, #1
 8000c8c:	4194      	sbcs	r4, r2
 8000c8e:	4323      	orrs	r3, r4
 8000c90:	2407      	movs	r4, #7
 8000c92:	2500      	movs	r5, #0
 8000c94:	401c      	ands	r4, r3
 8000c96:	2201      	movs	r2, #1
 8000c98:	4641      	mov	r1, r8
 8000c9a:	400a      	ands	r2, r1
 8000c9c:	2c00      	cmp	r4, #0
 8000c9e:	d004      	beq.n	8000caa <__aeabi_fsub+0x9e>
 8000ca0:	210f      	movs	r1, #15
 8000ca2:	4019      	ands	r1, r3
 8000ca4:	2904      	cmp	r1, #4
 8000ca6:	d000      	beq.n	8000caa <__aeabi_fsub+0x9e>
 8000ca8:	3304      	adds	r3, #4
 8000caa:	0159      	lsls	r1, r3, #5
 8000cac:	d400      	bmi.n	8000cb0 <__aeabi_fsub+0xa4>
 8000cae:	e080      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000cb0:	3501      	adds	r5, #1
 8000cb2:	b2ec      	uxtb	r4, r5
 8000cb4:	2dff      	cmp	r5, #255	; 0xff
 8000cb6:	d000      	beq.n	8000cba <__aeabi_fsub+0xae>
 8000cb8:	e0a3      	b.n	8000e02 <__aeabi_fsub+0x1f6>
 8000cba:	24ff      	movs	r4, #255	; 0xff
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	025b      	lsls	r3, r3, #9
 8000cc0:	05e4      	lsls	r4, r4, #23
 8000cc2:	0a58      	lsrs	r0, r3, #9
 8000cc4:	07d2      	lsls	r2, r2, #31
 8000cc6:	4320      	orrs	r0, r4
 8000cc8:	4310      	orrs	r0, r2
 8000cca:	bc0c      	pop	{r2, r3}
 8000ccc:	4690      	mov	r8, r2
 8000cce:	4699      	mov	r9, r3
 8000cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d174      	bne.n	8000dc0 <__aeabi_fsub+0x1b4>
 8000cd6:	1c60      	adds	r0, r4, #1
 8000cd8:	b2c0      	uxtb	r0, r0
 8000cda:	2801      	cmp	r0, #1
 8000cdc:	dc00      	bgt.n	8000ce0 <__aeabi_fsub+0xd4>
 8000cde:	e0a7      	b.n	8000e30 <__aeabi_fsub+0x224>
 8000ce0:	464a      	mov	r2, r9
 8000ce2:	1a9c      	subs	r4, r3, r2
 8000ce4:	0162      	lsls	r2, r4, #5
 8000ce6:	d500      	bpl.n	8000cea <__aeabi_fsub+0xde>
 8000ce8:	e0b6      	b.n	8000e58 <__aeabi_fsub+0x24c>
 8000cea:	2c00      	cmp	r4, #0
 8000cec:	d1be      	bne.n	8000c6c <__aeabi_fsub+0x60>
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2400      	movs	r4, #0
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e7e3      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000cf6:	2e00      	cmp	r6, #0
 8000cf8:	dc00      	bgt.n	8000cfc <__aeabi_fsub+0xf0>
 8000cfa:	e085      	b.n	8000e08 <__aeabi_fsub+0x1fc>
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	d046      	beq.n	8000d8e <__aeabi_fsub+0x182>
 8000d00:	2cff      	cmp	r4, #255	; 0xff
 8000d02:	d049      	beq.n	8000d98 <__aeabi_fsub+0x18c>
 8000d04:	2280      	movs	r2, #128	; 0x80
 8000d06:	4648      	mov	r0, r9
 8000d08:	04d2      	lsls	r2, r2, #19
 8000d0a:	4310      	orrs	r0, r2
 8000d0c:	4681      	mov	r9, r0
 8000d0e:	2201      	movs	r2, #1
 8000d10:	2e1b      	cmp	r6, #27
 8000d12:	dc09      	bgt.n	8000d28 <__aeabi_fsub+0x11c>
 8000d14:	2020      	movs	r0, #32
 8000d16:	464c      	mov	r4, r9
 8000d18:	1b80      	subs	r0, r0, r6
 8000d1a:	4084      	lsls	r4, r0
 8000d1c:	464a      	mov	r2, r9
 8000d1e:	0020      	movs	r0, r4
 8000d20:	40f2      	lsrs	r2, r6
 8000d22:	1e44      	subs	r4, r0, #1
 8000d24:	41a0      	sbcs	r0, r4
 8000d26:	4302      	orrs	r2, r0
 8000d28:	189b      	adds	r3, r3, r2
 8000d2a:	015a      	lsls	r2, r3, #5
 8000d2c:	d528      	bpl.n	8000d80 <__aeabi_fsub+0x174>
 8000d2e:	3501      	adds	r5, #1
 8000d30:	2dff      	cmp	r5, #255	; 0xff
 8000d32:	d100      	bne.n	8000d36 <__aeabi_fsub+0x12a>
 8000d34:	e0a8      	b.n	8000e88 <__aeabi_fsub+0x27c>
 8000d36:	2201      	movs	r2, #1
 8000d38:	2407      	movs	r4, #7
 8000d3a:	4994      	ldr	r1, [pc, #592]	; (8000f8c <__aeabi_fsub+0x380>)
 8000d3c:	401a      	ands	r2, r3
 8000d3e:	085b      	lsrs	r3, r3, #1
 8000d40:	400b      	ands	r3, r1
 8000d42:	4313      	orrs	r3, r2
 8000d44:	401c      	ands	r4, r3
 8000d46:	e7a6      	b.n	8000c96 <__aeabi_fsub+0x8a>
 8000d48:	2e00      	cmp	r6, #0
 8000d4a:	d000      	beq.n	8000d4e <__aeabi_fsub+0x142>
 8000d4c:	e778      	b.n	8000c40 <__aeabi_fsub+0x34>
 8000d4e:	e775      	b.n	8000c3c <__aeabi_fsub+0x30>
 8000d50:	2cff      	cmp	r4, #255	; 0xff
 8000d52:	d054      	beq.n	8000dfe <__aeabi_fsub+0x1f2>
 8000d54:	2280      	movs	r2, #128	; 0x80
 8000d56:	4649      	mov	r1, r9
 8000d58:	04d2      	lsls	r2, r2, #19
 8000d5a:	4311      	orrs	r1, r2
 8000d5c:	4689      	mov	r9, r1
 8000d5e:	2201      	movs	r2, #1
 8000d60:	2e1b      	cmp	r6, #27
 8000d62:	dc09      	bgt.n	8000d78 <__aeabi_fsub+0x16c>
 8000d64:	2120      	movs	r1, #32
 8000d66:	4648      	mov	r0, r9
 8000d68:	1b89      	subs	r1, r1, r6
 8000d6a:	4088      	lsls	r0, r1
 8000d6c:	464a      	mov	r2, r9
 8000d6e:	0001      	movs	r1, r0
 8000d70:	40f2      	lsrs	r2, r6
 8000d72:	1e48      	subs	r0, r1, #1
 8000d74:	4181      	sbcs	r1, r0
 8000d76:	430a      	orrs	r2, r1
 8000d78:	1a9b      	subs	r3, r3, r2
 8000d7a:	015a      	lsls	r2, r3, #5
 8000d7c:	d500      	bpl.n	8000d80 <__aeabi_fsub+0x174>
 8000d7e:	e773      	b.n	8000c68 <__aeabi_fsub+0x5c>
 8000d80:	2201      	movs	r2, #1
 8000d82:	4641      	mov	r1, r8
 8000d84:	400a      	ands	r2, r1
 8000d86:	0759      	lsls	r1, r3, #29
 8000d88:	d000      	beq.n	8000d8c <__aeabi_fsub+0x180>
 8000d8a:	e789      	b.n	8000ca0 <__aeabi_fsub+0x94>
 8000d8c:	e011      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000d8e:	4648      	mov	r0, r9
 8000d90:	2800      	cmp	r0, #0
 8000d92:	d158      	bne.n	8000e46 <__aeabi_fsub+0x23a>
 8000d94:	2cff      	cmp	r4, #255	; 0xff
 8000d96:	d10c      	bne.n	8000db2 <__aeabi_fsub+0x1a6>
 8000d98:	08db      	lsrs	r3, r3, #3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_fsub+0x194>
 8000d9e:	e78c      	b.n	8000cba <__aeabi_fsub+0xae>
 8000da0:	2080      	movs	r0, #128	; 0x80
 8000da2:	03c0      	lsls	r0, r0, #15
 8000da4:	4303      	orrs	r3, r0
 8000da6:	025b      	lsls	r3, r3, #9
 8000da8:	0a5b      	lsrs	r3, r3, #9
 8000daa:	24ff      	movs	r4, #255	; 0xff
 8000dac:	e787      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000dae:	2cff      	cmp	r4, #255	; 0xff
 8000db0:	d025      	beq.n	8000dfe <__aeabi_fsub+0x1f2>
 8000db2:	08db      	lsrs	r3, r3, #3
 8000db4:	2dff      	cmp	r5, #255	; 0xff
 8000db6:	d0f0      	beq.n	8000d9a <__aeabi_fsub+0x18e>
 8000db8:	025b      	lsls	r3, r3, #9
 8000dba:	0a5b      	lsrs	r3, r3, #9
 8000dbc:	b2ec      	uxtb	r4, r5
 8000dbe:	e77e      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000dc0:	2c00      	cmp	r4, #0
 8000dc2:	d04d      	beq.n	8000e60 <__aeabi_fsub+0x254>
 8000dc4:	28ff      	cmp	r0, #255	; 0xff
 8000dc6:	d018      	beq.n	8000dfa <__aeabi_fsub+0x1ee>
 8000dc8:	2480      	movs	r4, #128	; 0x80
 8000dca:	04e4      	lsls	r4, r4, #19
 8000dcc:	4272      	negs	r2, r6
 8000dce:	4323      	orrs	r3, r4
 8000dd0:	2a1b      	cmp	r2, #27
 8000dd2:	dd00      	ble.n	8000dd6 <__aeabi_fsub+0x1ca>
 8000dd4:	e0c4      	b.n	8000f60 <__aeabi_fsub+0x354>
 8000dd6:	001c      	movs	r4, r3
 8000dd8:	2520      	movs	r5, #32
 8000dda:	40d4      	lsrs	r4, r2
 8000ddc:	1aaa      	subs	r2, r5, r2
 8000dde:	4093      	lsls	r3, r2
 8000de0:	1e5a      	subs	r2, r3, #1
 8000de2:	4193      	sbcs	r3, r2
 8000de4:	4323      	orrs	r3, r4
 8000de6:	464a      	mov	r2, r9
 8000de8:	0005      	movs	r5, r0
 8000dea:	1ad3      	subs	r3, r2, r3
 8000dec:	4688      	mov	r8, r1
 8000dee:	e738      	b.n	8000c62 <__aeabi_fsub+0x56>
 8000df0:	1c72      	adds	r2, r6, #1
 8000df2:	d0f8      	beq.n	8000de6 <__aeabi_fsub+0x1da>
 8000df4:	43f2      	mvns	r2, r6
 8000df6:	28ff      	cmp	r0, #255	; 0xff
 8000df8:	d1ea      	bne.n	8000dd0 <__aeabi_fsub+0x1c4>
 8000dfa:	000a      	movs	r2, r1
 8000dfc:	464b      	mov	r3, r9
 8000dfe:	25ff      	movs	r5, #255	; 0xff
 8000e00:	e7d7      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000e02:	019b      	lsls	r3, r3, #6
 8000e04:	0a5b      	lsrs	r3, r3, #9
 8000e06:	e75a      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d141      	bne.n	8000e90 <__aeabi_fsub+0x284>
 8000e0c:	1c65      	adds	r5, r4, #1
 8000e0e:	b2e9      	uxtb	r1, r5
 8000e10:	2901      	cmp	r1, #1
 8000e12:	dd45      	ble.n	8000ea0 <__aeabi_fsub+0x294>
 8000e14:	2dff      	cmp	r5, #255	; 0xff
 8000e16:	d100      	bne.n	8000e1a <__aeabi_fsub+0x20e>
 8000e18:	e74f      	b.n	8000cba <__aeabi_fsub+0xae>
 8000e1a:	2407      	movs	r4, #7
 8000e1c:	444b      	add	r3, r9
 8000e1e:	085b      	lsrs	r3, r3, #1
 8000e20:	401c      	ands	r4, r3
 8000e22:	e738      	b.n	8000c96 <__aeabi_fsub+0x8a>
 8000e24:	2207      	movs	r2, #7
 8000e26:	4b5a      	ldr	r3, [pc, #360]	; (8000f90 <__aeabi_fsub+0x384>)
 8000e28:	1a2d      	subs	r5, r5, r0
 8000e2a:	4023      	ands	r3, r4
 8000e2c:	4014      	ands	r4, r2
 8000e2e:	e732      	b.n	8000c96 <__aeabi_fsub+0x8a>
 8000e30:	2c00      	cmp	r4, #0
 8000e32:	d11d      	bne.n	8000e70 <__aeabi_fsub+0x264>
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d17a      	bne.n	8000f2e <__aeabi_fsub+0x322>
 8000e38:	464b      	mov	r3, r9
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d100      	bne.n	8000e40 <__aeabi_fsub+0x234>
 8000e3e:	e091      	b.n	8000f64 <__aeabi_fsub+0x358>
 8000e40:	000a      	movs	r2, r1
 8000e42:	2500      	movs	r5, #0
 8000e44:	e7b5      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000e46:	3e01      	subs	r6, #1
 8000e48:	2e00      	cmp	r6, #0
 8000e4a:	d119      	bne.n	8000e80 <__aeabi_fsub+0x274>
 8000e4c:	444b      	add	r3, r9
 8000e4e:	e76c      	b.n	8000d2a <__aeabi_fsub+0x11e>
 8000e50:	2cff      	cmp	r4, #255	; 0xff
 8000e52:	d184      	bne.n	8000d5e <__aeabi_fsub+0x152>
 8000e54:	25ff      	movs	r5, #255	; 0xff
 8000e56:	e7ac      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000e58:	464a      	mov	r2, r9
 8000e5a:	4688      	mov	r8, r1
 8000e5c:	1ad4      	subs	r4, r2, r3
 8000e5e:	e705      	b.n	8000c6c <__aeabi_fsub+0x60>
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1c5      	bne.n	8000df0 <__aeabi_fsub+0x1e4>
 8000e64:	000a      	movs	r2, r1
 8000e66:	28ff      	cmp	r0, #255	; 0xff
 8000e68:	d0c8      	beq.n	8000dfc <__aeabi_fsub+0x1f0>
 8000e6a:	0005      	movs	r5, r0
 8000e6c:	464b      	mov	r3, r9
 8000e6e:	e7a0      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d149      	bne.n	8000f08 <__aeabi_fsub+0x2fc>
 8000e74:	464b      	mov	r3, r9
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d077      	beq.n	8000f6a <__aeabi_fsub+0x35e>
 8000e7a:	000a      	movs	r2, r1
 8000e7c:	25ff      	movs	r5, #255	; 0xff
 8000e7e:	e798      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000e80:	2cff      	cmp	r4, #255	; 0xff
 8000e82:	d000      	beq.n	8000e86 <__aeabi_fsub+0x27a>
 8000e84:	e743      	b.n	8000d0e <__aeabi_fsub+0x102>
 8000e86:	e787      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000e88:	000a      	movs	r2, r1
 8000e8a:	24ff      	movs	r4, #255	; 0xff
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e716      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000e90:	2c00      	cmp	r4, #0
 8000e92:	d115      	bne.n	8000ec0 <__aeabi_fsub+0x2b4>
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d157      	bne.n	8000f48 <__aeabi_fsub+0x33c>
 8000e98:	28ff      	cmp	r0, #255	; 0xff
 8000e9a:	d1e6      	bne.n	8000e6a <__aeabi_fsub+0x25e>
 8000e9c:	464b      	mov	r3, r9
 8000e9e:	e77b      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000ea0:	2c00      	cmp	r4, #0
 8000ea2:	d120      	bne.n	8000ee6 <__aeabi_fsub+0x2da>
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d057      	beq.n	8000f58 <__aeabi_fsub+0x34c>
 8000ea8:	4649      	mov	r1, r9
 8000eaa:	2900      	cmp	r1, #0
 8000eac:	d053      	beq.n	8000f56 <__aeabi_fsub+0x34a>
 8000eae:	444b      	add	r3, r9
 8000eb0:	015a      	lsls	r2, r3, #5
 8000eb2:	d568      	bpl.n	8000f86 <__aeabi_fsub+0x37a>
 8000eb4:	2407      	movs	r4, #7
 8000eb6:	4a36      	ldr	r2, [pc, #216]	; (8000f90 <__aeabi_fsub+0x384>)
 8000eb8:	401c      	ands	r4, r3
 8000eba:	2501      	movs	r5, #1
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	e6ea      	b.n	8000c96 <__aeabi_fsub+0x8a>
 8000ec0:	28ff      	cmp	r0, #255	; 0xff
 8000ec2:	d0eb      	beq.n	8000e9c <__aeabi_fsub+0x290>
 8000ec4:	2280      	movs	r2, #128	; 0x80
 8000ec6:	04d2      	lsls	r2, r2, #19
 8000ec8:	4276      	negs	r6, r6
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	2e1b      	cmp	r6, #27
 8000ece:	dc53      	bgt.n	8000f78 <__aeabi_fsub+0x36c>
 8000ed0:	2520      	movs	r5, #32
 8000ed2:	1bad      	subs	r5, r5, r6
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	40ab      	lsls	r3, r5
 8000ed8:	40f2      	lsrs	r2, r6
 8000eda:	1e5c      	subs	r4, r3, #1
 8000edc:	41a3      	sbcs	r3, r4
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	444b      	add	r3, r9
 8000ee2:	0005      	movs	r5, r0
 8000ee4:	e721      	b.n	8000d2a <__aeabi_fsub+0x11e>
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0d8      	beq.n	8000e9c <__aeabi_fsub+0x290>
 8000eea:	4649      	mov	r1, r9
 8000eec:	2900      	cmp	r1, #0
 8000eee:	d100      	bne.n	8000ef2 <__aeabi_fsub+0x2e6>
 8000ef0:	e752      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000ef2:	2180      	movs	r1, #128	; 0x80
 8000ef4:	03c9      	lsls	r1, r1, #15
 8000ef6:	420f      	tst	r7, r1
 8000ef8:	d100      	bne.n	8000efc <__aeabi_fsub+0x2f0>
 8000efa:	e74d      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000efc:	4660      	mov	r0, ip
 8000efe:	4208      	tst	r0, r1
 8000f00:	d000      	beq.n	8000f04 <__aeabi_fsub+0x2f8>
 8000f02:	e749      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000f04:	464b      	mov	r3, r9
 8000f06:	e747      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000f08:	4648      	mov	r0, r9
 8000f0a:	25ff      	movs	r5, #255	; 0xff
 8000f0c:	2800      	cmp	r0, #0
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_fsub+0x306>
 8000f10:	e74f      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000f12:	2280      	movs	r2, #128	; 0x80
 8000f14:	03d2      	lsls	r2, r2, #15
 8000f16:	4217      	tst	r7, r2
 8000f18:	d004      	beq.n	8000f24 <__aeabi_fsub+0x318>
 8000f1a:	4660      	mov	r0, ip
 8000f1c:	4210      	tst	r0, r2
 8000f1e:	d101      	bne.n	8000f24 <__aeabi_fsub+0x318>
 8000f20:	464b      	mov	r3, r9
 8000f22:	4688      	mov	r8, r1
 8000f24:	2201      	movs	r2, #1
 8000f26:	4641      	mov	r1, r8
 8000f28:	25ff      	movs	r5, #255	; 0xff
 8000f2a:	400a      	ands	r2, r1
 8000f2c:	e741      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000f2e:	4648      	mov	r0, r9
 8000f30:	2800      	cmp	r0, #0
 8000f32:	d01f      	beq.n	8000f74 <__aeabi_fsub+0x368>
 8000f34:	1a1a      	subs	r2, r3, r0
 8000f36:	0150      	lsls	r0, r2, #5
 8000f38:	d520      	bpl.n	8000f7c <__aeabi_fsub+0x370>
 8000f3a:	464a      	mov	r2, r9
 8000f3c:	2407      	movs	r4, #7
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	401c      	ands	r4, r3
 8000f42:	4688      	mov	r8, r1
 8000f44:	2500      	movs	r5, #0
 8000f46:	e6a6      	b.n	8000c96 <__aeabi_fsub+0x8a>
 8000f48:	1c74      	adds	r4, r6, #1
 8000f4a:	d0c9      	beq.n	8000ee0 <__aeabi_fsub+0x2d4>
 8000f4c:	43f6      	mvns	r6, r6
 8000f4e:	28ff      	cmp	r0, #255	; 0xff
 8000f50:	d1bc      	bne.n	8000ecc <__aeabi_fsub+0x2c0>
 8000f52:	464b      	mov	r3, r9
 8000f54:	e720      	b.n	8000d98 <__aeabi_fsub+0x18c>
 8000f56:	4699      	mov	r9, r3
 8000f58:	464b      	mov	r3, r9
 8000f5a:	2500      	movs	r5, #0
 8000f5c:	08db      	lsrs	r3, r3, #3
 8000f5e:	e72b      	b.n	8000db8 <__aeabi_fsub+0x1ac>
 8000f60:	2301      	movs	r3, #1
 8000f62:	e740      	b.n	8000de6 <__aeabi_fsub+0x1da>
 8000f64:	2200      	movs	r2, #0
 8000f66:	2300      	movs	r3, #0
 8000f68:	e6a9      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000f6a:	2380      	movs	r3, #128	; 0x80
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	03db      	lsls	r3, r3, #15
 8000f70:	24ff      	movs	r4, #255	; 0xff
 8000f72:	e6a4      	b.n	8000cbe <__aeabi_fsub+0xb2>
 8000f74:	2500      	movs	r5, #0
 8000f76:	e71c      	b.n	8000db2 <__aeabi_fsub+0x1a6>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e7b1      	b.n	8000ee0 <__aeabi_fsub+0x2d4>
 8000f7c:	2a00      	cmp	r2, #0
 8000f7e:	d0f1      	beq.n	8000f64 <__aeabi_fsub+0x358>
 8000f80:	0013      	movs	r3, r2
 8000f82:	2500      	movs	r5, #0
 8000f84:	e6fc      	b.n	8000d80 <__aeabi_fsub+0x174>
 8000f86:	2500      	movs	r5, #0
 8000f88:	e6fa      	b.n	8000d80 <__aeabi_fsub+0x174>
 8000f8a:	46c0      	nop			; (mov r8, r8)
 8000f8c:	7dffffff 	.word	0x7dffffff
 8000f90:	fbffffff 	.word	0xfbffffff

08000f94 <__aeabi_f2iz>:
 8000f94:	0241      	lsls	r1, r0, #9
 8000f96:	0042      	lsls	r2, r0, #1
 8000f98:	0fc3      	lsrs	r3, r0, #31
 8000f9a:	0a49      	lsrs	r1, r1, #9
 8000f9c:	0e12      	lsrs	r2, r2, #24
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	2a7e      	cmp	r2, #126	; 0x7e
 8000fa2:	d90d      	bls.n	8000fc0 <__aeabi_f2iz+0x2c>
 8000fa4:	2a9d      	cmp	r2, #157	; 0x9d
 8000fa6:	d80c      	bhi.n	8000fc2 <__aeabi_f2iz+0x2e>
 8000fa8:	2080      	movs	r0, #128	; 0x80
 8000faa:	0400      	lsls	r0, r0, #16
 8000fac:	4301      	orrs	r1, r0
 8000fae:	2a95      	cmp	r2, #149	; 0x95
 8000fb0:	dc0a      	bgt.n	8000fc8 <__aeabi_f2iz+0x34>
 8000fb2:	2096      	movs	r0, #150	; 0x96
 8000fb4:	1a82      	subs	r2, r0, r2
 8000fb6:	40d1      	lsrs	r1, r2
 8000fb8:	4248      	negs	r0, r1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d100      	bne.n	8000fc0 <__aeabi_f2iz+0x2c>
 8000fbe:	0008      	movs	r0, r1
 8000fc0:	4770      	bx	lr
 8000fc2:	4a03      	ldr	r2, [pc, #12]	; (8000fd0 <__aeabi_f2iz+0x3c>)
 8000fc4:	1898      	adds	r0, r3, r2
 8000fc6:	e7fb      	b.n	8000fc0 <__aeabi_f2iz+0x2c>
 8000fc8:	3a96      	subs	r2, #150	; 0x96
 8000fca:	4091      	lsls	r1, r2
 8000fcc:	e7f4      	b.n	8000fb8 <__aeabi_f2iz+0x24>
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	7fffffff 	.word	0x7fffffff

08000fd4 <__aeabi_i2f>:
 8000fd4:	b570      	push	{r4, r5, r6, lr}
 8000fd6:	2800      	cmp	r0, #0
 8000fd8:	d03d      	beq.n	8001056 <__aeabi_i2f+0x82>
 8000fda:	17c3      	asrs	r3, r0, #31
 8000fdc:	18c5      	adds	r5, r0, r3
 8000fde:	405d      	eors	r5, r3
 8000fe0:	0fc4      	lsrs	r4, r0, #31
 8000fe2:	0028      	movs	r0, r5
 8000fe4:	f000 ff34 	bl	8001e50 <__clzsi2>
 8000fe8:	229e      	movs	r2, #158	; 0x9e
 8000fea:	1a12      	subs	r2, r2, r0
 8000fec:	2a96      	cmp	r2, #150	; 0x96
 8000fee:	dc07      	bgt.n	8001000 <__aeabi_i2f+0x2c>
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	2808      	cmp	r0, #8
 8000ff4:	dd33      	ble.n	800105e <__aeabi_i2f+0x8a>
 8000ff6:	3808      	subs	r0, #8
 8000ff8:	4085      	lsls	r5, r0
 8000ffa:	0268      	lsls	r0, r5, #9
 8000ffc:	0a40      	lsrs	r0, r0, #9
 8000ffe:	e023      	b.n	8001048 <__aeabi_i2f+0x74>
 8001000:	2a99      	cmp	r2, #153	; 0x99
 8001002:	dd0b      	ble.n	800101c <__aeabi_i2f+0x48>
 8001004:	2305      	movs	r3, #5
 8001006:	0029      	movs	r1, r5
 8001008:	1a1b      	subs	r3, r3, r0
 800100a:	40d9      	lsrs	r1, r3
 800100c:	0003      	movs	r3, r0
 800100e:	331b      	adds	r3, #27
 8001010:	409d      	lsls	r5, r3
 8001012:	002b      	movs	r3, r5
 8001014:	1e5d      	subs	r5, r3, #1
 8001016:	41ab      	sbcs	r3, r5
 8001018:	4319      	orrs	r1, r3
 800101a:	000d      	movs	r5, r1
 800101c:	2805      	cmp	r0, #5
 800101e:	dd01      	ble.n	8001024 <__aeabi_i2f+0x50>
 8001020:	1f43      	subs	r3, r0, #5
 8001022:	409d      	lsls	r5, r3
 8001024:	002b      	movs	r3, r5
 8001026:	490f      	ldr	r1, [pc, #60]	; (8001064 <__aeabi_i2f+0x90>)
 8001028:	400b      	ands	r3, r1
 800102a:	076e      	lsls	r6, r5, #29
 800102c:	d009      	beq.n	8001042 <__aeabi_i2f+0x6e>
 800102e:	260f      	movs	r6, #15
 8001030:	4035      	ands	r5, r6
 8001032:	2d04      	cmp	r5, #4
 8001034:	d005      	beq.n	8001042 <__aeabi_i2f+0x6e>
 8001036:	3304      	adds	r3, #4
 8001038:	015d      	lsls	r5, r3, #5
 800103a:	d502      	bpl.n	8001042 <__aeabi_i2f+0x6e>
 800103c:	229f      	movs	r2, #159	; 0x9f
 800103e:	400b      	ands	r3, r1
 8001040:	1a12      	subs	r2, r2, r0
 8001042:	019b      	lsls	r3, r3, #6
 8001044:	0a58      	lsrs	r0, r3, #9
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	0240      	lsls	r0, r0, #9
 800104a:	05d2      	lsls	r2, r2, #23
 800104c:	0a40      	lsrs	r0, r0, #9
 800104e:	07e4      	lsls	r4, r4, #31
 8001050:	4310      	orrs	r0, r2
 8001052:	4320      	orrs	r0, r4
 8001054:	bd70      	pop	{r4, r5, r6, pc}
 8001056:	2400      	movs	r4, #0
 8001058:	2200      	movs	r2, #0
 800105a:	2000      	movs	r0, #0
 800105c:	e7f4      	b.n	8001048 <__aeabi_i2f+0x74>
 800105e:	0268      	lsls	r0, r5, #9
 8001060:	0a40      	lsrs	r0, r0, #9
 8001062:	e7f1      	b.n	8001048 <__aeabi_i2f+0x74>
 8001064:	fbffffff 	.word	0xfbffffff

08001068 <__aeabi_dadd>:
 8001068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800106a:	464f      	mov	r7, r9
 800106c:	4646      	mov	r6, r8
 800106e:	46d6      	mov	lr, sl
 8001070:	000c      	movs	r4, r1
 8001072:	0309      	lsls	r1, r1, #12
 8001074:	b5c0      	push	{r6, r7, lr}
 8001076:	0a49      	lsrs	r1, r1, #9
 8001078:	0f47      	lsrs	r7, r0, #29
 800107a:	005e      	lsls	r6, r3, #1
 800107c:	4339      	orrs	r1, r7
 800107e:	031f      	lsls	r7, r3, #12
 8001080:	0fdb      	lsrs	r3, r3, #31
 8001082:	469c      	mov	ip, r3
 8001084:	0065      	lsls	r5, r4, #1
 8001086:	0a7b      	lsrs	r3, r7, #9
 8001088:	0f57      	lsrs	r7, r2, #29
 800108a:	431f      	orrs	r7, r3
 800108c:	0d6d      	lsrs	r5, r5, #21
 800108e:	0fe4      	lsrs	r4, r4, #31
 8001090:	0d76      	lsrs	r6, r6, #21
 8001092:	46a1      	mov	r9, r4
 8001094:	00c0      	lsls	r0, r0, #3
 8001096:	46b8      	mov	r8, r7
 8001098:	00d2      	lsls	r2, r2, #3
 800109a:	1bab      	subs	r3, r5, r6
 800109c:	4564      	cmp	r4, ip
 800109e:	d07b      	beq.n	8001198 <__aeabi_dadd+0x130>
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	dd5f      	ble.n	8001164 <__aeabi_dadd+0xfc>
 80010a4:	2e00      	cmp	r6, #0
 80010a6:	d000      	beq.n	80010aa <__aeabi_dadd+0x42>
 80010a8:	e0a4      	b.n	80011f4 <__aeabi_dadd+0x18c>
 80010aa:	003e      	movs	r6, r7
 80010ac:	4316      	orrs	r6, r2
 80010ae:	d100      	bne.n	80010b2 <__aeabi_dadd+0x4a>
 80010b0:	e112      	b.n	80012d8 <__aeabi_dadd+0x270>
 80010b2:	1e5e      	subs	r6, r3, #1
 80010b4:	2e00      	cmp	r6, #0
 80010b6:	d000      	beq.n	80010ba <__aeabi_dadd+0x52>
 80010b8:	e19e      	b.n	80013f8 <__aeabi_dadd+0x390>
 80010ba:	1a87      	subs	r7, r0, r2
 80010bc:	4643      	mov	r3, r8
 80010be:	42b8      	cmp	r0, r7
 80010c0:	4180      	sbcs	r0, r0
 80010c2:	2501      	movs	r5, #1
 80010c4:	1ac9      	subs	r1, r1, r3
 80010c6:	4240      	negs	r0, r0
 80010c8:	1a09      	subs	r1, r1, r0
 80010ca:	020b      	lsls	r3, r1, #8
 80010cc:	d400      	bmi.n	80010d0 <__aeabi_dadd+0x68>
 80010ce:	e131      	b.n	8001334 <__aeabi_dadd+0x2cc>
 80010d0:	0249      	lsls	r1, r1, #9
 80010d2:	0a4e      	lsrs	r6, r1, #9
 80010d4:	2e00      	cmp	r6, #0
 80010d6:	d100      	bne.n	80010da <__aeabi_dadd+0x72>
 80010d8:	e16e      	b.n	80013b8 <__aeabi_dadd+0x350>
 80010da:	0030      	movs	r0, r6
 80010dc:	f000 feb8 	bl	8001e50 <__clzsi2>
 80010e0:	0003      	movs	r3, r0
 80010e2:	3b08      	subs	r3, #8
 80010e4:	2b1f      	cmp	r3, #31
 80010e6:	dd00      	ble.n	80010ea <__aeabi_dadd+0x82>
 80010e8:	e161      	b.n	80013ae <__aeabi_dadd+0x346>
 80010ea:	2220      	movs	r2, #32
 80010ec:	0039      	movs	r1, r7
 80010ee:	1ad2      	subs	r2, r2, r3
 80010f0:	409e      	lsls	r6, r3
 80010f2:	40d1      	lsrs	r1, r2
 80010f4:	409f      	lsls	r7, r3
 80010f6:	430e      	orrs	r6, r1
 80010f8:	429d      	cmp	r5, r3
 80010fa:	dd00      	ble.n	80010fe <__aeabi_dadd+0x96>
 80010fc:	e151      	b.n	80013a2 <__aeabi_dadd+0x33a>
 80010fe:	1b5d      	subs	r5, r3, r5
 8001100:	1c6b      	adds	r3, r5, #1
 8001102:	2b1f      	cmp	r3, #31
 8001104:	dd00      	ble.n	8001108 <__aeabi_dadd+0xa0>
 8001106:	e17c      	b.n	8001402 <__aeabi_dadd+0x39a>
 8001108:	2120      	movs	r1, #32
 800110a:	1ac9      	subs	r1, r1, r3
 800110c:	003d      	movs	r5, r7
 800110e:	0030      	movs	r0, r6
 8001110:	408f      	lsls	r7, r1
 8001112:	4088      	lsls	r0, r1
 8001114:	40dd      	lsrs	r5, r3
 8001116:	1e79      	subs	r1, r7, #1
 8001118:	418f      	sbcs	r7, r1
 800111a:	0031      	movs	r1, r6
 800111c:	2207      	movs	r2, #7
 800111e:	4328      	orrs	r0, r5
 8001120:	40d9      	lsrs	r1, r3
 8001122:	2500      	movs	r5, #0
 8001124:	4307      	orrs	r7, r0
 8001126:	403a      	ands	r2, r7
 8001128:	2a00      	cmp	r2, #0
 800112a:	d009      	beq.n	8001140 <__aeabi_dadd+0xd8>
 800112c:	230f      	movs	r3, #15
 800112e:	403b      	ands	r3, r7
 8001130:	2b04      	cmp	r3, #4
 8001132:	d005      	beq.n	8001140 <__aeabi_dadd+0xd8>
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	42bb      	cmp	r3, r7
 8001138:	41bf      	sbcs	r7, r7
 800113a:	427f      	negs	r7, r7
 800113c:	19c9      	adds	r1, r1, r7
 800113e:	001f      	movs	r7, r3
 8001140:	020b      	lsls	r3, r1, #8
 8001142:	d400      	bmi.n	8001146 <__aeabi_dadd+0xde>
 8001144:	e226      	b.n	8001594 <__aeabi_dadd+0x52c>
 8001146:	1c6a      	adds	r2, r5, #1
 8001148:	4bc6      	ldr	r3, [pc, #792]	; (8001464 <__aeabi_dadd+0x3fc>)
 800114a:	0555      	lsls	r5, r2, #21
 800114c:	0d6d      	lsrs	r5, r5, #21
 800114e:	429a      	cmp	r2, r3
 8001150:	d100      	bne.n	8001154 <__aeabi_dadd+0xec>
 8001152:	e106      	b.n	8001362 <__aeabi_dadd+0x2fa>
 8001154:	4ac4      	ldr	r2, [pc, #784]	; (8001468 <__aeabi_dadd+0x400>)
 8001156:	08ff      	lsrs	r7, r7, #3
 8001158:	400a      	ands	r2, r1
 800115a:	0753      	lsls	r3, r2, #29
 800115c:	0252      	lsls	r2, r2, #9
 800115e:	433b      	orrs	r3, r7
 8001160:	0b12      	lsrs	r2, r2, #12
 8001162:	e08e      	b.n	8001282 <__aeabi_dadd+0x21a>
 8001164:	2b00      	cmp	r3, #0
 8001166:	d000      	beq.n	800116a <__aeabi_dadd+0x102>
 8001168:	e0b8      	b.n	80012dc <__aeabi_dadd+0x274>
 800116a:	1c6b      	adds	r3, r5, #1
 800116c:	055b      	lsls	r3, r3, #21
 800116e:	0d5b      	lsrs	r3, r3, #21
 8001170:	2b01      	cmp	r3, #1
 8001172:	dc00      	bgt.n	8001176 <__aeabi_dadd+0x10e>
 8001174:	e130      	b.n	80013d8 <__aeabi_dadd+0x370>
 8001176:	1a87      	subs	r7, r0, r2
 8001178:	4643      	mov	r3, r8
 800117a:	42b8      	cmp	r0, r7
 800117c:	41b6      	sbcs	r6, r6
 800117e:	1acb      	subs	r3, r1, r3
 8001180:	4276      	negs	r6, r6
 8001182:	1b9e      	subs	r6, r3, r6
 8001184:	0233      	lsls	r3, r6, #8
 8001186:	d500      	bpl.n	800118a <__aeabi_dadd+0x122>
 8001188:	e14c      	b.n	8001424 <__aeabi_dadd+0x3bc>
 800118a:	003b      	movs	r3, r7
 800118c:	4333      	orrs	r3, r6
 800118e:	d1a1      	bne.n	80010d4 <__aeabi_dadd+0x6c>
 8001190:	2200      	movs	r2, #0
 8001192:	2400      	movs	r4, #0
 8001194:	2500      	movs	r5, #0
 8001196:	e070      	b.n	800127a <__aeabi_dadd+0x212>
 8001198:	2b00      	cmp	r3, #0
 800119a:	dc00      	bgt.n	800119e <__aeabi_dadd+0x136>
 800119c:	e0e5      	b.n	800136a <__aeabi_dadd+0x302>
 800119e:	2e00      	cmp	r6, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_dadd+0x13c>
 80011a2:	e083      	b.n	80012ac <__aeabi_dadd+0x244>
 80011a4:	4eaf      	ldr	r6, [pc, #700]	; (8001464 <__aeabi_dadd+0x3fc>)
 80011a6:	42b5      	cmp	r5, r6
 80011a8:	d060      	beq.n	800126c <__aeabi_dadd+0x204>
 80011aa:	2680      	movs	r6, #128	; 0x80
 80011ac:	0436      	lsls	r6, r6, #16
 80011ae:	4337      	orrs	r7, r6
 80011b0:	46b8      	mov	r8, r7
 80011b2:	2b38      	cmp	r3, #56	; 0x38
 80011b4:	dc00      	bgt.n	80011b8 <__aeabi_dadd+0x150>
 80011b6:	e13e      	b.n	8001436 <__aeabi_dadd+0x3ce>
 80011b8:	4643      	mov	r3, r8
 80011ba:	4313      	orrs	r3, r2
 80011bc:	001f      	movs	r7, r3
 80011be:	1e7a      	subs	r2, r7, #1
 80011c0:	4197      	sbcs	r7, r2
 80011c2:	183f      	adds	r7, r7, r0
 80011c4:	4287      	cmp	r7, r0
 80011c6:	4180      	sbcs	r0, r0
 80011c8:	4240      	negs	r0, r0
 80011ca:	1809      	adds	r1, r1, r0
 80011cc:	020b      	lsls	r3, r1, #8
 80011ce:	d400      	bmi.n	80011d2 <__aeabi_dadd+0x16a>
 80011d0:	e0b0      	b.n	8001334 <__aeabi_dadd+0x2cc>
 80011d2:	4ba4      	ldr	r3, [pc, #656]	; (8001464 <__aeabi_dadd+0x3fc>)
 80011d4:	3501      	adds	r5, #1
 80011d6:	429d      	cmp	r5, r3
 80011d8:	d100      	bne.n	80011dc <__aeabi_dadd+0x174>
 80011da:	e0c3      	b.n	8001364 <__aeabi_dadd+0x2fc>
 80011dc:	4aa2      	ldr	r2, [pc, #648]	; (8001468 <__aeabi_dadd+0x400>)
 80011de:	087b      	lsrs	r3, r7, #1
 80011e0:	400a      	ands	r2, r1
 80011e2:	2101      	movs	r1, #1
 80011e4:	400f      	ands	r7, r1
 80011e6:	431f      	orrs	r7, r3
 80011e8:	0851      	lsrs	r1, r2, #1
 80011ea:	07d3      	lsls	r3, r2, #31
 80011ec:	2207      	movs	r2, #7
 80011ee:	431f      	orrs	r7, r3
 80011f0:	403a      	ands	r2, r7
 80011f2:	e799      	b.n	8001128 <__aeabi_dadd+0xc0>
 80011f4:	4e9b      	ldr	r6, [pc, #620]	; (8001464 <__aeabi_dadd+0x3fc>)
 80011f6:	42b5      	cmp	r5, r6
 80011f8:	d038      	beq.n	800126c <__aeabi_dadd+0x204>
 80011fa:	2680      	movs	r6, #128	; 0x80
 80011fc:	0436      	lsls	r6, r6, #16
 80011fe:	4337      	orrs	r7, r6
 8001200:	46b8      	mov	r8, r7
 8001202:	2b38      	cmp	r3, #56	; 0x38
 8001204:	dd00      	ble.n	8001208 <__aeabi_dadd+0x1a0>
 8001206:	e0dc      	b.n	80013c2 <__aeabi_dadd+0x35a>
 8001208:	2b1f      	cmp	r3, #31
 800120a:	dc00      	bgt.n	800120e <__aeabi_dadd+0x1a6>
 800120c:	e130      	b.n	8001470 <__aeabi_dadd+0x408>
 800120e:	001e      	movs	r6, r3
 8001210:	4647      	mov	r7, r8
 8001212:	3e20      	subs	r6, #32
 8001214:	40f7      	lsrs	r7, r6
 8001216:	46bc      	mov	ip, r7
 8001218:	2b20      	cmp	r3, #32
 800121a:	d004      	beq.n	8001226 <__aeabi_dadd+0x1be>
 800121c:	2640      	movs	r6, #64	; 0x40
 800121e:	1af3      	subs	r3, r6, r3
 8001220:	4646      	mov	r6, r8
 8001222:	409e      	lsls	r6, r3
 8001224:	4332      	orrs	r2, r6
 8001226:	0017      	movs	r7, r2
 8001228:	4663      	mov	r3, ip
 800122a:	1e7a      	subs	r2, r7, #1
 800122c:	4197      	sbcs	r7, r2
 800122e:	431f      	orrs	r7, r3
 8001230:	e0cc      	b.n	80013cc <__aeabi_dadd+0x364>
 8001232:	2b00      	cmp	r3, #0
 8001234:	d100      	bne.n	8001238 <__aeabi_dadd+0x1d0>
 8001236:	e204      	b.n	8001642 <__aeabi_dadd+0x5da>
 8001238:	4643      	mov	r3, r8
 800123a:	4313      	orrs	r3, r2
 800123c:	d100      	bne.n	8001240 <__aeabi_dadd+0x1d8>
 800123e:	e159      	b.n	80014f4 <__aeabi_dadd+0x48c>
 8001240:	074b      	lsls	r3, r1, #29
 8001242:	08c0      	lsrs	r0, r0, #3
 8001244:	4318      	orrs	r0, r3
 8001246:	2380      	movs	r3, #128	; 0x80
 8001248:	08c9      	lsrs	r1, r1, #3
 800124a:	031b      	lsls	r3, r3, #12
 800124c:	4219      	tst	r1, r3
 800124e:	d008      	beq.n	8001262 <__aeabi_dadd+0x1fa>
 8001250:	4645      	mov	r5, r8
 8001252:	08ed      	lsrs	r5, r5, #3
 8001254:	421d      	tst	r5, r3
 8001256:	d104      	bne.n	8001262 <__aeabi_dadd+0x1fa>
 8001258:	4643      	mov	r3, r8
 800125a:	08d0      	lsrs	r0, r2, #3
 800125c:	0759      	lsls	r1, r3, #29
 800125e:	4308      	orrs	r0, r1
 8001260:	0029      	movs	r1, r5
 8001262:	0f42      	lsrs	r2, r0, #29
 8001264:	00c9      	lsls	r1, r1, #3
 8001266:	4d7f      	ldr	r5, [pc, #508]	; (8001464 <__aeabi_dadd+0x3fc>)
 8001268:	4311      	orrs	r1, r2
 800126a:	00c0      	lsls	r0, r0, #3
 800126c:	074b      	lsls	r3, r1, #29
 800126e:	08ca      	lsrs	r2, r1, #3
 8001270:	497c      	ldr	r1, [pc, #496]	; (8001464 <__aeabi_dadd+0x3fc>)
 8001272:	08c0      	lsrs	r0, r0, #3
 8001274:	4303      	orrs	r3, r0
 8001276:	428d      	cmp	r5, r1
 8001278:	d068      	beq.n	800134c <__aeabi_dadd+0x2e4>
 800127a:	0312      	lsls	r2, r2, #12
 800127c:	056d      	lsls	r5, r5, #21
 800127e:	0b12      	lsrs	r2, r2, #12
 8001280:	0d6d      	lsrs	r5, r5, #21
 8001282:	2100      	movs	r1, #0
 8001284:	0312      	lsls	r2, r2, #12
 8001286:	0018      	movs	r0, r3
 8001288:	0b13      	lsrs	r3, r2, #12
 800128a:	0d0a      	lsrs	r2, r1, #20
 800128c:	0512      	lsls	r2, r2, #20
 800128e:	431a      	orrs	r2, r3
 8001290:	4b76      	ldr	r3, [pc, #472]	; (800146c <__aeabi_dadd+0x404>)
 8001292:	052d      	lsls	r5, r5, #20
 8001294:	4013      	ands	r3, r2
 8001296:	432b      	orrs	r3, r5
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	07e4      	lsls	r4, r4, #31
 800129c:	085b      	lsrs	r3, r3, #1
 800129e:	4323      	orrs	r3, r4
 80012a0:	0019      	movs	r1, r3
 80012a2:	bc1c      	pop	{r2, r3, r4}
 80012a4:	4690      	mov	r8, r2
 80012a6:	4699      	mov	r9, r3
 80012a8:	46a2      	mov	sl, r4
 80012aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ac:	003e      	movs	r6, r7
 80012ae:	4316      	orrs	r6, r2
 80012b0:	d012      	beq.n	80012d8 <__aeabi_dadd+0x270>
 80012b2:	1e5e      	subs	r6, r3, #1
 80012b4:	2e00      	cmp	r6, #0
 80012b6:	d000      	beq.n	80012ba <__aeabi_dadd+0x252>
 80012b8:	e100      	b.n	80014bc <__aeabi_dadd+0x454>
 80012ba:	1887      	adds	r7, r0, r2
 80012bc:	4287      	cmp	r7, r0
 80012be:	4180      	sbcs	r0, r0
 80012c0:	4441      	add	r1, r8
 80012c2:	4240      	negs	r0, r0
 80012c4:	1809      	adds	r1, r1, r0
 80012c6:	2501      	movs	r5, #1
 80012c8:	020b      	lsls	r3, r1, #8
 80012ca:	d533      	bpl.n	8001334 <__aeabi_dadd+0x2cc>
 80012cc:	2502      	movs	r5, #2
 80012ce:	e785      	b.n	80011dc <__aeabi_dadd+0x174>
 80012d0:	4664      	mov	r4, ip
 80012d2:	0033      	movs	r3, r6
 80012d4:	4641      	mov	r1, r8
 80012d6:	0010      	movs	r0, r2
 80012d8:	001d      	movs	r5, r3
 80012da:	e7c7      	b.n	800126c <__aeabi_dadd+0x204>
 80012dc:	2d00      	cmp	r5, #0
 80012de:	d000      	beq.n	80012e2 <__aeabi_dadd+0x27a>
 80012e0:	e0da      	b.n	8001498 <__aeabi_dadd+0x430>
 80012e2:	000c      	movs	r4, r1
 80012e4:	4304      	orrs	r4, r0
 80012e6:	d0f3      	beq.n	80012d0 <__aeabi_dadd+0x268>
 80012e8:	1c5c      	adds	r4, r3, #1
 80012ea:	d100      	bne.n	80012ee <__aeabi_dadd+0x286>
 80012ec:	e19f      	b.n	800162e <__aeabi_dadd+0x5c6>
 80012ee:	4c5d      	ldr	r4, [pc, #372]	; (8001464 <__aeabi_dadd+0x3fc>)
 80012f0:	42a6      	cmp	r6, r4
 80012f2:	d100      	bne.n	80012f6 <__aeabi_dadd+0x28e>
 80012f4:	e12f      	b.n	8001556 <__aeabi_dadd+0x4ee>
 80012f6:	43db      	mvns	r3, r3
 80012f8:	2b38      	cmp	r3, #56	; 0x38
 80012fa:	dd00      	ble.n	80012fe <__aeabi_dadd+0x296>
 80012fc:	e166      	b.n	80015cc <__aeabi_dadd+0x564>
 80012fe:	2b1f      	cmp	r3, #31
 8001300:	dd00      	ble.n	8001304 <__aeabi_dadd+0x29c>
 8001302:	e183      	b.n	800160c <__aeabi_dadd+0x5a4>
 8001304:	2420      	movs	r4, #32
 8001306:	0005      	movs	r5, r0
 8001308:	1ae4      	subs	r4, r4, r3
 800130a:	000f      	movs	r7, r1
 800130c:	40dd      	lsrs	r5, r3
 800130e:	40d9      	lsrs	r1, r3
 8001310:	40a0      	lsls	r0, r4
 8001312:	4643      	mov	r3, r8
 8001314:	40a7      	lsls	r7, r4
 8001316:	1a5b      	subs	r3, r3, r1
 8001318:	1e44      	subs	r4, r0, #1
 800131a:	41a0      	sbcs	r0, r4
 800131c:	4698      	mov	r8, r3
 800131e:	432f      	orrs	r7, r5
 8001320:	4338      	orrs	r0, r7
 8001322:	1a17      	subs	r7, r2, r0
 8001324:	42ba      	cmp	r2, r7
 8001326:	4192      	sbcs	r2, r2
 8001328:	4643      	mov	r3, r8
 800132a:	4252      	negs	r2, r2
 800132c:	1a99      	subs	r1, r3, r2
 800132e:	4664      	mov	r4, ip
 8001330:	0035      	movs	r5, r6
 8001332:	e6ca      	b.n	80010ca <__aeabi_dadd+0x62>
 8001334:	2207      	movs	r2, #7
 8001336:	403a      	ands	r2, r7
 8001338:	2a00      	cmp	r2, #0
 800133a:	d000      	beq.n	800133e <__aeabi_dadd+0x2d6>
 800133c:	e6f6      	b.n	800112c <__aeabi_dadd+0xc4>
 800133e:	074b      	lsls	r3, r1, #29
 8001340:	08ca      	lsrs	r2, r1, #3
 8001342:	4948      	ldr	r1, [pc, #288]	; (8001464 <__aeabi_dadd+0x3fc>)
 8001344:	08ff      	lsrs	r7, r7, #3
 8001346:	433b      	orrs	r3, r7
 8001348:	428d      	cmp	r5, r1
 800134a:	d196      	bne.n	800127a <__aeabi_dadd+0x212>
 800134c:	0019      	movs	r1, r3
 800134e:	4311      	orrs	r1, r2
 8001350:	d100      	bne.n	8001354 <__aeabi_dadd+0x2ec>
 8001352:	e19e      	b.n	8001692 <__aeabi_dadd+0x62a>
 8001354:	2180      	movs	r1, #128	; 0x80
 8001356:	0309      	lsls	r1, r1, #12
 8001358:	430a      	orrs	r2, r1
 800135a:	0312      	lsls	r2, r2, #12
 800135c:	0b12      	lsrs	r2, r2, #12
 800135e:	4d41      	ldr	r5, [pc, #260]	; (8001464 <__aeabi_dadd+0x3fc>)
 8001360:	e78f      	b.n	8001282 <__aeabi_dadd+0x21a>
 8001362:	0015      	movs	r5, r2
 8001364:	2200      	movs	r2, #0
 8001366:	2300      	movs	r3, #0
 8001368:	e78b      	b.n	8001282 <__aeabi_dadd+0x21a>
 800136a:	2b00      	cmp	r3, #0
 800136c:	d000      	beq.n	8001370 <__aeabi_dadd+0x308>
 800136e:	e0c7      	b.n	8001500 <__aeabi_dadd+0x498>
 8001370:	1c6b      	adds	r3, r5, #1
 8001372:	055f      	lsls	r7, r3, #21
 8001374:	0d7f      	lsrs	r7, r7, #21
 8001376:	2f01      	cmp	r7, #1
 8001378:	dc00      	bgt.n	800137c <__aeabi_dadd+0x314>
 800137a:	e0f1      	b.n	8001560 <__aeabi_dadd+0x4f8>
 800137c:	4d39      	ldr	r5, [pc, #228]	; (8001464 <__aeabi_dadd+0x3fc>)
 800137e:	42ab      	cmp	r3, r5
 8001380:	d100      	bne.n	8001384 <__aeabi_dadd+0x31c>
 8001382:	e0b9      	b.n	80014f8 <__aeabi_dadd+0x490>
 8001384:	1885      	adds	r5, r0, r2
 8001386:	000a      	movs	r2, r1
 8001388:	4285      	cmp	r5, r0
 800138a:	4189      	sbcs	r1, r1
 800138c:	4442      	add	r2, r8
 800138e:	4249      	negs	r1, r1
 8001390:	1851      	adds	r1, r2, r1
 8001392:	2207      	movs	r2, #7
 8001394:	07cf      	lsls	r7, r1, #31
 8001396:	086d      	lsrs	r5, r5, #1
 8001398:	432f      	orrs	r7, r5
 800139a:	0849      	lsrs	r1, r1, #1
 800139c:	403a      	ands	r2, r7
 800139e:	001d      	movs	r5, r3
 80013a0:	e6c2      	b.n	8001128 <__aeabi_dadd+0xc0>
 80013a2:	2207      	movs	r2, #7
 80013a4:	4930      	ldr	r1, [pc, #192]	; (8001468 <__aeabi_dadd+0x400>)
 80013a6:	1aed      	subs	r5, r5, r3
 80013a8:	4031      	ands	r1, r6
 80013aa:	403a      	ands	r2, r7
 80013ac:	e6bc      	b.n	8001128 <__aeabi_dadd+0xc0>
 80013ae:	003e      	movs	r6, r7
 80013b0:	3828      	subs	r0, #40	; 0x28
 80013b2:	4086      	lsls	r6, r0
 80013b4:	2700      	movs	r7, #0
 80013b6:	e69f      	b.n	80010f8 <__aeabi_dadd+0x90>
 80013b8:	0038      	movs	r0, r7
 80013ba:	f000 fd49 	bl	8001e50 <__clzsi2>
 80013be:	3020      	adds	r0, #32
 80013c0:	e68e      	b.n	80010e0 <__aeabi_dadd+0x78>
 80013c2:	4643      	mov	r3, r8
 80013c4:	4313      	orrs	r3, r2
 80013c6:	001f      	movs	r7, r3
 80013c8:	1e7a      	subs	r2, r7, #1
 80013ca:	4197      	sbcs	r7, r2
 80013cc:	1bc7      	subs	r7, r0, r7
 80013ce:	42b8      	cmp	r0, r7
 80013d0:	4180      	sbcs	r0, r0
 80013d2:	4240      	negs	r0, r0
 80013d4:	1a09      	subs	r1, r1, r0
 80013d6:	e678      	b.n	80010ca <__aeabi_dadd+0x62>
 80013d8:	000e      	movs	r6, r1
 80013da:	003b      	movs	r3, r7
 80013dc:	4306      	orrs	r6, r0
 80013de:	4313      	orrs	r3, r2
 80013e0:	2d00      	cmp	r5, #0
 80013e2:	d161      	bne.n	80014a8 <__aeabi_dadd+0x440>
 80013e4:	2e00      	cmp	r6, #0
 80013e6:	d000      	beq.n	80013ea <__aeabi_dadd+0x382>
 80013e8:	e0f4      	b.n	80015d4 <__aeabi_dadd+0x56c>
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d100      	bne.n	80013f0 <__aeabi_dadd+0x388>
 80013ee:	e11b      	b.n	8001628 <__aeabi_dadd+0x5c0>
 80013f0:	4664      	mov	r4, ip
 80013f2:	0039      	movs	r1, r7
 80013f4:	0010      	movs	r0, r2
 80013f6:	e739      	b.n	800126c <__aeabi_dadd+0x204>
 80013f8:	4f1a      	ldr	r7, [pc, #104]	; (8001464 <__aeabi_dadd+0x3fc>)
 80013fa:	42bb      	cmp	r3, r7
 80013fc:	d07a      	beq.n	80014f4 <__aeabi_dadd+0x48c>
 80013fe:	0033      	movs	r3, r6
 8001400:	e6ff      	b.n	8001202 <__aeabi_dadd+0x19a>
 8001402:	0030      	movs	r0, r6
 8001404:	3d1f      	subs	r5, #31
 8001406:	40e8      	lsrs	r0, r5
 8001408:	2b20      	cmp	r3, #32
 800140a:	d003      	beq.n	8001414 <__aeabi_dadd+0x3ac>
 800140c:	2140      	movs	r1, #64	; 0x40
 800140e:	1acb      	subs	r3, r1, r3
 8001410:	409e      	lsls	r6, r3
 8001412:	4337      	orrs	r7, r6
 8001414:	1e7b      	subs	r3, r7, #1
 8001416:	419f      	sbcs	r7, r3
 8001418:	2207      	movs	r2, #7
 800141a:	4307      	orrs	r7, r0
 800141c:	403a      	ands	r2, r7
 800141e:	2100      	movs	r1, #0
 8001420:	2500      	movs	r5, #0
 8001422:	e789      	b.n	8001338 <__aeabi_dadd+0x2d0>
 8001424:	1a17      	subs	r7, r2, r0
 8001426:	4643      	mov	r3, r8
 8001428:	42ba      	cmp	r2, r7
 800142a:	41b6      	sbcs	r6, r6
 800142c:	1a59      	subs	r1, r3, r1
 800142e:	4276      	negs	r6, r6
 8001430:	1b8e      	subs	r6, r1, r6
 8001432:	4664      	mov	r4, ip
 8001434:	e64e      	b.n	80010d4 <__aeabi_dadd+0x6c>
 8001436:	2b1f      	cmp	r3, #31
 8001438:	dd00      	ble.n	800143c <__aeabi_dadd+0x3d4>
 800143a:	e0ad      	b.n	8001598 <__aeabi_dadd+0x530>
 800143c:	2620      	movs	r6, #32
 800143e:	4647      	mov	r7, r8
 8001440:	1af6      	subs	r6, r6, r3
 8001442:	40b7      	lsls	r7, r6
 8001444:	46b9      	mov	r9, r7
 8001446:	0017      	movs	r7, r2
 8001448:	46b2      	mov	sl, r6
 800144a:	40df      	lsrs	r7, r3
 800144c:	464e      	mov	r6, r9
 800144e:	433e      	orrs	r6, r7
 8001450:	0037      	movs	r7, r6
 8001452:	4656      	mov	r6, sl
 8001454:	40b2      	lsls	r2, r6
 8001456:	1e56      	subs	r6, r2, #1
 8001458:	41b2      	sbcs	r2, r6
 800145a:	4317      	orrs	r7, r2
 800145c:	4642      	mov	r2, r8
 800145e:	40da      	lsrs	r2, r3
 8001460:	1889      	adds	r1, r1, r2
 8001462:	e6ae      	b.n	80011c2 <__aeabi_dadd+0x15a>
 8001464:	000007ff 	.word	0x000007ff
 8001468:	ff7fffff 	.word	0xff7fffff
 800146c:	800fffff 	.word	0x800fffff
 8001470:	2620      	movs	r6, #32
 8001472:	4647      	mov	r7, r8
 8001474:	1af6      	subs	r6, r6, r3
 8001476:	40b7      	lsls	r7, r6
 8001478:	46b9      	mov	r9, r7
 800147a:	0017      	movs	r7, r2
 800147c:	46b2      	mov	sl, r6
 800147e:	40df      	lsrs	r7, r3
 8001480:	464e      	mov	r6, r9
 8001482:	433e      	orrs	r6, r7
 8001484:	0037      	movs	r7, r6
 8001486:	4656      	mov	r6, sl
 8001488:	40b2      	lsls	r2, r6
 800148a:	1e56      	subs	r6, r2, #1
 800148c:	41b2      	sbcs	r2, r6
 800148e:	4317      	orrs	r7, r2
 8001490:	4642      	mov	r2, r8
 8001492:	40da      	lsrs	r2, r3
 8001494:	1a89      	subs	r1, r1, r2
 8001496:	e799      	b.n	80013cc <__aeabi_dadd+0x364>
 8001498:	4c7f      	ldr	r4, [pc, #508]	; (8001698 <__aeabi_dadd+0x630>)
 800149a:	42a6      	cmp	r6, r4
 800149c:	d05b      	beq.n	8001556 <__aeabi_dadd+0x4ee>
 800149e:	2480      	movs	r4, #128	; 0x80
 80014a0:	0424      	lsls	r4, r4, #16
 80014a2:	425b      	negs	r3, r3
 80014a4:	4321      	orrs	r1, r4
 80014a6:	e727      	b.n	80012f8 <__aeabi_dadd+0x290>
 80014a8:	2e00      	cmp	r6, #0
 80014aa:	d10c      	bne.n	80014c6 <__aeabi_dadd+0x45e>
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d100      	bne.n	80014b2 <__aeabi_dadd+0x44a>
 80014b0:	e0cb      	b.n	800164a <__aeabi_dadd+0x5e2>
 80014b2:	4664      	mov	r4, ip
 80014b4:	0039      	movs	r1, r7
 80014b6:	0010      	movs	r0, r2
 80014b8:	4d77      	ldr	r5, [pc, #476]	; (8001698 <__aeabi_dadd+0x630>)
 80014ba:	e6d7      	b.n	800126c <__aeabi_dadd+0x204>
 80014bc:	4f76      	ldr	r7, [pc, #472]	; (8001698 <__aeabi_dadd+0x630>)
 80014be:	42bb      	cmp	r3, r7
 80014c0:	d018      	beq.n	80014f4 <__aeabi_dadd+0x48c>
 80014c2:	0033      	movs	r3, r6
 80014c4:	e675      	b.n	80011b2 <__aeabi_dadd+0x14a>
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d014      	beq.n	80014f4 <__aeabi_dadd+0x48c>
 80014ca:	074b      	lsls	r3, r1, #29
 80014cc:	08c0      	lsrs	r0, r0, #3
 80014ce:	4318      	orrs	r0, r3
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	08c9      	lsrs	r1, r1, #3
 80014d4:	031b      	lsls	r3, r3, #12
 80014d6:	4219      	tst	r1, r3
 80014d8:	d007      	beq.n	80014ea <__aeabi_dadd+0x482>
 80014da:	08fc      	lsrs	r4, r7, #3
 80014dc:	421c      	tst	r4, r3
 80014de:	d104      	bne.n	80014ea <__aeabi_dadd+0x482>
 80014e0:	0779      	lsls	r1, r7, #29
 80014e2:	08d0      	lsrs	r0, r2, #3
 80014e4:	4308      	orrs	r0, r1
 80014e6:	46e1      	mov	r9, ip
 80014e8:	0021      	movs	r1, r4
 80014ea:	464c      	mov	r4, r9
 80014ec:	0f42      	lsrs	r2, r0, #29
 80014ee:	00c9      	lsls	r1, r1, #3
 80014f0:	4311      	orrs	r1, r2
 80014f2:	00c0      	lsls	r0, r0, #3
 80014f4:	4d68      	ldr	r5, [pc, #416]	; (8001698 <__aeabi_dadd+0x630>)
 80014f6:	e6b9      	b.n	800126c <__aeabi_dadd+0x204>
 80014f8:	001d      	movs	r5, r3
 80014fa:	2200      	movs	r2, #0
 80014fc:	2300      	movs	r3, #0
 80014fe:	e6c0      	b.n	8001282 <__aeabi_dadd+0x21a>
 8001500:	2d00      	cmp	r5, #0
 8001502:	d15b      	bne.n	80015bc <__aeabi_dadd+0x554>
 8001504:	000d      	movs	r5, r1
 8001506:	4305      	orrs	r5, r0
 8001508:	d100      	bne.n	800150c <__aeabi_dadd+0x4a4>
 800150a:	e6e2      	b.n	80012d2 <__aeabi_dadd+0x26a>
 800150c:	1c5d      	adds	r5, r3, #1
 800150e:	d100      	bne.n	8001512 <__aeabi_dadd+0x4aa>
 8001510:	e0b0      	b.n	8001674 <__aeabi_dadd+0x60c>
 8001512:	4d61      	ldr	r5, [pc, #388]	; (8001698 <__aeabi_dadd+0x630>)
 8001514:	42ae      	cmp	r6, r5
 8001516:	d01f      	beq.n	8001558 <__aeabi_dadd+0x4f0>
 8001518:	43db      	mvns	r3, r3
 800151a:	2b38      	cmp	r3, #56	; 0x38
 800151c:	dc71      	bgt.n	8001602 <__aeabi_dadd+0x59a>
 800151e:	2b1f      	cmp	r3, #31
 8001520:	dd00      	ble.n	8001524 <__aeabi_dadd+0x4bc>
 8001522:	e096      	b.n	8001652 <__aeabi_dadd+0x5ea>
 8001524:	2520      	movs	r5, #32
 8001526:	000f      	movs	r7, r1
 8001528:	1aed      	subs	r5, r5, r3
 800152a:	40af      	lsls	r7, r5
 800152c:	46b9      	mov	r9, r7
 800152e:	0007      	movs	r7, r0
 8001530:	46aa      	mov	sl, r5
 8001532:	40df      	lsrs	r7, r3
 8001534:	464d      	mov	r5, r9
 8001536:	433d      	orrs	r5, r7
 8001538:	002f      	movs	r7, r5
 800153a:	4655      	mov	r5, sl
 800153c:	40a8      	lsls	r0, r5
 800153e:	40d9      	lsrs	r1, r3
 8001540:	1e45      	subs	r5, r0, #1
 8001542:	41a8      	sbcs	r0, r5
 8001544:	4488      	add	r8, r1
 8001546:	4307      	orrs	r7, r0
 8001548:	18bf      	adds	r7, r7, r2
 800154a:	4297      	cmp	r7, r2
 800154c:	4192      	sbcs	r2, r2
 800154e:	4251      	negs	r1, r2
 8001550:	4441      	add	r1, r8
 8001552:	0035      	movs	r5, r6
 8001554:	e63a      	b.n	80011cc <__aeabi_dadd+0x164>
 8001556:	4664      	mov	r4, ip
 8001558:	0035      	movs	r5, r6
 800155a:	4641      	mov	r1, r8
 800155c:	0010      	movs	r0, r2
 800155e:	e685      	b.n	800126c <__aeabi_dadd+0x204>
 8001560:	000b      	movs	r3, r1
 8001562:	4303      	orrs	r3, r0
 8001564:	2d00      	cmp	r5, #0
 8001566:	d000      	beq.n	800156a <__aeabi_dadd+0x502>
 8001568:	e663      	b.n	8001232 <__aeabi_dadd+0x1ca>
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f5      	beq.n	800155a <__aeabi_dadd+0x4f2>
 800156e:	4643      	mov	r3, r8
 8001570:	4313      	orrs	r3, r2
 8001572:	d100      	bne.n	8001576 <__aeabi_dadd+0x50e>
 8001574:	e67a      	b.n	800126c <__aeabi_dadd+0x204>
 8001576:	1887      	adds	r7, r0, r2
 8001578:	4287      	cmp	r7, r0
 800157a:	4180      	sbcs	r0, r0
 800157c:	2207      	movs	r2, #7
 800157e:	4441      	add	r1, r8
 8001580:	4240      	negs	r0, r0
 8001582:	1809      	adds	r1, r1, r0
 8001584:	403a      	ands	r2, r7
 8001586:	020b      	lsls	r3, r1, #8
 8001588:	d400      	bmi.n	800158c <__aeabi_dadd+0x524>
 800158a:	e6d5      	b.n	8001338 <__aeabi_dadd+0x2d0>
 800158c:	4b43      	ldr	r3, [pc, #268]	; (800169c <__aeabi_dadd+0x634>)
 800158e:	3501      	adds	r5, #1
 8001590:	4019      	ands	r1, r3
 8001592:	e5c9      	b.n	8001128 <__aeabi_dadd+0xc0>
 8001594:	0038      	movs	r0, r7
 8001596:	e669      	b.n	800126c <__aeabi_dadd+0x204>
 8001598:	001e      	movs	r6, r3
 800159a:	4647      	mov	r7, r8
 800159c:	3e20      	subs	r6, #32
 800159e:	40f7      	lsrs	r7, r6
 80015a0:	46bc      	mov	ip, r7
 80015a2:	2b20      	cmp	r3, #32
 80015a4:	d004      	beq.n	80015b0 <__aeabi_dadd+0x548>
 80015a6:	2640      	movs	r6, #64	; 0x40
 80015a8:	1af3      	subs	r3, r6, r3
 80015aa:	4646      	mov	r6, r8
 80015ac:	409e      	lsls	r6, r3
 80015ae:	4332      	orrs	r2, r6
 80015b0:	0017      	movs	r7, r2
 80015b2:	4663      	mov	r3, ip
 80015b4:	1e7a      	subs	r2, r7, #1
 80015b6:	4197      	sbcs	r7, r2
 80015b8:	431f      	orrs	r7, r3
 80015ba:	e602      	b.n	80011c2 <__aeabi_dadd+0x15a>
 80015bc:	4d36      	ldr	r5, [pc, #216]	; (8001698 <__aeabi_dadd+0x630>)
 80015be:	42ae      	cmp	r6, r5
 80015c0:	d0ca      	beq.n	8001558 <__aeabi_dadd+0x4f0>
 80015c2:	2580      	movs	r5, #128	; 0x80
 80015c4:	042d      	lsls	r5, r5, #16
 80015c6:	425b      	negs	r3, r3
 80015c8:	4329      	orrs	r1, r5
 80015ca:	e7a6      	b.n	800151a <__aeabi_dadd+0x4b2>
 80015cc:	4308      	orrs	r0, r1
 80015ce:	1e41      	subs	r1, r0, #1
 80015d0:	4188      	sbcs	r0, r1
 80015d2:	e6a6      	b.n	8001322 <__aeabi_dadd+0x2ba>
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d100      	bne.n	80015da <__aeabi_dadd+0x572>
 80015d8:	e648      	b.n	800126c <__aeabi_dadd+0x204>
 80015da:	1a87      	subs	r7, r0, r2
 80015dc:	4643      	mov	r3, r8
 80015de:	42b8      	cmp	r0, r7
 80015e0:	41b6      	sbcs	r6, r6
 80015e2:	1acb      	subs	r3, r1, r3
 80015e4:	4276      	negs	r6, r6
 80015e6:	1b9e      	subs	r6, r3, r6
 80015e8:	0233      	lsls	r3, r6, #8
 80015ea:	d54b      	bpl.n	8001684 <__aeabi_dadd+0x61c>
 80015ec:	1a17      	subs	r7, r2, r0
 80015ee:	4643      	mov	r3, r8
 80015f0:	42ba      	cmp	r2, r7
 80015f2:	4192      	sbcs	r2, r2
 80015f4:	1a59      	subs	r1, r3, r1
 80015f6:	4252      	negs	r2, r2
 80015f8:	1a89      	subs	r1, r1, r2
 80015fa:	2207      	movs	r2, #7
 80015fc:	4664      	mov	r4, ip
 80015fe:	403a      	ands	r2, r7
 8001600:	e592      	b.n	8001128 <__aeabi_dadd+0xc0>
 8001602:	4301      	orrs	r1, r0
 8001604:	000f      	movs	r7, r1
 8001606:	1e79      	subs	r1, r7, #1
 8001608:	418f      	sbcs	r7, r1
 800160a:	e79d      	b.n	8001548 <__aeabi_dadd+0x4e0>
 800160c:	001c      	movs	r4, r3
 800160e:	000f      	movs	r7, r1
 8001610:	3c20      	subs	r4, #32
 8001612:	40e7      	lsrs	r7, r4
 8001614:	2b20      	cmp	r3, #32
 8001616:	d003      	beq.n	8001620 <__aeabi_dadd+0x5b8>
 8001618:	2440      	movs	r4, #64	; 0x40
 800161a:	1ae3      	subs	r3, r4, r3
 800161c:	4099      	lsls	r1, r3
 800161e:	4308      	orrs	r0, r1
 8001620:	1e41      	subs	r1, r0, #1
 8001622:	4188      	sbcs	r0, r1
 8001624:	4338      	orrs	r0, r7
 8001626:	e67c      	b.n	8001322 <__aeabi_dadd+0x2ba>
 8001628:	2200      	movs	r2, #0
 800162a:	2400      	movs	r4, #0
 800162c:	e625      	b.n	800127a <__aeabi_dadd+0x212>
 800162e:	1a17      	subs	r7, r2, r0
 8001630:	4643      	mov	r3, r8
 8001632:	42ba      	cmp	r2, r7
 8001634:	4192      	sbcs	r2, r2
 8001636:	1a59      	subs	r1, r3, r1
 8001638:	4252      	negs	r2, r2
 800163a:	1a89      	subs	r1, r1, r2
 800163c:	4664      	mov	r4, ip
 800163e:	0035      	movs	r5, r6
 8001640:	e543      	b.n	80010ca <__aeabi_dadd+0x62>
 8001642:	4641      	mov	r1, r8
 8001644:	0010      	movs	r0, r2
 8001646:	4d14      	ldr	r5, [pc, #80]	; (8001698 <__aeabi_dadd+0x630>)
 8001648:	e610      	b.n	800126c <__aeabi_dadd+0x204>
 800164a:	2280      	movs	r2, #128	; 0x80
 800164c:	2400      	movs	r4, #0
 800164e:	0312      	lsls	r2, r2, #12
 8001650:	e680      	b.n	8001354 <__aeabi_dadd+0x2ec>
 8001652:	001d      	movs	r5, r3
 8001654:	000f      	movs	r7, r1
 8001656:	3d20      	subs	r5, #32
 8001658:	40ef      	lsrs	r7, r5
 800165a:	46bc      	mov	ip, r7
 800165c:	2b20      	cmp	r3, #32
 800165e:	d003      	beq.n	8001668 <__aeabi_dadd+0x600>
 8001660:	2540      	movs	r5, #64	; 0x40
 8001662:	1aeb      	subs	r3, r5, r3
 8001664:	4099      	lsls	r1, r3
 8001666:	4308      	orrs	r0, r1
 8001668:	0007      	movs	r7, r0
 800166a:	4663      	mov	r3, ip
 800166c:	1e78      	subs	r0, r7, #1
 800166e:	4187      	sbcs	r7, r0
 8001670:	431f      	orrs	r7, r3
 8001672:	e769      	b.n	8001548 <__aeabi_dadd+0x4e0>
 8001674:	1887      	adds	r7, r0, r2
 8001676:	4297      	cmp	r7, r2
 8001678:	419b      	sbcs	r3, r3
 800167a:	4441      	add	r1, r8
 800167c:	425b      	negs	r3, r3
 800167e:	18c9      	adds	r1, r1, r3
 8001680:	0035      	movs	r5, r6
 8001682:	e5a3      	b.n	80011cc <__aeabi_dadd+0x164>
 8001684:	003b      	movs	r3, r7
 8001686:	4333      	orrs	r3, r6
 8001688:	d0ce      	beq.n	8001628 <__aeabi_dadd+0x5c0>
 800168a:	2207      	movs	r2, #7
 800168c:	0031      	movs	r1, r6
 800168e:	403a      	ands	r2, r7
 8001690:	e652      	b.n	8001338 <__aeabi_dadd+0x2d0>
 8001692:	2300      	movs	r3, #0
 8001694:	001a      	movs	r2, r3
 8001696:	e5f4      	b.n	8001282 <__aeabi_dadd+0x21a>
 8001698:	000007ff 	.word	0x000007ff
 800169c:	ff7fffff 	.word	0xff7fffff

080016a0 <__aeabi_ddiv>:
 80016a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a2:	4657      	mov	r7, sl
 80016a4:	46de      	mov	lr, fp
 80016a6:	464e      	mov	r6, r9
 80016a8:	4645      	mov	r5, r8
 80016aa:	b5e0      	push	{r5, r6, r7, lr}
 80016ac:	4683      	mov	fp, r0
 80016ae:	0007      	movs	r7, r0
 80016b0:	030e      	lsls	r6, r1, #12
 80016b2:	0048      	lsls	r0, r1, #1
 80016b4:	b085      	sub	sp, #20
 80016b6:	4692      	mov	sl, r2
 80016b8:	001c      	movs	r4, r3
 80016ba:	0b36      	lsrs	r6, r6, #12
 80016bc:	0d40      	lsrs	r0, r0, #21
 80016be:	0fcd      	lsrs	r5, r1, #31
 80016c0:	2800      	cmp	r0, #0
 80016c2:	d100      	bne.n	80016c6 <__aeabi_ddiv+0x26>
 80016c4:	e09d      	b.n	8001802 <__aeabi_ddiv+0x162>
 80016c6:	4b95      	ldr	r3, [pc, #596]	; (800191c <__aeabi_ddiv+0x27c>)
 80016c8:	4298      	cmp	r0, r3
 80016ca:	d039      	beq.n	8001740 <__aeabi_ddiv+0xa0>
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	00f6      	lsls	r6, r6, #3
 80016d0:	041b      	lsls	r3, r3, #16
 80016d2:	431e      	orrs	r6, r3
 80016d4:	4a92      	ldr	r2, [pc, #584]	; (8001920 <__aeabi_ddiv+0x280>)
 80016d6:	0f7b      	lsrs	r3, r7, #29
 80016d8:	4333      	orrs	r3, r6
 80016da:	4699      	mov	r9, r3
 80016dc:	4694      	mov	ip, r2
 80016de:	0003      	movs	r3, r0
 80016e0:	4463      	add	r3, ip
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2300      	movs	r3, #0
 80016e6:	2600      	movs	r6, #0
 80016e8:	00ff      	lsls	r7, r7, #3
 80016ea:	9302      	str	r3, [sp, #8]
 80016ec:	0323      	lsls	r3, r4, #12
 80016ee:	0b1b      	lsrs	r3, r3, #12
 80016f0:	4698      	mov	r8, r3
 80016f2:	0063      	lsls	r3, r4, #1
 80016f4:	0fe4      	lsrs	r4, r4, #31
 80016f6:	4652      	mov	r2, sl
 80016f8:	0d5b      	lsrs	r3, r3, #21
 80016fa:	9401      	str	r4, [sp, #4]
 80016fc:	d100      	bne.n	8001700 <__aeabi_ddiv+0x60>
 80016fe:	e0b3      	b.n	8001868 <__aeabi_ddiv+0x1c8>
 8001700:	4986      	ldr	r1, [pc, #536]	; (800191c <__aeabi_ddiv+0x27c>)
 8001702:	428b      	cmp	r3, r1
 8001704:	d100      	bne.n	8001708 <__aeabi_ddiv+0x68>
 8001706:	e09e      	b.n	8001846 <__aeabi_ddiv+0x1a6>
 8001708:	4642      	mov	r2, r8
 800170a:	00d1      	lsls	r1, r2, #3
 800170c:	2280      	movs	r2, #128	; 0x80
 800170e:	0412      	lsls	r2, r2, #16
 8001710:	430a      	orrs	r2, r1
 8001712:	4651      	mov	r1, sl
 8001714:	0f49      	lsrs	r1, r1, #29
 8001716:	4311      	orrs	r1, r2
 8001718:	468b      	mov	fp, r1
 800171a:	4981      	ldr	r1, [pc, #516]	; (8001920 <__aeabi_ddiv+0x280>)
 800171c:	4652      	mov	r2, sl
 800171e:	468c      	mov	ip, r1
 8001720:	9900      	ldr	r1, [sp, #0]
 8001722:	4463      	add	r3, ip
 8001724:	1acb      	subs	r3, r1, r3
 8001726:	2100      	movs	r1, #0
 8001728:	00d2      	lsls	r2, r2, #3
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	002b      	movs	r3, r5
 800172e:	4063      	eors	r3, r4
 8001730:	469a      	mov	sl, r3
 8001732:	2e0f      	cmp	r6, #15
 8001734:	d900      	bls.n	8001738 <__aeabi_ddiv+0x98>
 8001736:	e105      	b.n	8001944 <__aeabi_ddiv+0x2a4>
 8001738:	4b7a      	ldr	r3, [pc, #488]	; (8001924 <__aeabi_ddiv+0x284>)
 800173a:	00b6      	lsls	r6, r6, #2
 800173c:	599b      	ldr	r3, [r3, r6]
 800173e:	469f      	mov	pc, r3
 8001740:	465b      	mov	r3, fp
 8001742:	4333      	orrs	r3, r6
 8001744:	4699      	mov	r9, r3
 8001746:	d000      	beq.n	800174a <__aeabi_ddiv+0xaa>
 8001748:	e0b8      	b.n	80018bc <__aeabi_ddiv+0x21c>
 800174a:	2302      	movs	r3, #2
 800174c:	2608      	movs	r6, #8
 800174e:	2700      	movs	r7, #0
 8001750:	9000      	str	r0, [sp, #0]
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	e7ca      	b.n	80016ec <__aeabi_ddiv+0x4c>
 8001756:	46cb      	mov	fp, r9
 8001758:	003a      	movs	r2, r7
 800175a:	9902      	ldr	r1, [sp, #8]
 800175c:	9501      	str	r5, [sp, #4]
 800175e:	9b01      	ldr	r3, [sp, #4]
 8001760:	469a      	mov	sl, r3
 8001762:	2902      	cmp	r1, #2
 8001764:	d027      	beq.n	80017b6 <__aeabi_ddiv+0x116>
 8001766:	2903      	cmp	r1, #3
 8001768:	d100      	bne.n	800176c <__aeabi_ddiv+0xcc>
 800176a:	e280      	b.n	8001c6e <__aeabi_ddiv+0x5ce>
 800176c:	2901      	cmp	r1, #1
 800176e:	d044      	beq.n	80017fa <__aeabi_ddiv+0x15a>
 8001770:	496d      	ldr	r1, [pc, #436]	; (8001928 <__aeabi_ddiv+0x288>)
 8001772:	9b00      	ldr	r3, [sp, #0]
 8001774:	468c      	mov	ip, r1
 8001776:	4463      	add	r3, ip
 8001778:	001c      	movs	r4, r3
 800177a:	2c00      	cmp	r4, #0
 800177c:	dd38      	ble.n	80017f0 <__aeabi_ddiv+0x150>
 800177e:	0753      	lsls	r3, r2, #29
 8001780:	d000      	beq.n	8001784 <__aeabi_ddiv+0xe4>
 8001782:	e213      	b.n	8001bac <__aeabi_ddiv+0x50c>
 8001784:	08d2      	lsrs	r2, r2, #3
 8001786:	465b      	mov	r3, fp
 8001788:	01db      	lsls	r3, r3, #7
 800178a:	d509      	bpl.n	80017a0 <__aeabi_ddiv+0x100>
 800178c:	4659      	mov	r1, fp
 800178e:	4b67      	ldr	r3, [pc, #412]	; (800192c <__aeabi_ddiv+0x28c>)
 8001790:	4019      	ands	r1, r3
 8001792:	468b      	mov	fp, r1
 8001794:	2180      	movs	r1, #128	; 0x80
 8001796:	00c9      	lsls	r1, r1, #3
 8001798:	468c      	mov	ip, r1
 800179a:	9b00      	ldr	r3, [sp, #0]
 800179c:	4463      	add	r3, ip
 800179e:	001c      	movs	r4, r3
 80017a0:	4b63      	ldr	r3, [pc, #396]	; (8001930 <__aeabi_ddiv+0x290>)
 80017a2:	429c      	cmp	r4, r3
 80017a4:	dc07      	bgt.n	80017b6 <__aeabi_ddiv+0x116>
 80017a6:	465b      	mov	r3, fp
 80017a8:	0564      	lsls	r4, r4, #21
 80017aa:	075f      	lsls	r7, r3, #29
 80017ac:	025b      	lsls	r3, r3, #9
 80017ae:	4317      	orrs	r7, r2
 80017b0:	0b1b      	lsrs	r3, r3, #12
 80017b2:	0d62      	lsrs	r2, r4, #21
 80017b4:	e002      	b.n	80017bc <__aeabi_ddiv+0x11c>
 80017b6:	2300      	movs	r3, #0
 80017b8:	2700      	movs	r7, #0
 80017ba:	4a58      	ldr	r2, [pc, #352]	; (800191c <__aeabi_ddiv+0x27c>)
 80017bc:	2100      	movs	r1, #0
 80017be:	031b      	lsls	r3, r3, #12
 80017c0:	0b1c      	lsrs	r4, r3, #12
 80017c2:	0d0b      	lsrs	r3, r1, #20
 80017c4:	051b      	lsls	r3, r3, #20
 80017c6:	4323      	orrs	r3, r4
 80017c8:	0514      	lsls	r4, r2, #20
 80017ca:	4a5a      	ldr	r2, [pc, #360]	; (8001934 <__aeabi_ddiv+0x294>)
 80017cc:	0038      	movs	r0, r7
 80017ce:	4013      	ands	r3, r2
 80017d0:	431c      	orrs	r4, r3
 80017d2:	4653      	mov	r3, sl
 80017d4:	0064      	lsls	r4, r4, #1
 80017d6:	07db      	lsls	r3, r3, #31
 80017d8:	0864      	lsrs	r4, r4, #1
 80017da:	431c      	orrs	r4, r3
 80017dc:	0021      	movs	r1, r4
 80017de:	b005      	add	sp, #20
 80017e0:	bc3c      	pop	{r2, r3, r4, r5}
 80017e2:	4690      	mov	r8, r2
 80017e4:	4699      	mov	r9, r3
 80017e6:	46a2      	mov	sl, r4
 80017e8:	46ab      	mov	fp, r5
 80017ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ec:	2201      	movs	r2, #1
 80017ee:	4252      	negs	r2, r2
 80017f0:	2301      	movs	r3, #1
 80017f2:	1b1b      	subs	r3, r3, r4
 80017f4:	2b38      	cmp	r3, #56	; 0x38
 80017f6:	dc00      	bgt.n	80017fa <__aeabi_ddiv+0x15a>
 80017f8:	e1ad      	b.n	8001b56 <__aeabi_ddiv+0x4b6>
 80017fa:	2200      	movs	r2, #0
 80017fc:	2300      	movs	r3, #0
 80017fe:	2700      	movs	r7, #0
 8001800:	e7dc      	b.n	80017bc <__aeabi_ddiv+0x11c>
 8001802:	465b      	mov	r3, fp
 8001804:	4333      	orrs	r3, r6
 8001806:	4699      	mov	r9, r3
 8001808:	d05e      	beq.n	80018c8 <__aeabi_ddiv+0x228>
 800180a:	2e00      	cmp	r6, #0
 800180c:	d100      	bne.n	8001810 <__aeabi_ddiv+0x170>
 800180e:	e18a      	b.n	8001b26 <__aeabi_ddiv+0x486>
 8001810:	0030      	movs	r0, r6
 8001812:	f000 fb1d 	bl	8001e50 <__clzsi2>
 8001816:	0003      	movs	r3, r0
 8001818:	3b0b      	subs	r3, #11
 800181a:	2b1c      	cmp	r3, #28
 800181c:	dd00      	ble.n	8001820 <__aeabi_ddiv+0x180>
 800181e:	e17b      	b.n	8001b18 <__aeabi_ddiv+0x478>
 8001820:	221d      	movs	r2, #29
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	465a      	mov	r2, fp
 8001826:	0001      	movs	r1, r0
 8001828:	40da      	lsrs	r2, r3
 800182a:	3908      	subs	r1, #8
 800182c:	408e      	lsls	r6, r1
 800182e:	0013      	movs	r3, r2
 8001830:	465f      	mov	r7, fp
 8001832:	4333      	orrs	r3, r6
 8001834:	4699      	mov	r9, r3
 8001836:	408f      	lsls	r7, r1
 8001838:	4b3f      	ldr	r3, [pc, #252]	; (8001938 <__aeabi_ddiv+0x298>)
 800183a:	2600      	movs	r6, #0
 800183c:	1a1b      	subs	r3, r3, r0
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	2300      	movs	r3, #0
 8001842:	9302      	str	r3, [sp, #8]
 8001844:	e752      	b.n	80016ec <__aeabi_ddiv+0x4c>
 8001846:	4641      	mov	r1, r8
 8001848:	4653      	mov	r3, sl
 800184a:	430b      	orrs	r3, r1
 800184c:	493b      	ldr	r1, [pc, #236]	; (800193c <__aeabi_ddiv+0x29c>)
 800184e:	469b      	mov	fp, r3
 8001850:	468c      	mov	ip, r1
 8001852:	9b00      	ldr	r3, [sp, #0]
 8001854:	4463      	add	r3, ip
 8001856:	9300      	str	r3, [sp, #0]
 8001858:	465b      	mov	r3, fp
 800185a:	2b00      	cmp	r3, #0
 800185c:	d13b      	bne.n	80018d6 <__aeabi_ddiv+0x236>
 800185e:	2302      	movs	r3, #2
 8001860:	2200      	movs	r2, #0
 8001862:	431e      	orrs	r6, r3
 8001864:	2102      	movs	r1, #2
 8001866:	e761      	b.n	800172c <__aeabi_ddiv+0x8c>
 8001868:	4643      	mov	r3, r8
 800186a:	4313      	orrs	r3, r2
 800186c:	469b      	mov	fp, r3
 800186e:	d037      	beq.n	80018e0 <__aeabi_ddiv+0x240>
 8001870:	4643      	mov	r3, r8
 8001872:	2b00      	cmp	r3, #0
 8001874:	d100      	bne.n	8001878 <__aeabi_ddiv+0x1d8>
 8001876:	e162      	b.n	8001b3e <__aeabi_ddiv+0x49e>
 8001878:	4640      	mov	r0, r8
 800187a:	f000 fae9 	bl	8001e50 <__clzsi2>
 800187e:	0003      	movs	r3, r0
 8001880:	3b0b      	subs	r3, #11
 8001882:	2b1c      	cmp	r3, #28
 8001884:	dd00      	ble.n	8001888 <__aeabi_ddiv+0x1e8>
 8001886:	e153      	b.n	8001b30 <__aeabi_ddiv+0x490>
 8001888:	0002      	movs	r2, r0
 800188a:	4641      	mov	r1, r8
 800188c:	3a08      	subs	r2, #8
 800188e:	4091      	lsls	r1, r2
 8001890:	4688      	mov	r8, r1
 8001892:	211d      	movs	r1, #29
 8001894:	1acb      	subs	r3, r1, r3
 8001896:	4651      	mov	r1, sl
 8001898:	40d9      	lsrs	r1, r3
 800189a:	000b      	movs	r3, r1
 800189c:	4641      	mov	r1, r8
 800189e:	430b      	orrs	r3, r1
 80018a0:	469b      	mov	fp, r3
 80018a2:	4653      	mov	r3, sl
 80018a4:	4093      	lsls	r3, r2
 80018a6:	001a      	movs	r2, r3
 80018a8:	9b00      	ldr	r3, [sp, #0]
 80018aa:	4925      	ldr	r1, [pc, #148]	; (8001940 <__aeabi_ddiv+0x2a0>)
 80018ac:	469c      	mov	ip, r3
 80018ae:	4460      	add	r0, ip
 80018b0:	0003      	movs	r3, r0
 80018b2:	468c      	mov	ip, r1
 80018b4:	4463      	add	r3, ip
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	2100      	movs	r1, #0
 80018ba:	e737      	b.n	800172c <__aeabi_ddiv+0x8c>
 80018bc:	2303      	movs	r3, #3
 80018be:	46b1      	mov	r9, r6
 80018c0:	9000      	str	r0, [sp, #0]
 80018c2:	260c      	movs	r6, #12
 80018c4:	9302      	str	r3, [sp, #8]
 80018c6:	e711      	b.n	80016ec <__aeabi_ddiv+0x4c>
 80018c8:	2300      	movs	r3, #0
 80018ca:	9300      	str	r3, [sp, #0]
 80018cc:	3301      	adds	r3, #1
 80018ce:	2604      	movs	r6, #4
 80018d0:	2700      	movs	r7, #0
 80018d2:	9302      	str	r3, [sp, #8]
 80018d4:	e70a      	b.n	80016ec <__aeabi_ddiv+0x4c>
 80018d6:	2303      	movs	r3, #3
 80018d8:	46c3      	mov	fp, r8
 80018da:	431e      	orrs	r6, r3
 80018dc:	2103      	movs	r1, #3
 80018de:	e725      	b.n	800172c <__aeabi_ddiv+0x8c>
 80018e0:	3301      	adds	r3, #1
 80018e2:	431e      	orrs	r6, r3
 80018e4:	2200      	movs	r2, #0
 80018e6:	2101      	movs	r1, #1
 80018e8:	e720      	b.n	800172c <__aeabi_ddiv+0x8c>
 80018ea:	2300      	movs	r3, #0
 80018ec:	469a      	mov	sl, r3
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	2700      	movs	r7, #0
 80018f2:	031b      	lsls	r3, r3, #12
 80018f4:	4a09      	ldr	r2, [pc, #36]	; (800191c <__aeabi_ddiv+0x27c>)
 80018f6:	e761      	b.n	80017bc <__aeabi_ddiv+0x11c>
 80018f8:	2380      	movs	r3, #128	; 0x80
 80018fa:	4649      	mov	r1, r9
 80018fc:	031b      	lsls	r3, r3, #12
 80018fe:	4219      	tst	r1, r3
 8001900:	d100      	bne.n	8001904 <__aeabi_ddiv+0x264>
 8001902:	e0e2      	b.n	8001aca <__aeabi_ddiv+0x42a>
 8001904:	4659      	mov	r1, fp
 8001906:	4219      	tst	r1, r3
 8001908:	d000      	beq.n	800190c <__aeabi_ddiv+0x26c>
 800190a:	e0de      	b.n	8001aca <__aeabi_ddiv+0x42a>
 800190c:	430b      	orrs	r3, r1
 800190e:	031b      	lsls	r3, r3, #12
 8001910:	0017      	movs	r7, r2
 8001912:	0b1b      	lsrs	r3, r3, #12
 8001914:	46a2      	mov	sl, r4
 8001916:	4a01      	ldr	r2, [pc, #4]	; (800191c <__aeabi_ddiv+0x27c>)
 8001918:	e750      	b.n	80017bc <__aeabi_ddiv+0x11c>
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	000007ff 	.word	0x000007ff
 8001920:	fffffc01 	.word	0xfffffc01
 8001924:	08005cc4 	.word	0x08005cc4
 8001928:	000003ff 	.word	0x000003ff
 800192c:	feffffff 	.word	0xfeffffff
 8001930:	000007fe 	.word	0x000007fe
 8001934:	800fffff 	.word	0x800fffff
 8001938:	fffffc0d 	.word	0xfffffc0d
 800193c:	fffff801 	.word	0xfffff801
 8001940:	000003f3 	.word	0x000003f3
 8001944:	45d9      	cmp	r9, fp
 8001946:	d900      	bls.n	800194a <__aeabi_ddiv+0x2aa>
 8001948:	e0cb      	b.n	8001ae2 <__aeabi_ddiv+0x442>
 800194a:	d100      	bne.n	800194e <__aeabi_ddiv+0x2ae>
 800194c:	e0c6      	b.n	8001adc <__aeabi_ddiv+0x43c>
 800194e:	003c      	movs	r4, r7
 8001950:	4648      	mov	r0, r9
 8001952:	2700      	movs	r7, #0
 8001954:	9b00      	ldr	r3, [sp, #0]
 8001956:	3b01      	subs	r3, #1
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	465b      	mov	r3, fp
 800195c:	0e16      	lsrs	r6, r2, #24
 800195e:	021b      	lsls	r3, r3, #8
 8001960:	431e      	orrs	r6, r3
 8001962:	0213      	lsls	r3, r2, #8
 8001964:	4698      	mov	r8, r3
 8001966:	0433      	lsls	r3, r6, #16
 8001968:	0c1b      	lsrs	r3, r3, #16
 800196a:	4699      	mov	r9, r3
 800196c:	0c31      	lsrs	r1, r6, #16
 800196e:	9101      	str	r1, [sp, #4]
 8001970:	f7fe fc50 	bl	8000214 <__aeabi_uidivmod>
 8001974:	464a      	mov	r2, r9
 8001976:	4342      	muls	r2, r0
 8001978:	040b      	lsls	r3, r1, #16
 800197a:	0c21      	lsrs	r1, r4, #16
 800197c:	0005      	movs	r5, r0
 800197e:	4319      	orrs	r1, r3
 8001980:	428a      	cmp	r2, r1
 8001982:	d907      	bls.n	8001994 <__aeabi_ddiv+0x2f4>
 8001984:	1989      	adds	r1, r1, r6
 8001986:	3d01      	subs	r5, #1
 8001988:	428e      	cmp	r6, r1
 800198a:	d803      	bhi.n	8001994 <__aeabi_ddiv+0x2f4>
 800198c:	428a      	cmp	r2, r1
 800198e:	d901      	bls.n	8001994 <__aeabi_ddiv+0x2f4>
 8001990:	1e85      	subs	r5, r0, #2
 8001992:	1989      	adds	r1, r1, r6
 8001994:	1a88      	subs	r0, r1, r2
 8001996:	9901      	ldr	r1, [sp, #4]
 8001998:	f7fe fc3c 	bl	8000214 <__aeabi_uidivmod>
 800199c:	0409      	lsls	r1, r1, #16
 800199e:	468c      	mov	ip, r1
 80019a0:	464a      	mov	r2, r9
 80019a2:	0421      	lsls	r1, r4, #16
 80019a4:	4664      	mov	r4, ip
 80019a6:	4342      	muls	r2, r0
 80019a8:	0c09      	lsrs	r1, r1, #16
 80019aa:	0003      	movs	r3, r0
 80019ac:	4321      	orrs	r1, r4
 80019ae:	428a      	cmp	r2, r1
 80019b0:	d904      	bls.n	80019bc <__aeabi_ddiv+0x31c>
 80019b2:	1989      	adds	r1, r1, r6
 80019b4:	3b01      	subs	r3, #1
 80019b6:	428e      	cmp	r6, r1
 80019b8:	d800      	bhi.n	80019bc <__aeabi_ddiv+0x31c>
 80019ba:	e0f1      	b.n	8001ba0 <__aeabi_ddiv+0x500>
 80019bc:	042d      	lsls	r5, r5, #16
 80019be:	431d      	orrs	r5, r3
 80019c0:	46ab      	mov	fp, r5
 80019c2:	4643      	mov	r3, r8
 80019c4:	1a89      	subs	r1, r1, r2
 80019c6:	4642      	mov	r2, r8
 80019c8:	0c28      	lsrs	r0, r5, #16
 80019ca:	0412      	lsls	r2, r2, #16
 80019cc:	0c1d      	lsrs	r5, r3, #16
 80019ce:	465b      	mov	r3, fp
 80019d0:	0c14      	lsrs	r4, r2, #16
 80019d2:	0022      	movs	r2, r4
 80019d4:	041b      	lsls	r3, r3, #16
 80019d6:	0c1b      	lsrs	r3, r3, #16
 80019d8:	435a      	muls	r2, r3
 80019da:	9403      	str	r4, [sp, #12]
 80019dc:	436b      	muls	r3, r5
 80019de:	4344      	muls	r4, r0
 80019e0:	9502      	str	r5, [sp, #8]
 80019e2:	4368      	muls	r0, r5
 80019e4:	191b      	adds	r3, r3, r4
 80019e6:	0c15      	lsrs	r5, r2, #16
 80019e8:	18eb      	adds	r3, r5, r3
 80019ea:	429c      	cmp	r4, r3
 80019ec:	d903      	bls.n	80019f6 <__aeabi_ddiv+0x356>
 80019ee:	2480      	movs	r4, #128	; 0x80
 80019f0:	0264      	lsls	r4, r4, #9
 80019f2:	46a4      	mov	ip, r4
 80019f4:	4460      	add	r0, ip
 80019f6:	0c1c      	lsrs	r4, r3, #16
 80019f8:	0415      	lsls	r5, r2, #16
 80019fa:	041b      	lsls	r3, r3, #16
 80019fc:	0c2d      	lsrs	r5, r5, #16
 80019fe:	1820      	adds	r0, r4, r0
 8001a00:	195d      	adds	r5, r3, r5
 8001a02:	4281      	cmp	r1, r0
 8001a04:	d377      	bcc.n	8001af6 <__aeabi_ddiv+0x456>
 8001a06:	d073      	beq.n	8001af0 <__aeabi_ddiv+0x450>
 8001a08:	1a0c      	subs	r4, r1, r0
 8001a0a:	4aa2      	ldr	r2, [pc, #648]	; (8001c94 <__aeabi_ddiv+0x5f4>)
 8001a0c:	1b7d      	subs	r5, r7, r5
 8001a0e:	42af      	cmp	r7, r5
 8001a10:	41bf      	sbcs	r7, r7
 8001a12:	4694      	mov	ip, r2
 8001a14:	9b00      	ldr	r3, [sp, #0]
 8001a16:	427f      	negs	r7, r7
 8001a18:	4463      	add	r3, ip
 8001a1a:	1be0      	subs	r0, r4, r7
 8001a1c:	001c      	movs	r4, r3
 8001a1e:	4286      	cmp	r6, r0
 8001a20:	d100      	bne.n	8001a24 <__aeabi_ddiv+0x384>
 8001a22:	e0db      	b.n	8001bdc <__aeabi_ddiv+0x53c>
 8001a24:	9901      	ldr	r1, [sp, #4]
 8001a26:	f7fe fbf5 	bl	8000214 <__aeabi_uidivmod>
 8001a2a:	464a      	mov	r2, r9
 8001a2c:	4342      	muls	r2, r0
 8001a2e:	040b      	lsls	r3, r1, #16
 8001a30:	0c29      	lsrs	r1, r5, #16
 8001a32:	0007      	movs	r7, r0
 8001a34:	4319      	orrs	r1, r3
 8001a36:	428a      	cmp	r2, r1
 8001a38:	d907      	bls.n	8001a4a <__aeabi_ddiv+0x3aa>
 8001a3a:	1989      	adds	r1, r1, r6
 8001a3c:	3f01      	subs	r7, #1
 8001a3e:	428e      	cmp	r6, r1
 8001a40:	d803      	bhi.n	8001a4a <__aeabi_ddiv+0x3aa>
 8001a42:	428a      	cmp	r2, r1
 8001a44:	d901      	bls.n	8001a4a <__aeabi_ddiv+0x3aa>
 8001a46:	1e87      	subs	r7, r0, #2
 8001a48:	1989      	adds	r1, r1, r6
 8001a4a:	1a88      	subs	r0, r1, r2
 8001a4c:	9901      	ldr	r1, [sp, #4]
 8001a4e:	f7fe fbe1 	bl	8000214 <__aeabi_uidivmod>
 8001a52:	0409      	lsls	r1, r1, #16
 8001a54:	464a      	mov	r2, r9
 8001a56:	4689      	mov	r9, r1
 8001a58:	0429      	lsls	r1, r5, #16
 8001a5a:	464d      	mov	r5, r9
 8001a5c:	4342      	muls	r2, r0
 8001a5e:	0c09      	lsrs	r1, r1, #16
 8001a60:	0003      	movs	r3, r0
 8001a62:	4329      	orrs	r1, r5
 8001a64:	428a      	cmp	r2, r1
 8001a66:	d907      	bls.n	8001a78 <__aeabi_ddiv+0x3d8>
 8001a68:	1989      	adds	r1, r1, r6
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	428e      	cmp	r6, r1
 8001a6e:	d803      	bhi.n	8001a78 <__aeabi_ddiv+0x3d8>
 8001a70:	428a      	cmp	r2, r1
 8001a72:	d901      	bls.n	8001a78 <__aeabi_ddiv+0x3d8>
 8001a74:	1e83      	subs	r3, r0, #2
 8001a76:	1989      	adds	r1, r1, r6
 8001a78:	043f      	lsls	r7, r7, #16
 8001a7a:	1a89      	subs	r1, r1, r2
 8001a7c:	003a      	movs	r2, r7
 8001a7e:	9f03      	ldr	r7, [sp, #12]
 8001a80:	431a      	orrs	r2, r3
 8001a82:	0038      	movs	r0, r7
 8001a84:	0413      	lsls	r3, r2, #16
 8001a86:	0c1b      	lsrs	r3, r3, #16
 8001a88:	4358      	muls	r0, r3
 8001a8a:	4681      	mov	r9, r0
 8001a8c:	9802      	ldr	r0, [sp, #8]
 8001a8e:	0c15      	lsrs	r5, r2, #16
 8001a90:	436f      	muls	r7, r5
 8001a92:	4343      	muls	r3, r0
 8001a94:	4345      	muls	r5, r0
 8001a96:	4648      	mov	r0, r9
 8001a98:	0c00      	lsrs	r0, r0, #16
 8001a9a:	4684      	mov	ip, r0
 8001a9c:	19db      	adds	r3, r3, r7
 8001a9e:	4463      	add	r3, ip
 8001aa0:	429f      	cmp	r7, r3
 8001aa2:	d903      	bls.n	8001aac <__aeabi_ddiv+0x40c>
 8001aa4:	2080      	movs	r0, #128	; 0x80
 8001aa6:	0240      	lsls	r0, r0, #9
 8001aa8:	4684      	mov	ip, r0
 8001aaa:	4465      	add	r5, ip
 8001aac:	4648      	mov	r0, r9
 8001aae:	0c1f      	lsrs	r7, r3, #16
 8001ab0:	0400      	lsls	r0, r0, #16
 8001ab2:	041b      	lsls	r3, r3, #16
 8001ab4:	0c00      	lsrs	r0, r0, #16
 8001ab6:	197d      	adds	r5, r7, r5
 8001ab8:	1818      	adds	r0, r3, r0
 8001aba:	42a9      	cmp	r1, r5
 8001abc:	d200      	bcs.n	8001ac0 <__aeabi_ddiv+0x420>
 8001abe:	e084      	b.n	8001bca <__aeabi_ddiv+0x52a>
 8001ac0:	d100      	bne.n	8001ac4 <__aeabi_ddiv+0x424>
 8001ac2:	e07f      	b.n	8001bc4 <__aeabi_ddiv+0x524>
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	431a      	orrs	r2, r3
 8001ac8:	e657      	b.n	800177a <__aeabi_ddiv+0xda>
 8001aca:	2380      	movs	r3, #128	; 0x80
 8001acc:	464a      	mov	r2, r9
 8001ace:	031b      	lsls	r3, r3, #12
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	031b      	lsls	r3, r3, #12
 8001ad4:	0b1b      	lsrs	r3, r3, #12
 8001ad6:	46aa      	mov	sl, r5
 8001ad8:	4a6f      	ldr	r2, [pc, #444]	; (8001c98 <__aeabi_ddiv+0x5f8>)
 8001ada:	e66f      	b.n	80017bc <__aeabi_ddiv+0x11c>
 8001adc:	42ba      	cmp	r2, r7
 8001ade:	d900      	bls.n	8001ae2 <__aeabi_ddiv+0x442>
 8001ae0:	e735      	b.n	800194e <__aeabi_ddiv+0x2ae>
 8001ae2:	464b      	mov	r3, r9
 8001ae4:	07dc      	lsls	r4, r3, #31
 8001ae6:	0858      	lsrs	r0, r3, #1
 8001ae8:	087b      	lsrs	r3, r7, #1
 8001aea:	431c      	orrs	r4, r3
 8001aec:	07ff      	lsls	r7, r7, #31
 8001aee:	e734      	b.n	800195a <__aeabi_ddiv+0x2ba>
 8001af0:	2400      	movs	r4, #0
 8001af2:	42af      	cmp	r7, r5
 8001af4:	d289      	bcs.n	8001a0a <__aeabi_ddiv+0x36a>
 8001af6:	4447      	add	r7, r8
 8001af8:	4547      	cmp	r7, r8
 8001afa:	41a4      	sbcs	r4, r4
 8001afc:	465b      	mov	r3, fp
 8001afe:	4264      	negs	r4, r4
 8001b00:	19a4      	adds	r4, r4, r6
 8001b02:	1864      	adds	r4, r4, r1
 8001b04:	3b01      	subs	r3, #1
 8001b06:	42a6      	cmp	r6, r4
 8001b08:	d21e      	bcs.n	8001b48 <__aeabi_ddiv+0x4a8>
 8001b0a:	42a0      	cmp	r0, r4
 8001b0c:	d86d      	bhi.n	8001bea <__aeabi_ddiv+0x54a>
 8001b0e:	d100      	bne.n	8001b12 <__aeabi_ddiv+0x472>
 8001b10:	e0b6      	b.n	8001c80 <__aeabi_ddiv+0x5e0>
 8001b12:	1a24      	subs	r4, r4, r0
 8001b14:	469b      	mov	fp, r3
 8001b16:	e778      	b.n	8001a0a <__aeabi_ddiv+0x36a>
 8001b18:	0003      	movs	r3, r0
 8001b1a:	465a      	mov	r2, fp
 8001b1c:	3b28      	subs	r3, #40	; 0x28
 8001b1e:	409a      	lsls	r2, r3
 8001b20:	2700      	movs	r7, #0
 8001b22:	4691      	mov	r9, r2
 8001b24:	e688      	b.n	8001838 <__aeabi_ddiv+0x198>
 8001b26:	4658      	mov	r0, fp
 8001b28:	f000 f992 	bl	8001e50 <__clzsi2>
 8001b2c:	3020      	adds	r0, #32
 8001b2e:	e672      	b.n	8001816 <__aeabi_ddiv+0x176>
 8001b30:	0003      	movs	r3, r0
 8001b32:	4652      	mov	r2, sl
 8001b34:	3b28      	subs	r3, #40	; 0x28
 8001b36:	409a      	lsls	r2, r3
 8001b38:	4693      	mov	fp, r2
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	e6b4      	b.n	80018a8 <__aeabi_ddiv+0x208>
 8001b3e:	4650      	mov	r0, sl
 8001b40:	f000 f986 	bl	8001e50 <__clzsi2>
 8001b44:	3020      	adds	r0, #32
 8001b46:	e69a      	b.n	800187e <__aeabi_ddiv+0x1de>
 8001b48:	42a6      	cmp	r6, r4
 8001b4a:	d1e2      	bne.n	8001b12 <__aeabi_ddiv+0x472>
 8001b4c:	45b8      	cmp	r8, r7
 8001b4e:	d9dc      	bls.n	8001b0a <__aeabi_ddiv+0x46a>
 8001b50:	1a34      	subs	r4, r6, r0
 8001b52:	469b      	mov	fp, r3
 8001b54:	e759      	b.n	8001a0a <__aeabi_ddiv+0x36a>
 8001b56:	2b1f      	cmp	r3, #31
 8001b58:	dc65      	bgt.n	8001c26 <__aeabi_ddiv+0x586>
 8001b5a:	4c50      	ldr	r4, [pc, #320]	; (8001c9c <__aeabi_ddiv+0x5fc>)
 8001b5c:	9900      	ldr	r1, [sp, #0]
 8001b5e:	46a4      	mov	ip, r4
 8001b60:	465c      	mov	r4, fp
 8001b62:	4461      	add	r1, ip
 8001b64:	0008      	movs	r0, r1
 8001b66:	408c      	lsls	r4, r1
 8001b68:	0011      	movs	r1, r2
 8001b6a:	4082      	lsls	r2, r0
 8001b6c:	40d9      	lsrs	r1, r3
 8001b6e:	1e50      	subs	r0, r2, #1
 8001b70:	4182      	sbcs	r2, r0
 8001b72:	430c      	orrs	r4, r1
 8001b74:	4314      	orrs	r4, r2
 8001b76:	465a      	mov	r2, fp
 8001b78:	40da      	lsrs	r2, r3
 8001b7a:	0013      	movs	r3, r2
 8001b7c:	0762      	lsls	r2, r4, #29
 8001b7e:	d009      	beq.n	8001b94 <__aeabi_ddiv+0x4f4>
 8001b80:	220f      	movs	r2, #15
 8001b82:	4022      	ands	r2, r4
 8001b84:	2a04      	cmp	r2, #4
 8001b86:	d005      	beq.n	8001b94 <__aeabi_ddiv+0x4f4>
 8001b88:	0022      	movs	r2, r4
 8001b8a:	1d14      	adds	r4, r2, #4
 8001b8c:	4294      	cmp	r4, r2
 8001b8e:	4189      	sbcs	r1, r1
 8001b90:	4249      	negs	r1, r1
 8001b92:	185b      	adds	r3, r3, r1
 8001b94:	021a      	lsls	r2, r3, #8
 8001b96:	d562      	bpl.n	8001c5e <__aeabi_ddiv+0x5be>
 8001b98:	2201      	movs	r2, #1
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	2700      	movs	r7, #0
 8001b9e:	e60d      	b.n	80017bc <__aeabi_ddiv+0x11c>
 8001ba0:	428a      	cmp	r2, r1
 8001ba2:	d800      	bhi.n	8001ba6 <__aeabi_ddiv+0x506>
 8001ba4:	e70a      	b.n	80019bc <__aeabi_ddiv+0x31c>
 8001ba6:	1e83      	subs	r3, r0, #2
 8001ba8:	1989      	adds	r1, r1, r6
 8001baa:	e707      	b.n	80019bc <__aeabi_ddiv+0x31c>
 8001bac:	230f      	movs	r3, #15
 8001bae:	4013      	ands	r3, r2
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d100      	bne.n	8001bb6 <__aeabi_ddiv+0x516>
 8001bb4:	e5e6      	b.n	8001784 <__aeabi_ddiv+0xe4>
 8001bb6:	1d17      	adds	r7, r2, #4
 8001bb8:	4297      	cmp	r7, r2
 8001bba:	4192      	sbcs	r2, r2
 8001bbc:	4253      	negs	r3, r2
 8001bbe:	449b      	add	fp, r3
 8001bc0:	08fa      	lsrs	r2, r7, #3
 8001bc2:	e5e0      	b.n	8001786 <__aeabi_ddiv+0xe6>
 8001bc4:	2800      	cmp	r0, #0
 8001bc6:	d100      	bne.n	8001bca <__aeabi_ddiv+0x52a>
 8001bc8:	e5d7      	b.n	800177a <__aeabi_ddiv+0xda>
 8001bca:	1871      	adds	r1, r6, r1
 8001bcc:	1e53      	subs	r3, r2, #1
 8001bce:	42b1      	cmp	r1, r6
 8001bd0:	d327      	bcc.n	8001c22 <__aeabi_ddiv+0x582>
 8001bd2:	42a9      	cmp	r1, r5
 8001bd4:	d315      	bcc.n	8001c02 <__aeabi_ddiv+0x562>
 8001bd6:	d058      	beq.n	8001c8a <__aeabi_ddiv+0x5ea>
 8001bd8:	001a      	movs	r2, r3
 8001bda:	e773      	b.n	8001ac4 <__aeabi_ddiv+0x424>
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	dc00      	bgt.n	8001be2 <__aeabi_ddiv+0x542>
 8001be0:	e604      	b.n	80017ec <__aeabi_ddiv+0x14c>
 8001be2:	2301      	movs	r3, #1
 8001be4:	2200      	movs	r2, #0
 8001be6:	449b      	add	fp, r3
 8001be8:	e5cd      	b.n	8001786 <__aeabi_ddiv+0xe6>
 8001bea:	2302      	movs	r3, #2
 8001bec:	4447      	add	r7, r8
 8001bee:	4547      	cmp	r7, r8
 8001bf0:	4189      	sbcs	r1, r1
 8001bf2:	425b      	negs	r3, r3
 8001bf4:	469c      	mov	ip, r3
 8001bf6:	4249      	negs	r1, r1
 8001bf8:	1989      	adds	r1, r1, r6
 8001bfa:	190c      	adds	r4, r1, r4
 8001bfc:	44e3      	add	fp, ip
 8001bfe:	1a24      	subs	r4, r4, r0
 8001c00:	e703      	b.n	8001a0a <__aeabi_ddiv+0x36a>
 8001c02:	4643      	mov	r3, r8
 8001c04:	005f      	lsls	r7, r3, #1
 8001c06:	4547      	cmp	r7, r8
 8001c08:	419b      	sbcs	r3, r3
 8001c0a:	46b8      	mov	r8, r7
 8001c0c:	425b      	negs	r3, r3
 8001c0e:	199e      	adds	r6, r3, r6
 8001c10:	3a02      	subs	r2, #2
 8001c12:	1989      	adds	r1, r1, r6
 8001c14:	42a9      	cmp	r1, r5
 8001c16:	d000      	beq.n	8001c1a <__aeabi_ddiv+0x57a>
 8001c18:	e754      	b.n	8001ac4 <__aeabi_ddiv+0x424>
 8001c1a:	4540      	cmp	r0, r8
 8001c1c:	d000      	beq.n	8001c20 <__aeabi_ddiv+0x580>
 8001c1e:	e751      	b.n	8001ac4 <__aeabi_ddiv+0x424>
 8001c20:	e5ab      	b.n	800177a <__aeabi_ddiv+0xda>
 8001c22:	001a      	movs	r2, r3
 8001c24:	e7f6      	b.n	8001c14 <__aeabi_ddiv+0x574>
 8001c26:	211f      	movs	r1, #31
 8001c28:	465f      	mov	r7, fp
 8001c2a:	4249      	negs	r1, r1
 8001c2c:	1b0c      	subs	r4, r1, r4
 8001c2e:	40e7      	lsrs	r7, r4
 8001c30:	2b20      	cmp	r3, #32
 8001c32:	d007      	beq.n	8001c44 <__aeabi_ddiv+0x5a4>
 8001c34:	491a      	ldr	r1, [pc, #104]	; (8001ca0 <__aeabi_ddiv+0x600>)
 8001c36:	9b00      	ldr	r3, [sp, #0]
 8001c38:	468c      	mov	ip, r1
 8001c3a:	4463      	add	r3, ip
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	465b      	mov	r3, fp
 8001c40:	4083      	lsls	r3, r0
 8001c42:	431a      	orrs	r2, r3
 8001c44:	1e50      	subs	r0, r2, #1
 8001c46:	4182      	sbcs	r2, r0
 8001c48:	433a      	orrs	r2, r7
 8001c4a:	2707      	movs	r7, #7
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	4017      	ands	r7, r2
 8001c50:	d009      	beq.n	8001c66 <__aeabi_ddiv+0x5c6>
 8001c52:	210f      	movs	r1, #15
 8001c54:	2300      	movs	r3, #0
 8001c56:	4011      	ands	r1, r2
 8001c58:	0014      	movs	r4, r2
 8001c5a:	2904      	cmp	r1, #4
 8001c5c:	d195      	bne.n	8001b8a <__aeabi_ddiv+0x4ea>
 8001c5e:	0022      	movs	r2, r4
 8001c60:	075f      	lsls	r7, r3, #29
 8001c62:	025b      	lsls	r3, r3, #9
 8001c64:	0b1b      	lsrs	r3, r3, #12
 8001c66:	08d2      	lsrs	r2, r2, #3
 8001c68:	4317      	orrs	r7, r2
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	e5a6      	b.n	80017bc <__aeabi_ddiv+0x11c>
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	4659      	mov	r1, fp
 8001c72:	031b      	lsls	r3, r3, #12
 8001c74:	430b      	orrs	r3, r1
 8001c76:	031b      	lsls	r3, r3, #12
 8001c78:	0017      	movs	r7, r2
 8001c7a:	0b1b      	lsrs	r3, r3, #12
 8001c7c:	4a06      	ldr	r2, [pc, #24]	; (8001c98 <__aeabi_ddiv+0x5f8>)
 8001c7e:	e59d      	b.n	80017bc <__aeabi_ddiv+0x11c>
 8001c80:	42bd      	cmp	r5, r7
 8001c82:	d8b2      	bhi.n	8001bea <__aeabi_ddiv+0x54a>
 8001c84:	469b      	mov	fp, r3
 8001c86:	2400      	movs	r4, #0
 8001c88:	e6bf      	b.n	8001a0a <__aeabi_ddiv+0x36a>
 8001c8a:	4580      	cmp	r8, r0
 8001c8c:	d3b9      	bcc.n	8001c02 <__aeabi_ddiv+0x562>
 8001c8e:	001a      	movs	r2, r3
 8001c90:	e7c3      	b.n	8001c1a <__aeabi_ddiv+0x57a>
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	000003ff 	.word	0x000003ff
 8001c98:	000007ff 	.word	0x000007ff
 8001c9c:	0000041e 	.word	0x0000041e
 8001ca0:	0000043e 	.word	0x0000043e

08001ca4 <__aeabi_f2d>:
 8001ca4:	0041      	lsls	r1, r0, #1
 8001ca6:	0e09      	lsrs	r1, r1, #24
 8001ca8:	1c4b      	adds	r3, r1, #1
 8001caa:	b570      	push	{r4, r5, r6, lr}
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	0246      	lsls	r6, r0, #9
 8001cb0:	0a75      	lsrs	r5, r6, #9
 8001cb2:	0fc4      	lsrs	r4, r0, #31
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	dd14      	ble.n	8001ce2 <__aeabi_f2d+0x3e>
 8001cb8:	23e0      	movs	r3, #224	; 0xe0
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	076d      	lsls	r5, r5, #29
 8001cbe:	0b36      	lsrs	r6, r6, #12
 8001cc0:	18cb      	adds	r3, r1, r3
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	0d0a      	lsrs	r2, r1, #20
 8001cc6:	0028      	movs	r0, r5
 8001cc8:	0512      	lsls	r2, r2, #20
 8001cca:	4d1c      	ldr	r5, [pc, #112]	; (8001d3c <__aeabi_f2d+0x98>)
 8001ccc:	4332      	orrs	r2, r6
 8001cce:	055b      	lsls	r3, r3, #21
 8001cd0:	402a      	ands	r2, r5
 8001cd2:	085b      	lsrs	r3, r3, #1
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	07e4      	lsls	r4, r4, #31
 8001cda:	085b      	lsrs	r3, r3, #1
 8001cdc:	4323      	orrs	r3, r4
 8001cde:	0019      	movs	r1, r3
 8001ce0:	bd70      	pop	{r4, r5, r6, pc}
 8001ce2:	2900      	cmp	r1, #0
 8001ce4:	d114      	bne.n	8001d10 <__aeabi_f2d+0x6c>
 8001ce6:	2d00      	cmp	r5, #0
 8001ce8:	d01e      	beq.n	8001d28 <__aeabi_f2d+0x84>
 8001cea:	0028      	movs	r0, r5
 8001cec:	f000 f8b0 	bl	8001e50 <__clzsi2>
 8001cf0:	280a      	cmp	r0, #10
 8001cf2:	dc1c      	bgt.n	8001d2e <__aeabi_f2d+0x8a>
 8001cf4:	230b      	movs	r3, #11
 8001cf6:	002a      	movs	r2, r5
 8001cf8:	1a1b      	subs	r3, r3, r0
 8001cfa:	40da      	lsrs	r2, r3
 8001cfc:	0003      	movs	r3, r0
 8001cfe:	3315      	adds	r3, #21
 8001d00:	409d      	lsls	r5, r3
 8001d02:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <__aeabi_f2d+0x9c>)
 8001d04:	0312      	lsls	r2, r2, #12
 8001d06:	1a1b      	subs	r3, r3, r0
 8001d08:	055b      	lsls	r3, r3, #21
 8001d0a:	0b16      	lsrs	r6, r2, #12
 8001d0c:	0d5b      	lsrs	r3, r3, #21
 8001d0e:	e7d8      	b.n	8001cc2 <__aeabi_f2d+0x1e>
 8001d10:	2d00      	cmp	r5, #0
 8001d12:	d006      	beq.n	8001d22 <__aeabi_f2d+0x7e>
 8001d14:	0b32      	lsrs	r2, r6, #12
 8001d16:	2680      	movs	r6, #128	; 0x80
 8001d18:	0336      	lsls	r6, r6, #12
 8001d1a:	076d      	lsls	r5, r5, #29
 8001d1c:	4316      	orrs	r6, r2
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <__aeabi_f2d+0xa0>)
 8001d20:	e7cf      	b.n	8001cc2 <__aeabi_f2d+0x1e>
 8001d22:	4b08      	ldr	r3, [pc, #32]	; (8001d44 <__aeabi_f2d+0xa0>)
 8001d24:	2600      	movs	r6, #0
 8001d26:	e7cc      	b.n	8001cc2 <__aeabi_f2d+0x1e>
 8001d28:	2300      	movs	r3, #0
 8001d2a:	2600      	movs	r6, #0
 8001d2c:	e7c9      	b.n	8001cc2 <__aeabi_f2d+0x1e>
 8001d2e:	0003      	movs	r3, r0
 8001d30:	002a      	movs	r2, r5
 8001d32:	3b0b      	subs	r3, #11
 8001d34:	409a      	lsls	r2, r3
 8001d36:	2500      	movs	r5, #0
 8001d38:	e7e3      	b.n	8001d02 <__aeabi_f2d+0x5e>
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	800fffff 	.word	0x800fffff
 8001d40:	00000389 	.word	0x00000389
 8001d44:	000007ff 	.word	0x000007ff

08001d48 <__aeabi_d2f>:
 8001d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d4a:	004c      	lsls	r4, r1, #1
 8001d4c:	0d64      	lsrs	r4, r4, #21
 8001d4e:	030b      	lsls	r3, r1, #12
 8001d50:	1c62      	adds	r2, r4, #1
 8001d52:	0a5b      	lsrs	r3, r3, #9
 8001d54:	0f46      	lsrs	r6, r0, #29
 8001d56:	0552      	lsls	r2, r2, #21
 8001d58:	0fc9      	lsrs	r1, r1, #31
 8001d5a:	431e      	orrs	r6, r3
 8001d5c:	00c5      	lsls	r5, r0, #3
 8001d5e:	0d52      	lsrs	r2, r2, #21
 8001d60:	2a01      	cmp	r2, #1
 8001d62:	dd29      	ble.n	8001db8 <__aeabi_d2f+0x70>
 8001d64:	4b37      	ldr	r3, [pc, #220]	; (8001e44 <__aeabi_d2f+0xfc>)
 8001d66:	18e7      	adds	r7, r4, r3
 8001d68:	2ffe      	cmp	r7, #254	; 0xfe
 8001d6a:	dc1c      	bgt.n	8001da6 <__aeabi_d2f+0x5e>
 8001d6c:	2f00      	cmp	r7, #0
 8001d6e:	dd3b      	ble.n	8001de8 <__aeabi_d2f+0xa0>
 8001d70:	0180      	lsls	r0, r0, #6
 8001d72:	1e43      	subs	r3, r0, #1
 8001d74:	4198      	sbcs	r0, r3
 8001d76:	2207      	movs	r2, #7
 8001d78:	00f3      	lsls	r3, r6, #3
 8001d7a:	0f6d      	lsrs	r5, r5, #29
 8001d7c:	4303      	orrs	r3, r0
 8001d7e:	432b      	orrs	r3, r5
 8001d80:	401a      	ands	r2, r3
 8001d82:	2a00      	cmp	r2, #0
 8001d84:	d004      	beq.n	8001d90 <__aeabi_d2f+0x48>
 8001d86:	220f      	movs	r2, #15
 8001d88:	401a      	ands	r2, r3
 8001d8a:	2a04      	cmp	r2, #4
 8001d8c:	d000      	beq.n	8001d90 <__aeabi_d2f+0x48>
 8001d8e:	3304      	adds	r3, #4
 8001d90:	2280      	movs	r2, #128	; 0x80
 8001d92:	04d2      	lsls	r2, r2, #19
 8001d94:	401a      	ands	r2, r3
 8001d96:	d024      	beq.n	8001de2 <__aeabi_d2f+0x9a>
 8001d98:	3701      	adds	r7, #1
 8001d9a:	b2fa      	uxtb	r2, r7
 8001d9c:	2fff      	cmp	r7, #255	; 0xff
 8001d9e:	d002      	beq.n	8001da6 <__aeabi_d2f+0x5e>
 8001da0:	019b      	lsls	r3, r3, #6
 8001da2:	0a58      	lsrs	r0, r3, #9
 8001da4:	e001      	b.n	8001daa <__aeabi_d2f+0x62>
 8001da6:	22ff      	movs	r2, #255	; 0xff
 8001da8:	2000      	movs	r0, #0
 8001daa:	0240      	lsls	r0, r0, #9
 8001dac:	05d2      	lsls	r2, r2, #23
 8001dae:	0a40      	lsrs	r0, r0, #9
 8001db0:	07c9      	lsls	r1, r1, #31
 8001db2:	4310      	orrs	r0, r2
 8001db4:	4308      	orrs	r0, r1
 8001db6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001db8:	4335      	orrs	r5, r6
 8001dba:	2c00      	cmp	r4, #0
 8001dbc:	d104      	bne.n	8001dc8 <__aeabi_d2f+0x80>
 8001dbe:	2d00      	cmp	r5, #0
 8001dc0:	d10a      	bne.n	8001dd8 <__aeabi_d2f+0x90>
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	e7f0      	b.n	8001daa <__aeabi_d2f+0x62>
 8001dc8:	2d00      	cmp	r5, #0
 8001dca:	d0ec      	beq.n	8001da6 <__aeabi_d2f+0x5e>
 8001dcc:	2080      	movs	r0, #128	; 0x80
 8001dce:	03c0      	lsls	r0, r0, #15
 8001dd0:	4330      	orrs	r0, r6
 8001dd2:	22ff      	movs	r2, #255	; 0xff
 8001dd4:	e7e9      	b.n	8001daa <__aeabi_d2f+0x62>
 8001dd6:	2400      	movs	r4, #0
 8001dd8:	2300      	movs	r3, #0
 8001dda:	025b      	lsls	r3, r3, #9
 8001ddc:	0a58      	lsrs	r0, r3, #9
 8001dde:	b2e2      	uxtb	r2, r4
 8001de0:	e7e3      	b.n	8001daa <__aeabi_d2f+0x62>
 8001de2:	08db      	lsrs	r3, r3, #3
 8001de4:	003c      	movs	r4, r7
 8001de6:	e7f8      	b.n	8001dda <__aeabi_d2f+0x92>
 8001de8:	003b      	movs	r3, r7
 8001dea:	3317      	adds	r3, #23
 8001dec:	dbf3      	blt.n	8001dd6 <__aeabi_d2f+0x8e>
 8001dee:	2380      	movs	r3, #128	; 0x80
 8001df0:	041b      	lsls	r3, r3, #16
 8001df2:	4333      	orrs	r3, r6
 8001df4:	261e      	movs	r6, #30
 8001df6:	1bf6      	subs	r6, r6, r7
 8001df8:	2e1f      	cmp	r6, #31
 8001dfa:	dd14      	ble.n	8001e26 <__aeabi_d2f+0xde>
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	4252      	negs	r2, r2
 8001e00:	1bd7      	subs	r7, r2, r7
 8001e02:	001a      	movs	r2, r3
 8001e04:	40fa      	lsrs	r2, r7
 8001e06:	0017      	movs	r7, r2
 8001e08:	2e20      	cmp	r6, #32
 8001e0a:	d004      	beq.n	8001e16 <__aeabi_d2f+0xce>
 8001e0c:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <__aeabi_d2f+0x100>)
 8001e0e:	4694      	mov	ip, r2
 8001e10:	4464      	add	r4, ip
 8001e12:	40a3      	lsls	r3, r4
 8001e14:	431d      	orrs	r5, r3
 8001e16:	002b      	movs	r3, r5
 8001e18:	1e5d      	subs	r5, r3, #1
 8001e1a:	41ab      	sbcs	r3, r5
 8001e1c:	2207      	movs	r2, #7
 8001e1e:	433b      	orrs	r3, r7
 8001e20:	401a      	ands	r2, r3
 8001e22:	2700      	movs	r7, #0
 8001e24:	e7ad      	b.n	8001d82 <__aeabi_d2f+0x3a>
 8001e26:	4a09      	ldr	r2, [pc, #36]	; (8001e4c <__aeabi_d2f+0x104>)
 8001e28:	0028      	movs	r0, r5
 8001e2a:	18a2      	adds	r2, r4, r2
 8001e2c:	4095      	lsls	r5, r2
 8001e2e:	4093      	lsls	r3, r2
 8001e30:	1e6c      	subs	r4, r5, #1
 8001e32:	41a5      	sbcs	r5, r4
 8001e34:	40f0      	lsrs	r0, r6
 8001e36:	2207      	movs	r2, #7
 8001e38:	432b      	orrs	r3, r5
 8001e3a:	4303      	orrs	r3, r0
 8001e3c:	401a      	ands	r2, r3
 8001e3e:	2700      	movs	r7, #0
 8001e40:	e79f      	b.n	8001d82 <__aeabi_d2f+0x3a>
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	fffffc80 	.word	0xfffffc80
 8001e48:	fffffca2 	.word	0xfffffca2
 8001e4c:	fffffc82 	.word	0xfffffc82

08001e50 <__clzsi2>:
 8001e50:	211c      	movs	r1, #28
 8001e52:	2301      	movs	r3, #1
 8001e54:	041b      	lsls	r3, r3, #16
 8001e56:	4298      	cmp	r0, r3
 8001e58:	d301      	bcc.n	8001e5e <__clzsi2+0xe>
 8001e5a:	0c00      	lsrs	r0, r0, #16
 8001e5c:	3910      	subs	r1, #16
 8001e5e:	0a1b      	lsrs	r3, r3, #8
 8001e60:	4298      	cmp	r0, r3
 8001e62:	d301      	bcc.n	8001e68 <__clzsi2+0x18>
 8001e64:	0a00      	lsrs	r0, r0, #8
 8001e66:	3908      	subs	r1, #8
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	4298      	cmp	r0, r3
 8001e6c:	d301      	bcc.n	8001e72 <__clzsi2+0x22>
 8001e6e:	0900      	lsrs	r0, r0, #4
 8001e70:	3904      	subs	r1, #4
 8001e72:	a202      	add	r2, pc, #8	; (adr r2, 8001e7c <__clzsi2+0x2c>)
 8001e74:	5c10      	ldrb	r0, [r2, r0]
 8001e76:	1840      	adds	r0, r0, r1
 8001e78:	4770      	bx	lr
 8001e7a:	46c0      	nop			; (mov r8, r8)
 8001e7c:	02020304 	.word	0x02020304
 8001e80:	01010101 	.word	0x01010101
	...

08001e8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e90:	f000 feb0 	bl	8002bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e94:	f000 f80d 	bl	8001eb2 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e98:	f000 f9b0 	bl	80021fc <_ZL12MX_GPIO_Initv>
  MX_ADC_Init();
 8001e9c:	f000 f878 	bl	8001f90 <_ZL11MX_ADC_Initv>
  MX_I2C1_Init();
 8001ea0:	f000 f8ea 	bl	8002078 <_ZL12MX_I2C1_Initv>
  MX_SPI1_Init();
 8001ea4:	f000 f934 	bl	8002110 <_ZL12MX_SPI1_Initv>
  MX_USART1_UART_Init();
 8001ea8:	f000 f974 	bl	8002194 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */

    run();
 8001eac:	f000 fbd6 	bl	800265c <_Z3runv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 8001eb0:	e7fe      	b.n	8001eb0 <main+0x24>

08001eb2 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001eb2:	b590      	push	{r4, r7, lr}
 8001eb4:	b095      	sub	sp, #84	; 0x54
 8001eb6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eb8:	2420      	movs	r4, #32
 8001eba:	193b      	adds	r3, r7, r4
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	2330      	movs	r3, #48	; 0x30
 8001ec0:	001a      	movs	r2, r3
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	f003 fe76 	bl	8005bb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ec8:	2310      	movs	r3, #16
 8001eca:	18fb      	adds	r3, r7, r3
 8001ecc:	0018      	movs	r0, r3
 8001ece:	2310      	movs	r3, #16
 8001ed0:	001a      	movs	r2, r3
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	f003 fe6e 	bl	8005bb4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ed8:	003b      	movs	r3, r7
 8001eda:	0018      	movs	r0, r3
 8001edc:	2310      	movs	r3, #16
 8001ede:	001a      	movs	r2, r3
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	f003 fe67 	bl	8005bb4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8001ee6:	0021      	movs	r1, r4
 8001ee8:	187b      	adds	r3, r7, r1
 8001eea:	2213      	movs	r2, #19
 8001eec:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001eee:	187b      	adds	r3, r7, r1
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ef4:	187b      	adds	r3, r7, r1
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8001efa:	187b      	adds	r3, r7, r1
 8001efc:	2201      	movs	r2, #1
 8001efe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f00:	187b      	adds	r3, r7, r1
 8001f02:	2210      	movs	r2, #16
 8001f04:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8001f06:	187b      	adds	r3, r7, r1
 8001f08:	2210      	movs	r2, #16
 8001f0a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f0c:	187b      	adds	r3, r7, r1
 8001f0e:	2200      	movs	r2, #0
 8001f10:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f12:	187b      	adds	r3, r7, r1
 8001f14:	0018      	movs	r0, r3
 8001f16:	f001 fc99 	bl	800384c <HAL_RCC_OscConfig>
 8001f1a:	0003      	movs	r3, r0
 8001f1c:	1e5a      	subs	r2, r3, #1
 8001f1e:	4193      	sbcs	r3, r2
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 8001f26:	f000 fa1d 	bl	8002364 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f2a:	2110      	movs	r1, #16
 8001f2c:	187b      	adds	r3, r7, r1
 8001f2e:	2207      	movs	r2, #7
 8001f30:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001f32:	187b      	adds	r3, r7, r1
 8001f34:	2201      	movs	r2, #1
 8001f36:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f38:	187b      	adds	r3, r7, r1
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f3e:	187b      	adds	r3, r7, r1
 8001f40:	2200      	movs	r2, #0
 8001f42:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f44:	187b      	adds	r3, r7, r1
 8001f46:	2100      	movs	r1, #0
 8001f48:	0018      	movs	r0, r3
 8001f4a:	f001 ff9b 	bl	8003e84 <HAL_RCC_ClockConfig>
 8001f4e:	0003      	movs	r3, r0
 8001f50:	1e5a      	subs	r2, r3, #1
 8001f52:	4193      	sbcs	r3, r2
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <_Z18SystemClock_Configv+0xac>
  {
    Error_Handler();
 8001f5a:	f000 fa03 	bl	8002364 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8001f5e:	003b      	movs	r3, r7
 8001f60:	2221      	movs	r2, #33	; 0x21
 8001f62:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001f64:	003b      	movs	r3, r7
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001f6a:	003b      	movs	r3, r7
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f70:	003b      	movs	r3, r7
 8001f72:	0018      	movs	r0, r3
 8001f74:	f002 f8d8 	bl	8004128 <HAL_RCCEx_PeriphCLKConfig>
 8001f78:	0003      	movs	r3, r0
 8001f7a:	1e5a      	subs	r2, r3, #1
 8001f7c:	4193      	sbcs	r3, r2
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8001f84:	f000 f9ee 	bl	8002364 <Error_Handler>
  }
}
 8001f88:	46c0      	nop			; (mov r8, r8)
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b015      	add	sp, #84	; 0x54
 8001f8e:	bd90      	pop	{r4, r7, pc}

08001f90 <_ZL11MX_ADC_Initv>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001f96:	1d3b      	adds	r3, r7, #4
 8001f98:	0018      	movs	r0, r3
 8001f9a:	230c      	movs	r3, #12
 8001f9c:	001a      	movs	r2, r3
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	f003 fe08 	bl	8005bb4 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001fa4:	4b32      	ldr	r3, [pc, #200]	; (8002070 <_ZL11MX_ADC_Initv+0xe0>)
 8001fa6:	4a33      	ldr	r2, [pc, #204]	; (8002074 <_ZL11MX_ADC_Initv+0xe4>)
 8001fa8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001faa:	4b31      	ldr	r3, [pc, #196]	; (8002070 <_ZL11MX_ADC_Initv+0xe0>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001fb0:	4b2f      	ldr	r3, [pc, #188]	; (8002070 <_ZL11MX_ADC_Initv+0xe0>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001fb6:	4b2e      	ldr	r3, [pc, #184]	; (8002070 <_ZL11MX_ADC_Initv+0xe0>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001fbc:	4b2c      	ldr	r3, [pc, #176]	; (8002070 <_ZL11MX_ADC_Initv+0xe0>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001fc2:	4b2b      	ldr	r3, [pc, #172]	; (8002070 <_ZL11MX_ADC_Initv+0xe0>)
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001fc8:	4b29      	ldr	r3, [pc, #164]	; (8002070 <_ZL11MX_ADC_Initv+0xe0>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001fce:	4b28      	ldr	r3, [pc, #160]	; (8002070 <_ZL11MX_ADC_Initv+0xe0>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001fd4:	4b26      	ldr	r3, [pc, #152]	; (8002070 <_ZL11MX_ADC_Initv+0xe0>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001fda:	4b25      	ldr	r3, [pc, #148]	; (8002070 <_ZL11MX_ADC_Initv+0xe0>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001fe0:	4b23      	ldr	r3, [pc, #140]	; (8002070 <_ZL11MX_ADC_Initv+0xe0>)
 8001fe2:	22c2      	movs	r2, #194	; 0xc2
 8001fe4:	32ff      	adds	r2, #255	; 0xff
 8001fe6:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fe8:	4b21      	ldr	r3, [pc, #132]	; (8002070 <_ZL11MX_ADC_Initv+0xe0>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001fee:	4b20      	ldr	r3, [pc, #128]	; (8002070 <_ZL11MX_ADC_Initv+0xe0>)
 8001ff0:	2224      	movs	r2, #36	; 0x24
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <_ZL11MX_ADC_Initv+0xe0>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001ffc:	4b1c      	ldr	r3, [pc, #112]	; (8002070 <_ZL11MX_ADC_Initv+0xe0>)
 8001ffe:	0018      	movs	r0, r3
 8002000:	f000 fe7e 	bl	8002d00 <HAL_ADC_Init>
 8002004:	0003      	movs	r3, r0
 8002006:	1e5a      	subs	r2, r3, #1
 8002008:	4193      	sbcs	r3, r2
 800200a:	b2db      	uxtb	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <_ZL11MX_ADC_Initv+0x84>
  {
    Error_Handler();
 8002010:	f000 f9a8 	bl	8002364 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	2280      	movs	r2, #128	; 0x80
 800201e:	0152      	lsls	r2, r2, #5
 8002020:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002022:	1d3b      	adds	r3, r7, #4
 8002024:	2280      	movs	r2, #128	; 0x80
 8002026:	0552      	lsls	r2, r2, #21
 8002028:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800202a:	1d3a      	adds	r2, r7, #4
 800202c:	4b10      	ldr	r3, [pc, #64]	; (8002070 <_ZL11MX_ADC_Initv+0xe0>)
 800202e:	0011      	movs	r1, r2
 8002030:	0018      	movs	r0, r3
 8002032:	f000 ffa5 	bl	8002f80 <HAL_ADC_ConfigChannel>
 8002036:	0003      	movs	r3, r0
 8002038:	1e5a      	subs	r2, r3, #1
 800203a:	4193      	sbcs	r3, r2
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <_ZL11MX_ADC_Initv+0xb6>
  {
    Error_Handler();
 8002042:	f000 f98f 	bl	8002364 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	2201      	movs	r2, #1
 800204a:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800204c:	1d3a      	adds	r2, r7, #4
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <_ZL11MX_ADC_Initv+0xe0>)
 8002050:	0011      	movs	r1, r2
 8002052:	0018      	movs	r0, r3
 8002054:	f000 ff94 	bl	8002f80 <HAL_ADC_ConfigChannel>
 8002058:	0003      	movs	r3, r0
 800205a:	1e5a      	subs	r2, r3, #1
 800205c:	4193      	sbcs	r3, r2
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <_ZL11MX_ADC_Initv+0xd8>
  {
    Error_Handler();
 8002064:	f000 f97e 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002068:	46c0      	nop			; (mov r8, r8)
 800206a:	46bd      	mov	sp, r7
 800206c:	b004      	add	sp, #16
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000028 	.word	0x20000028
 8002074:	40012400 	.word	0x40012400

08002078 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800207c:	4b21      	ldr	r3, [pc, #132]	; (8002104 <_ZL12MX_I2C1_Initv+0x8c>)
 800207e:	4a22      	ldr	r2, [pc, #136]	; (8002108 <_ZL12MX_I2C1_Initv+0x90>)
 8002080:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8002082:	4b20      	ldr	r3, [pc, #128]	; (8002104 <_ZL12MX_I2C1_Initv+0x8c>)
 8002084:	4a21      	ldr	r2, [pc, #132]	; (800210c <_ZL12MX_I2C1_Initv+0x94>)
 8002086:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002088:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <_ZL12MX_I2C1_Initv+0x8c>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800208e:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <_ZL12MX_I2C1_Initv+0x8c>)
 8002090:	2201      	movs	r2, #1
 8002092:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002094:	4b1b      	ldr	r3, [pc, #108]	; (8002104 <_ZL12MX_I2C1_Initv+0x8c>)
 8002096:	2200      	movs	r2, #0
 8002098:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800209a:	4b1a      	ldr	r3, [pc, #104]	; (8002104 <_ZL12MX_I2C1_Initv+0x8c>)
 800209c:	2200      	movs	r2, #0
 800209e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020a0:	4b18      	ldr	r3, [pc, #96]	; (8002104 <_ZL12MX_I2C1_Initv+0x8c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020a6:	4b17      	ldr	r3, [pc, #92]	; (8002104 <_ZL12MX_I2C1_Initv+0x8c>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020ac:	4b15      	ldr	r3, [pc, #84]	; (8002104 <_ZL12MX_I2C1_Initv+0x8c>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020b2:	4b14      	ldr	r3, [pc, #80]	; (8002104 <_ZL12MX_I2C1_Initv+0x8c>)
 80020b4:	0018      	movs	r0, r3
 80020b6:	f001 fa9b 	bl	80035f0 <HAL_I2C_Init>
 80020ba:	0003      	movs	r3, r0
 80020bc:	1e5a      	subs	r2, r3, #1
 80020be:	4193      	sbcs	r3, r2
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <_ZL12MX_I2C1_Initv+0x52>
  {
    Error_Handler();
 80020c6:	f000 f94d 	bl	8002364 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020ca:	4b0e      	ldr	r3, [pc, #56]	; (8002104 <_ZL12MX_I2C1_Initv+0x8c>)
 80020cc:	2100      	movs	r1, #0
 80020ce:	0018      	movs	r0, r3
 80020d0:	f001 fb24 	bl	800371c <HAL_I2CEx_ConfigAnalogFilter>
 80020d4:	0003      	movs	r3, r0
 80020d6:	1e5a      	subs	r2, r3, #1
 80020d8:	4193      	sbcs	r3, r2
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <_ZL12MX_I2C1_Initv+0x6c>
  {
    Error_Handler();
 80020e0:	f000 f940 	bl	8002364 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80020e4:	4b07      	ldr	r3, [pc, #28]	; (8002104 <_ZL12MX_I2C1_Initv+0x8c>)
 80020e6:	2100      	movs	r1, #0
 80020e8:	0018      	movs	r0, r3
 80020ea:	f001 fb63 	bl	80037b4 <HAL_I2CEx_ConfigDigitalFilter>
 80020ee:	0003      	movs	r3, r0
 80020f0:	1e5a      	subs	r2, r3, #1
 80020f2:	4193      	sbcs	r3, r2
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <_ZL12MX_I2C1_Initv+0x86>
  {
    Error_Handler();
 80020fa:	f000 f933 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20000068 	.word	0x20000068
 8002108:	40005400 	.word	0x40005400
 800210c:	2000090e 	.word	0x2000090e

08002110 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002114:	4b1d      	ldr	r3, [pc, #116]	; (800218c <_ZL12MX_SPI1_Initv+0x7c>)
 8002116:	4a1e      	ldr	r2, [pc, #120]	; (8002190 <_ZL12MX_SPI1_Initv+0x80>)
 8002118:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800211a:	4b1c      	ldr	r3, [pc, #112]	; (800218c <_ZL12MX_SPI1_Initv+0x7c>)
 800211c:	2282      	movs	r2, #130	; 0x82
 800211e:	0052      	lsls	r2, r2, #1
 8002120:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002122:	4b1a      	ldr	r3, [pc, #104]	; (800218c <_ZL12MX_SPI1_Initv+0x7c>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002128:	4b18      	ldr	r3, [pc, #96]	; (800218c <_ZL12MX_SPI1_Initv+0x7c>)
 800212a:	22e0      	movs	r2, #224	; 0xe0
 800212c:	00d2      	lsls	r2, r2, #3
 800212e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002130:	4b16      	ldr	r3, [pc, #88]	; (800218c <_ZL12MX_SPI1_Initv+0x7c>)
 8002132:	2202      	movs	r2, #2
 8002134:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <_ZL12MX_SPI1_Initv+0x7c>)
 8002138:	2201      	movs	r2, #1
 800213a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800213c:	4b13      	ldr	r3, [pc, #76]	; (800218c <_ZL12MX_SPI1_Initv+0x7c>)
 800213e:	2280      	movs	r2, #128	; 0x80
 8002140:	0092      	lsls	r2, r2, #2
 8002142:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002144:	4b11      	ldr	r3, [pc, #68]	; (800218c <_ZL12MX_SPI1_Initv+0x7c>)
 8002146:	2238      	movs	r2, #56	; 0x38
 8002148:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800214a:	4b10      	ldr	r3, [pc, #64]	; (800218c <_ZL12MX_SPI1_Initv+0x7c>)
 800214c:	2200      	movs	r2, #0
 800214e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002150:	4b0e      	ldr	r3, [pc, #56]	; (800218c <_ZL12MX_SPI1_Initv+0x7c>)
 8002152:	2200      	movs	r2, #0
 8002154:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002156:	4b0d      	ldr	r3, [pc, #52]	; (800218c <_ZL12MX_SPI1_Initv+0x7c>)
 8002158:	2200      	movs	r2, #0
 800215a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <_ZL12MX_SPI1_Initv+0x7c>)
 800215e:	2207      	movs	r2, #7
 8002160:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002162:	4b0a      	ldr	r3, [pc, #40]	; (800218c <_ZL12MX_SPI1_Initv+0x7c>)
 8002164:	2200      	movs	r2, #0
 8002166:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002168:	4b08      	ldr	r3, [pc, #32]	; (800218c <_ZL12MX_SPI1_Initv+0x7c>)
 800216a:	2200      	movs	r2, #0
 800216c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800216e:	4b07      	ldr	r3, [pc, #28]	; (800218c <_ZL12MX_SPI1_Initv+0x7c>)
 8002170:	0018      	movs	r0, r3
 8002172:	f002 f8a7 	bl	80042c4 <HAL_SPI_Init>
 8002176:	0003      	movs	r3, r0
 8002178:	1e5a      	subs	r2, r3, #1
 800217a:	4193      	sbcs	r3, r2
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <_ZL12MX_SPI1_Initv+0x76>
  {
    Error_Handler();
 8002182:	f000 f8ef 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	200000b4 	.word	0x200000b4
 8002190:	40013000 	.word	0x40013000

08002194 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002198:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <_ZL19MX_USART1_UART_Initv+0x60>)
 800219a:	4a17      	ldr	r2, [pc, #92]	; (80021f8 <_ZL19MX_USART1_UART_Initv+0x64>)
 800219c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 800219e:	4b15      	ldr	r3, [pc, #84]	; (80021f4 <_ZL19MX_USART1_UART_Initv+0x60>)
 80021a0:	2296      	movs	r2, #150	; 0x96
 80021a2:	0212      	lsls	r2, r2, #8
 80021a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021a6:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <_ZL19MX_USART1_UART_Initv+0x60>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <_ZL19MX_USART1_UART_Initv+0x60>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021b2:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <_ZL19MX_USART1_UART_Initv+0x60>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021b8:	4b0e      	ldr	r3, [pc, #56]	; (80021f4 <_ZL19MX_USART1_UART_Initv+0x60>)
 80021ba:	220c      	movs	r2, #12
 80021bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021be:	4b0d      	ldr	r3, [pc, #52]	; (80021f4 <_ZL19MX_USART1_UART_Initv+0x60>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021c4:	4b0b      	ldr	r3, [pc, #44]	; (80021f4 <_ZL19MX_USART1_UART_Initv+0x60>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ca:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <_ZL19MX_USART1_UART_Initv+0x60>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021d0:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <_ZL19MX_USART1_UART_Initv+0x60>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021d6:	4b07      	ldr	r3, [pc, #28]	; (80021f4 <_ZL19MX_USART1_UART_Initv+0x60>)
 80021d8:	0018      	movs	r0, r3
 80021da:	f002 ff95 	bl	8005108 <HAL_UART_Init>
 80021de:	0003      	movs	r3, r0
 80021e0:	1e5a      	subs	r2, r3, #1
 80021e2:	4193      	sbcs	r3, r2
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d001      	beq.n	80021ee <_ZL19MX_USART1_UART_Initv+0x5a>
  {
    Error_Handler();
 80021ea:	f000 f8bb 	bl	8002364 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021ee:	46c0      	nop			; (mov r8, r8)
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000118 	.word	0x20000118
 80021f8:	40013800 	.word	0x40013800

080021fc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b08b      	sub	sp, #44	; 0x2c
 8002200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002202:	2414      	movs	r4, #20
 8002204:	193b      	adds	r3, r7, r4
 8002206:	0018      	movs	r0, r3
 8002208:	2314      	movs	r3, #20
 800220a:	001a      	movs	r2, r3
 800220c:	2100      	movs	r1, #0
 800220e:	f003 fcd1 	bl	8005bb4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002212:	4b4f      	ldr	r3, [pc, #316]	; (8002350 <_ZL12MX_GPIO_Initv+0x154>)
 8002214:	695a      	ldr	r2, [r3, #20]
 8002216:	4b4e      	ldr	r3, [pc, #312]	; (8002350 <_ZL12MX_GPIO_Initv+0x154>)
 8002218:	2180      	movs	r1, #128	; 0x80
 800221a:	0309      	lsls	r1, r1, #12
 800221c:	430a      	orrs	r2, r1
 800221e:	615a      	str	r2, [r3, #20]
 8002220:	4b4b      	ldr	r3, [pc, #300]	; (8002350 <_ZL12MX_GPIO_Initv+0x154>)
 8002222:	695a      	ldr	r2, [r3, #20]
 8002224:	2380      	movs	r3, #128	; 0x80
 8002226:	031b      	lsls	r3, r3, #12
 8002228:	4013      	ands	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800222e:	4b48      	ldr	r3, [pc, #288]	; (8002350 <_ZL12MX_GPIO_Initv+0x154>)
 8002230:	695a      	ldr	r2, [r3, #20]
 8002232:	4b47      	ldr	r3, [pc, #284]	; (8002350 <_ZL12MX_GPIO_Initv+0x154>)
 8002234:	2180      	movs	r1, #128	; 0x80
 8002236:	03c9      	lsls	r1, r1, #15
 8002238:	430a      	orrs	r2, r1
 800223a:	615a      	str	r2, [r3, #20]
 800223c:	4b44      	ldr	r3, [pc, #272]	; (8002350 <_ZL12MX_GPIO_Initv+0x154>)
 800223e:	695a      	ldr	r2, [r3, #20]
 8002240:	2380      	movs	r3, #128	; 0x80
 8002242:	03db      	lsls	r3, r3, #15
 8002244:	4013      	ands	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800224a:	4b41      	ldr	r3, [pc, #260]	; (8002350 <_ZL12MX_GPIO_Initv+0x154>)
 800224c:	695a      	ldr	r2, [r3, #20]
 800224e:	4b40      	ldr	r3, [pc, #256]	; (8002350 <_ZL12MX_GPIO_Initv+0x154>)
 8002250:	2180      	movs	r1, #128	; 0x80
 8002252:	0289      	lsls	r1, r1, #10
 8002254:	430a      	orrs	r2, r1
 8002256:	615a      	str	r2, [r3, #20]
 8002258:	4b3d      	ldr	r3, [pc, #244]	; (8002350 <_ZL12MX_GPIO_Initv+0x154>)
 800225a:	695a      	ldr	r2, [r3, #20]
 800225c:	2380      	movs	r3, #128	; 0x80
 800225e:	029b      	lsls	r3, r3, #10
 8002260:	4013      	ands	r3, r2
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002266:	4b3a      	ldr	r3, [pc, #232]	; (8002350 <_ZL12MX_GPIO_Initv+0x154>)
 8002268:	695a      	ldr	r2, [r3, #20]
 800226a:	4b39      	ldr	r3, [pc, #228]	; (8002350 <_ZL12MX_GPIO_Initv+0x154>)
 800226c:	2180      	movs	r1, #128	; 0x80
 800226e:	02c9      	lsls	r1, r1, #11
 8002270:	430a      	orrs	r2, r1
 8002272:	615a      	str	r2, [r3, #20]
 8002274:	4b36      	ldr	r3, [pc, #216]	; (8002350 <_ZL12MX_GPIO_Initv+0x154>)
 8002276:	695a      	ldr	r2, [r3, #20]
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	02db      	lsls	r3, r3, #11
 800227c:	4013      	ands	r3, r2
 800227e:	607b      	str	r3, [r7, #4]
 8002280:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002282:	23e0      	movs	r3, #224	; 0xe0
 8002284:	021b      	lsls	r3, r3, #8
 8002286:	4833      	ldr	r0, [pc, #204]	; (8002354 <_ZL12MX_GPIO_Initv+0x158>)
 8002288:	2200      	movs	r2, #0
 800228a:	0019      	movs	r1, r3
 800228c:	f001 f992 	bl	80035b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 8002290:	4931      	ldr	r1, [pc, #196]	; (8002358 <_ZL12MX_GPIO_Initv+0x15c>)
 8002292:	2390      	movs	r3, #144	; 0x90
 8002294:	05db      	lsls	r3, r3, #23
 8002296:	2200      	movs	r2, #0
 8002298:	0018      	movs	r0, r3
 800229a:	f001 f98b 	bl	80035b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800229e:	492f      	ldr	r1, [pc, #188]	; (800235c <_ZL12MX_GPIO_Initv+0x160>)
 80022a0:	4b2f      	ldr	r3, [pc, #188]	; (8002360 <_ZL12MX_GPIO_Initv+0x164>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	0018      	movs	r0, r3
 80022a6:	f001 f985 	bl	80035b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80022aa:	193b      	adds	r3, r7, r4
 80022ac:	22e0      	movs	r2, #224	; 0xe0
 80022ae:	0212      	lsls	r2, r2, #8
 80022b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022b2:	193b      	adds	r3, r7, r4
 80022b4:	2201      	movs	r2, #1
 80022b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022b8:	193b      	adds	r3, r7, r4
 80022ba:	2202      	movs	r2, #2
 80022bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	193b      	adds	r3, r7, r4
 80022c0:	2200      	movs	r2, #0
 80022c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c4:	193b      	adds	r3, r7, r4
 80022c6:	4a23      	ldr	r2, [pc, #140]	; (8002354 <_ZL12MX_GPIO_Initv+0x158>)
 80022c8:	0019      	movs	r1, r3
 80022ca:	0010      	movs	r0, r2
 80022cc:	f001 f802 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80022d0:	193b      	adds	r3, r7, r4
 80022d2:	2210      	movs	r2, #16
 80022d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d6:	193b      	adds	r3, r7, r4
 80022d8:	2201      	movs	r2, #1
 80022da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	193b      	adds	r3, r7, r4
 80022de:	2200      	movs	r2, #0
 80022e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e2:	193b      	adds	r3, r7, r4
 80022e4:	2200      	movs	r2, #0
 80022e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e8:	193a      	adds	r2, r7, r4
 80022ea:	2390      	movs	r3, #144	; 0x90
 80022ec:	05db      	lsls	r3, r3, #23
 80022ee:	0011      	movs	r1, r2
 80022f0:	0018      	movs	r0, r3
 80022f2:	f000 ffef 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 80022f6:	0021      	movs	r1, r4
 80022f8:	187b      	adds	r3, r7, r1
 80022fa:	4a18      	ldr	r2, [pc, #96]	; (800235c <_ZL12MX_GPIO_Initv+0x160>)
 80022fc:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022fe:	187b      	adds	r3, r7, r1
 8002300:	2201      	movs	r2, #1
 8002302:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002304:	187b      	adds	r3, r7, r1
 8002306:	2202      	movs	r2, #2
 8002308:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	187b      	adds	r3, r7, r1
 800230c:	2200      	movs	r2, #0
 800230e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002310:	000c      	movs	r4, r1
 8002312:	187b      	adds	r3, r7, r1
 8002314:	4a12      	ldr	r2, [pc, #72]	; (8002360 <_ZL12MX_GPIO_Initv+0x164>)
 8002316:	0019      	movs	r1, r3
 8002318:	0010      	movs	r0, r2
 800231a:	f000 ffdb 	bl	80032d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 800231e:	0021      	movs	r1, r4
 8002320:	187b      	adds	r3, r7, r1
 8002322:	2298      	movs	r2, #152	; 0x98
 8002324:	0212      	lsls	r2, r2, #8
 8002326:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002328:	187b      	adds	r3, r7, r1
 800232a:	2201      	movs	r2, #1
 800232c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800232e:	187b      	adds	r3, r7, r1
 8002330:	2202      	movs	r2, #2
 8002332:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002334:	187b      	adds	r3, r7, r1
 8002336:	2200      	movs	r2, #0
 8002338:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800233a:	187a      	adds	r2, r7, r1
 800233c:	2390      	movs	r3, #144	; 0x90
 800233e:	05db      	lsls	r3, r3, #23
 8002340:	0011      	movs	r1, r2
 8002342:	0018      	movs	r0, r3
 8002344:	f000 ffc6 	bl	80032d4 <HAL_GPIO_Init>

}
 8002348:	46c0      	nop			; (mov r8, r8)
 800234a:	46bd      	mov	sp, r7
 800234c:	b00b      	add	sp, #44	; 0x2c
 800234e:	bd90      	pop	{r4, r7, pc}
 8002350:	40021000 	.word	0x40021000
 8002354:	48000800 	.word	0x48000800
 8002358:	00009810 	.word	0x00009810
 800235c:	0000ff3f 	.word	0x0000ff3f
 8002360:	48000400 	.word	0x48000400

08002364 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002368:	46c0      	nop			; (mov r8, r8)
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <_ZN3pinC1EP12GPIO_TypeDeft>:
#include "stm32f0xx_hal.h"

class pin
{
public:
	pin(GPIO_TypeDef* port, uint16_t pinNum) : m_port(port), m_pinNum(pinNum){
 800236e:	b580      	push	{r7, lr}
 8002370:	b084      	sub	sp, #16
 8002372:	af00      	add	r7, sp, #0
 8002374:	60f8      	str	r0, [r7, #12]
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	1dbb      	adds	r3, r7, #6
 800237a:	801a      	strh	r2, [r3, #0]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1dba      	adds	r2, r7, #6
 8002386:	8812      	ldrh	r2, [r2, #0]
 8002388:	809a      	strh	r2, [r3, #4]
		//Initialize Everything of being off
		setLow();
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	0018      	movs	r0, r3
 800238e:	f000 f805 	bl	800239c <_ZN3pin6setLowEv>
	};
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	0018      	movs	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	b004      	add	sp, #16
 800239a:	bd80      	pop	{r7, pc}

0800239c <_ZN3pin6setLowEv>:
	const void toggle(){ HAL_GPIO_TogglePin(m_port, m_pinNum); }
	const void setLow(){ HAL_GPIO_WritePin(m_port, m_pinNum, GPIO_PIN_RESET); }
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6818      	ldr	r0, [r3, #0]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	889b      	ldrh	r3, [r3, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	0019      	movs	r1, r3
 80023b0:	f001 f900 	bl	80035b4 <HAL_GPIO_WritePin>
 80023b4:	46c0      	nop			; (mov r8, r8)
 80023b6:	46bd      	mov	sp, r7
 80023b8:	b002      	add	sp, #8
 80023ba:	bd80      	pop	{r7, pc}

080023bc <_ZN3pin7setHighEv>:
	const void setHigh(){ HAL_GPIO_WritePin(m_port, m_pinNum, GPIO_PIN_SET); }
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	889b      	ldrh	r3, [r3, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	0019      	movs	r1, r3
 80023d0:	f001 f8f0 	bl	80035b4 <HAL_GPIO_WritePin>
 80023d4:	46c0      	nop			; (mov r8, r8)
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b002      	add	sp, #8
 80023da:	bd80      	pop	{r7, pc}

080023dc <_ZN6LIS3DHC1E3pin>:

#include <array>

class LIS3DH{
public:
	LIS3DH(pin CS_PIN) : m_CS_PIN(CS_PIN) {
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	6019      	str	r1, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	1d3a      	adds	r2, r7, #4
 80023ee:	ca03      	ldmia	r2!, {r0, r1}
 80023f0:	c303      	stmia	r3!, {r0, r1}
		m_CS_PIN.setHigh();
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	0018      	movs	r0, r3
 80023f6:	f7ff ffe1 	bl	80023bc <_ZN3pin7setHighEv>
		write({0x20, 0x77}); // write some stuff, cant remember. Need to look at datasheet.
 80023fa:	2110      	movs	r1, #16
 80023fc:	187b      	adds	r3, r7, r1
 80023fe:	4a0c      	ldr	r2, [pc, #48]	; (8002430 <_ZN6LIS3DHC1E3pin+0x54>)
 8002400:	8812      	ldrh	r2, [r2, #0]
 8002402:	801a      	strh	r2, [r3, #0]
 8002404:	187b      	adds	r3, r7, r1
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	6819      	ldr	r1, [r3, #0]
 800240a:	0010      	movs	r0, r2
 800240c:	f000 f88a 	bl	8002524 <_ZN6LIS3DH5writeESt5arrayIhLj2EE>
		write({0x23, 0x08});
 8002410:	2114      	movs	r1, #20
 8002412:	187b      	adds	r3, r7, r1
 8002414:	4a07      	ldr	r2, [pc, #28]	; (8002434 <_ZN6LIS3DHC1E3pin+0x58>)
 8002416:	8812      	ldrh	r2, [r2, #0]
 8002418:	801a      	strh	r2, [r3, #0]
 800241a:	187b      	adds	r3, r7, r1
 800241c:	68fa      	ldr	r2, [r7, #12]
 800241e:	6819      	ldr	r1, [r3, #0]
 8002420:	0010      	movs	r0, r2
 8002422:	f000 f87f 	bl	8002524 <_ZN6LIS3DH5writeESt5arrayIhLj2EE>
	};
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	0018      	movs	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	b006      	add	sp, #24
 800242e:	bd80      	pop	{r7, pc}
 8002430:	08005bdc 	.word	0x08005bdc
 8002434:	08005be0 	.word	0x08005be0

08002438 <_ZN6LIS3DH4getXEv>:

	int8_t getX(){
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
		return (int8_t)read(0x29);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2129      	movs	r1, #41	; 0x29
 8002444:	0018      	movs	r0, r3
 8002446:	f000 f825 	bl	8002494 <_ZN6LIS3DH4readEh>
 800244a:	0003      	movs	r3, r0
 800244c:	b25b      	sxtb	r3, r3
	}
 800244e:	0018      	movs	r0, r3
 8002450:	46bd      	mov	sp, r7
 8002452:	b002      	add	sp, #8
 8002454:	bd80      	pop	{r7, pc}

08002456 <_ZN6LIS3DH4getYEv>:

	int8_t getY(){
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
		return (int8_t)read(0x2B);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	212b      	movs	r1, #43	; 0x2b
 8002462:	0018      	movs	r0, r3
 8002464:	f000 f816 	bl	8002494 <_ZN6LIS3DH4readEh>
 8002468:	0003      	movs	r3, r0
 800246a:	b25b      	sxtb	r3, r3
	}
 800246c:	0018      	movs	r0, r3
 800246e:	46bd      	mov	sp, r7
 8002470:	b002      	add	sp, #8
 8002472:	bd80      	pop	{r7, pc}

08002474 <_ZN6LIS3DH4getZEv>:

	int8_t getZ(){
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
		return (int8_t)read(0x2D);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	212d      	movs	r1, #45	; 0x2d
 8002480:	0018      	movs	r0, r3
 8002482:	f000 f807 	bl	8002494 <_ZN6LIS3DH4readEh>
 8002486:	0003      	movs	r3, r0
 8002488:	b25b      	sxtb	r3, r3
	}
 800248a:	0018      	movs	r0, r3
 800248c:	46bd      	mov	sp, r7
 800248e:	b002      	add	sp, #8
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <_ZN6LIS3DH4readEh>:

	uint8_t read(uint8_t txBuff){
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	000a      	movs	r2, r1
 800249e:	1cfb      	adds	r3, r7, #3
 80024a0:	701a      	strb	r2, [r3, #0]

		uint8_t rxBuff;

		txBuff = txBuff | 0x80;
 80024a2:	1cfb      	adds	r3, r7, #3
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2280      	movs	r2, #128	; 0x80
 80024a8:	4252      	negs	r2, r2
 80024aa:	4313      	orrs	r3, r2
 80024ac:	b2da      	uxtb	r2, r3
 80024ae:	1cfb      	adds	r3, r7, #3
 80024b0:	701a      	strb	r2, [r3, #0]

		m_CS_PIN.setLow();
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	0018      	movs	r0, r3
 80024b6:	f7ff ff71 	bl	800239c <_ZN3pin6setLowEv>
		HAL_Delay(1);
 80024ba:	2001      	movs	r0, #1
 80024bc:	f000 fbfe 	bl	8002cbc <HAL_Delay>
		HAL_SPI_Transmit(&hspi1, &txBuff, 1, 1000);
 80024c0:	23fa      	movs	r3, #250	; 0xfa
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	1cf9      	adds	r1, r7, #3
 80024c6:	4811      	ldr	r0, [pc, #68]	; (800250c <_ZN6LIS3DH4readEh+0x78>)
 80024c8:	2201      	movs	r2, #1
 80024ca:	f001 ff95 	bl	80043f8 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &rxBuff, 1, 1000);
 80024ce:	23fa      	movs	r3, #250	; 0xfa
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	220f      	movs	r2, #15
 80024d4:	18b9      	adds	r1, r7, r2
 80024d6:	480d      	ldr	r0, [pc, #52]	; (800250c <_ZN6LIS3DH4readEh+0x78>)
 80024d8:	2201      	movs	r2, #1
 80024da:	f002 f90f 	bl	80046fc <HAL_SPI_Receive>
		while( (&hspi1)->State == HAL_SPI_STATE_BUSY );
 80024de:	4b0b      	ldr	r3, [pc, #44]	; (800250c <_ZN6LIS3DH4readEh+0x78>)
 80024e0:	225d      	movs	r2, #93	; 0x5d
 80024e2:	5c9b      	ldrb	r3, [r3, r2]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	3b02      	subs	r3, #2
 80024e8:	425a      	negs	r2, r3
 80024ea:	4153      	adcs	r3, r2
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d000      	beq.n	80024f4 <_ZN6LIS3DH4readEh+0x60>
 80024f2:	e7f4      	b.n	80024de <_ZN6LIS3DH4readEh+0x4a>
		m_CS_PIN.setHigh();
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	0018      	movs	r0, r3
 80024f8:	f7ff ff60 	bl	80023bc <_ZN3pin7setHighEv>

		return rxBuff;
 80024fc:	230f      	movs	r3, #15
 80024fe:	18fb      	adds	r3, r7, r3
 8002500:	781b      	ldrb	r3, [r3, #0]
	}
 8002502:	0018      	movs	r0, r3
 8002504:	46bd      	mov	sp, r7
 8002506:	b004      	add	sp, #16
 8002508:	bd80      	pop	{r7, pc}
 800250a:	46c0      	nop			; (mov r8, r8)
 800250c:	200000b4 	.word	0x200000b4

08002510 <_ZNKSt5arrayIhLj2EE4sizeEv>:
      crend() const noexcept
      { return const_reverse_iterator(begin()); }

      // Capacity.
      constexpr size_type
      size() const noexcept { return _Nm; }
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	2302      	movs	r3, #2
 800251a:	0018      	movs	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	b002      	add	sp, #8
 8002520:	bd80      	pop	{r7, pc}
	...

08002524 <_ZN6LIS3DH5writeESt5arrayIhLj2EE>:

	void write(std::array<uint8_t, 2> txBuff){
 8002524:	b590      	push	{r4, r7, lr}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	003b      	movs	r3, r7
 800252e:	8019      	strh	r1, [r3, #0]

		m_CS_PIN.setLow();
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	0018      	movs	r0, r3
 8002534:	f7ff ff32 	bl	800239c <_ZN3pin6setLowEv>
		HAL_Delay(1);
 8002538:	2001      	movs	r0, #1
 800253a:	f000 fbbf 	bl	8002cbc <HAL_Delay>
		HAL_SPI_Transmit(&hspi1, txBuff.data(), txBuff.size(), 1000);
 800253e:	003b      	movs	r3, r7
 8002540:	0018      	movs	r0, r3
 8002542:	f000 f9a7 	bl	8002894 <_ZNSt5arrayIhLj2EE4dataEv>
 8002546:	0004      	movs	r4, r0
 8002548:	003b      	movs	r3, r7
 800254a:	0018      	movs	r0, r3
 800254c:	f7ff ffe0 	bl	8002510 <_ZNKSt5arrayIhLj2EE4sizeEv>
 8002550:	0003      	movs	r3, r0
 8002552:	b29a      	uxth	r2, r3
 8002554:	23fa      	movs	r3, #250	; 0xfa
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	480b      	ldr	r0, [pc, #44]	; (8002588 <_ZN6LIS3DH5writeESt5arrayIhLj2EE+0x64>)
 800255a:	0021      	movs	r1, r4
 800255c:	f001 ff4c 	bl	80043f8 <HAL_SPI_Transmit>
		while( (&hspi1)->State == HAL_SPI_STATE_BUSY );
 8002560:	4b09      	ldr	r3, [pc, #36]	; (8002588 <_ZN6LIS3DH5writeESt5arrayIhLj2EE+0x64>)
 8002562:	225d      	movs	r2, #93	; 0x5d
 8002564:	5c9b      	ldrb	r3, [r3, r2]
 8002566:	b2db      	uxtb	r3, r3
 8002568:	3b02      	subs	r3, #2
 800256a:	425a      	negs	r2, r3
 800256c:	4153      	adcs	r3, r2
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d000      	beq.n	8002576 <_ZN6LIS3DH5writeESt5arrayIhLj2EE+0x52>
 8002574:	e7f4      	b.n	8002560 <_ZN6LIS3DH5writeESt5arrayIhLj2EE+0x3c>
		m_CS_PIN.setHigh();
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	0018      	movs	r0, r3
 800257a:	f7ff ff1f 	bl	80023bc <_ZN3pin7setHighEv>

	}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	46bd      	mov	sp, r7
 8002582:	b003      	add	sp, #12
 8002584:	bd90      	pop	{r4, r7, pc}
 8002586:	46c0      	nop			; (mov r8, r8)
 8002588:	200000b4 	.word	0x200000b4

0800258c <_ZSt5atan2ff>:
  using ::atan2;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  atan2(float __y, float __x)
  { return __builtin_atan2f(__y, __x); }
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
 8002596:	683a      	ldr	r2, [r7, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	1c11      	adds	r1, r2, #0
 800259c:	1c18      	adds	r0, r3, #0
 800259e:	f003 f943 	bl	8005828 <atan2f>
 80025a2:	1c03      	adds	r3, r0, #0
 80025a4:	1c18      	adds	r0, r3, #0
 80025a6:	46bd      	mov	sp, r7
 80025a8:	b002      	add	sp, #8
 80025aa:	bd80      	pop	{r7, pc}

080025ac <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	1c18      	adds	r0, r3, #0
 80025b8:	f003 f8f8 	bl	80057ac <floorf>
 80025bc:	1c03      	adds	r3, r0, #0
 80025be:	1c18      	adds	r0, r3, #0
 80025c0:	46bd      	mov	sp, r7
 80025c2:	b002      	add	sp, #8
 80025c4:	bd80      	pop	{r7, pc}
	...

080025c8 <_Z14calculateAngleaa>:
#include <LIS3DH.h>
#include <math.h>

#define PI 3.14159265

constexpr float calculateAngle(int8_t x, int8_t y){
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	b085      	sub	sp, #20
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	0002      	movs	r2, r0
 80025d0:	1dfb      	adds	r3, r7, #7
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	1dbb      	adds	r3, r7, #6
 80025d6:	1c0a      	adds	r2, r1, #0
 80025d8:	701a      	strb	r2, [r3, #0]
	float fy = -1*(float)y;
 80025da:	1dbb      	adds	r3, r7, #6
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	b25b      	sxtb	r3, r3
 80025e0:	0018      	movs	r0, r3
 80025e2:	f7fe fcf7 	bl	8000fd4 <__aeabi_i2f>
 80025e6:	1c02      	adds	r2, r0, #0
 80025e8:	2380      	movs	r3, #128	; 0x80
 80025ea:	061b      	lsls	r3, r3, #24
 80025ec:	4053      	eors	r3, r2
 80025ee:	60fb      	str	r3, [r7, #12]
	float fx = (float)x;
 80025f0:	1dfb      	adds	r3, r7, #7
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	b25b      	sxtb	r3, r3
 80025f6:	0018      	movs	r0, r3
 80025f8:	f7fe fcec 	bl	8000fd4 <__aeabi_i2f>
 80025fc:	1c03      	adds	r3, r0, #0
 80025fe:	60bb      	str	r3, [r7, #8]
	return std::atan2(fy,fx)*180/PI+180;
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	1c11      	adds	r1, r2, #0
 8002606:	1c18      	adds	r0, r3, #0
 8002608:	f7ff ffc0 	bl	800258c <_ZSt5atan2ff>
 800260c:	1c03      	adds	r3, r0, #0
 800260e:	490f      	ldr	r1, [pc, #60]	; (800264c <_Z14calculateAngleaa+0x84>)
 8002610:	1c18      	adds	r0, r3, #0
 8002612:	f7fe f9c9 	bl	80009a8 <__aeabi_fmul>
 8002616:	1c03      	adds	r3, r0, #0
 8002618:	1c18      	adds	r0, r3, #0
 800261a:	f7ff fb43 	bl	8001ca4 <__aeabi_f2d>
 800261e:	4a0c      	ldr	r2, [pc, #48]	; (8002650 <_Z14calculateAngleaa+0x88>)
 8002620:	4b0c      	ldr	r3, [pc, #48]	; (8002654 <_Z14calculateAngleaa+0x8c>)
 8002622:	f7ff f83d 	bl	80016a0 <__aeabi_ddiv>
 8002626:	0003      	movs	r3, r0
 8002628:	000c      	movs	r4, r1
 800262a:	0018      	movs	r0, r3
 800262c:	0021      	movs	r1, r4
 800262e:	2200      	movs	r2, #0
 8002630:	4b09      	ldr	r3, [pc, #36]	; (8002658 <_Z14calculateAngleaa+0x90>)
 8002632:	f7fe fd19 	bl	8001068 <__aeabi_dadd>
 8002636:	0003      	movs	r3, r0
 8002638:	000c      	movs	r4, r1
 800263a:	0018      	movs	r0, r3
 800263c:	0021      	movs	r1, r4
 800263e:	f7ff fb83 	bl	8001d48 <__aeabi_d2f>
 8002642:	1c03      	adds	r3, r0, #0
}
 8002644:	1c18      	adds	r0, r3, #0
 8002646:	46bd      	mov	sp, r7
 8002648:	b005      	add	sp, #20
 800264a:	bd90      	pop	{r4, r7, pc}
 800264c:	43340000 	.word	0x43340000
 8002650:	53c8d4f1 	.word	0x53c8d4f1
 8002654:	400921fb 	.word	0x400921fb
 8002658:	40668000 	.word	0x40668000

0800265c <_Z3runv>:

void run(){
 800265c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800265e:	b0b1      	sub	sp, #196	; 0xc4
 8002660:	af00      	add	r7, sp, #0
				pin(GPIOB, GPIO_PIN_8),
				pin(GPIOB, GPIO_PIN_5),
				pin(GPIOB, GPIO_PIN_4),
				pin(GPIOB, GPIO_PIN_3),
				pin(GPIOA, GPIO_PIN_15),
				pin(GPIOA, GPIO_PIN_12)};
 8002662:	230c      	movs	r3, #12
 8002664:	18fc      	adds	r4, r7, r3
 8002666:	2380      	movs	r3, #128	; 0x80
 8002668:	011a      	lsls	r2, r3, #4
 800266a:	2390      	movs	r3, #144	; 0x90
 800266c:	05db      	lsls	r3, r3, #23
 800266e:	0019      	movs	r1, r3
 8002670:	0020      	movs	r0, r4
 8002672:	f7ff fe7c 	bl	800236e <_ZN3pinC1EP12GPIO_TypeDeft>
 8002676:	3408      	adds	r4, #8
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	021b      	lsls	r3, r3, #8
 800267c:	4981      	ldr	r1, [pc, #516]	; (8002884 <_Z3runv+0x228>)
 800267e:	001a      	movs	r2, r3
 8002680:	0020      	movs	r0, r4
 8002682:	f7ff fe74 	bl	800236e <_ZN3pinC1EP12GPIO_TypeDeft>
 8002686:	3408      	adds	r4, #8
 8002688:	2380      	movs	r3, #128	; 0x80
 800268a:	01db      	lsls	r3, r3, #7
 800268c:	497d      	ldr	r1, [pc, #500]	; (8002884 <_Z3runv+0x228>)
 800268e:	001a      	movs	r2, r3
 8002690:	0020      	movs	r0, r4
 8002692:	f7ff fe6c 	bl	800236e <_ZN3pinC1EP12GPIO_TypeDeft>
 8002696:	3408      	adds	r4, #8
 8002698:	2380      	movs	r3, #128	; 0x80
 800269a:	019b      	lsls	r3, r3, #6
 800269c:	4979      	ldr	r1, [pc, #484]	; (8002884 <_Z3runv+0x228>)
 800269e:	001a      	movs	r2, r3
 80026a0:	0020      	movs	r0, r4
 80026a2:	f7ff fe64 	bl	800236e <_ZN3pinC1EP12GPIO_TypeDeft>
 80026a6:	3408      	adds	r4, #8
 80026a8:	2380      	movs	r3, #128	; 0x80
 80026aa:	015b      	lsls	r3, r3, #5
 80026ac:	4975      	ldr	r1, [pc, #468]	; (8002884 <_Z3runv+0x228>)
 80026ae:	001a      	movs	r2, r3
 80026b0:	0020      	movs	r0, r4
 80026b2:	f7ff fe5c 	bl	800236e <_ZN3pinC1EP12GPIO_TypeDeft>
 80026b6:	3408      	adds	r4, #8
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	4971      	ldr	r1, [pc, #452]	; (8002884 <_Z3runv+0x228>)
 80026be:	001a      	movs	r2, r3
 80026c0:	0020      	movs	r0, r4
 80026c2:	f7ff fe54 	bl	800236e <_ZN3pinC1EP12GPIO_TypeDeft>
 80026c6:	3408      	adds	r4, #8
 80026c8:	2380      	movs	r3, #128	; 0x80
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	496d      	ldr	r1, [pc, #436]	; (8002884 <_Z3runv+0x228>)
 80026ce:	001a      	movs	r2, r3
 80026d0:	0020      	movs	r0, r4
 80026d2:	f7ff fe4c 	bl	800236e <_ZN3pinC1EP12GPIO_TypeDeft>
 80026d6:	3408      	adds	r4, #8
 80026d8:	4b6a      	ldr	r3, [pc, #424]	; (8002884 <_Z3runv+0x228>)
 80026da:	2204      	movs	r2, #4
 80026dc:	0019      	movs	r1, r3
 80026de:	0020      	movs	r0, r4
 80026e0:	f7ff fe45 	bl	800236e <_ZN3pinC1EP12GPIO_TypeDeft>
 80026e4:	3408      	adds	r4, #8
 80026e6:	4b67      	ldr	r3, [pc, #412]	; (8002884 <_Z3runv+0x228>)
 80026e8:	2202      	movs	r2, #2
 80026ea:	0019      	movs	r1, r3
 80026ec:	0020      	movs	r0, r4
 80026ee:	f7ff fe3e 	bl	800236e <_ZN3pinC1EP12GPIO_TypeDeft>
 80026f2:	3408      	adds	r4, #8
 80026f4:	4b63      	ldr	r3, [pc, #396]	; (8002884 <_Z3runv+0x228>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	0019      	movs	r1, r3
 80026fa:	0020      	movs	r0, r4
 80026fc:	f7ff fe37 	bl	800236e <_ZN3pinC1EP12GPIO_TypeDeft>
 8002700:	3408      	adds	r4, #8
 8002702:	2380      	movs	r3, #128	; 0x80
 8002704:	021b      	lsls	r3, r3, #8
 8002706:	4960      	ldr	r1, [pc, #384]	; (8002888 <_Z3runv+0x22c>)
 8002708:	001a      	movs	r2, r3
 800270a:	0020      	movs	r0, r4
 800270c:	f7ff fe2f 	bl	800236e <_ZN3pinC1EP12GPIO_TypeDeft>
 8002710:	3408      	adds	r4, #8
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	01db      	lsls	r3, r3, #7
 8002716:	495c      	ldr	r1, [pc, #368]	; (8002888 <_Z3runv+0x22c>)
 8002718:	001a      	movs	r2, r3
 800271a:	0020      	movs	r0, r4
 800271c:	f7ff fe27 	bl	800236e <_ZN3pinC1EP12GPIO_TypeDeft>
 8002720:	3408      	adds	r4, #8
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	019b      	lsls	r3, r3, #6
 8002726:	4958      	ldr	r1, [pc, #352]	; (8002888 <_Z3runv+0x22c>)
 8002728:	001a      	movs	r2, r3
 800272a:	0020      	movs	r0, r4
 800272c:	f7ff fe1f 	bl	800236e <_ZN3pinC1EP12GPIO_TypeDeft>
 8002730:	3408      	adds	r4, #8
 8002732:	2380      	movs	r3, #128	; 0x80
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	4953      	ldr	r1, [pc, #332]	; (8002884 <_Z3runv+0x228>)
 8002738:	001a      	movs	r2, r3
 800273a:	0020      	movs	r0, r4
 800273c:	f7ff fe17 	bl	800236e <_ZN3pinC1EP12GPIO_TypeDeft>
 8002740:	3408      	adds	r4, #8
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	494f      	ldr	r1, [pc, #316]	; (8002884 <_Z3runv+0x228>)
 8002748:	001a      	movs	r2, r3
 800274a:	0020      	movs	r0, r4
 800274c:	f7ff fe0f 	bl	800236e <_ZN3pinC1EP12GPIO_TypeDeft>
 8002750:	3408      	adds	r4, #8
 8002752:	4b4c      	ldr	r3, [pc, #304]	; (8002884 <_Z3runv+0x228>)
 8002754:	2220      	movs	r2, #32
 8002756:	0019      	movs	r1, r3
 8002758:	0020      	movs	r0, r4
 800275a:	f7ff fe08 	bl	800236e <_ZN3pinC1EP12GPIO_TypeDeft>
 800275e:	3408      	adds	r4, #8
 8002760:	4b48      	ldr	r3, [pc, #288]	; (8002884 <_Z3runv+0x228>)
 8002762:	2210      	movs	r2, #16
 8002764:	0019      	movs	r1, r3
 8002766:	0020      	movs	r0, r4
 8002768:	f7ff fe01 	bl	800236e <_ZN3pinC1EP12GPIO_TypeDeft>
 800276c:	3408      	adds	r4, #8
 800276e:	4b45      	ldr	r3, [pc, #276]	; (8002884 <_Z3runv+0x228>)
 8002770:	2208      	movs	r2, #8
 8002772:	0019      	movs	r1, r3
 8002774:	0020      	movs	r0, r4
 8002776:	f7ff fdfa 	bl	800236e <_ZN3pinC1EP12GPIO_TypeDeft>
 800277a:	3408      	adds	r4, #8
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	021a      	lsls	r2, r3, #8
 8002780:	2390      	movs	r3, #144	; 0x90
 8002782:	05db      	lsls	r3, r3, #23
 8002784:	0019      	movs	r1, r3
 8002786:	0020      	movs	r0, r4
 8002788:	f7ff fdf1 	bl	800236e <_ZN3pinC1EP12GPIO_TypeDeft>
 800278c:	0020      	movs	r0, r4
 800278e:	3008      	adds	r0, #8
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	015a      	lsls	r2, r3, #5
 8002794:	2390      	movs	r3, #144	; 0x90
 8002796:	05db      	lsls	r3, r3, #23
 8002798:	0019      	movs	r1, r3
 800279a:	f7ff fde8 	bl	800236e <_ZN3pinC1EP12GPIO_TypeDeft>

	//Have to set what Pin the CS is connected to.
	LIS3DH accellerometer(pin(GPIOA, GPIO_PIN_4));
 800279e:	2390      	movs	r3, #144	; 0x90
 80027a0:	05d9      	lsls	r1, r3, #23
 80027a2:	24ac      	movs	r4, #172	; 0xac
 80027a4:	193b      	adds	r3, r7, r4
 80027a6:	2210      	movs	r2, #16
 80027a8:	0018      	movs	r0, r3
 80027aa:	f7ff fde0 	bl	800236e <_ZN3pinC1EP12GPIO_TypeDeft>
 80027ae:	193b      	adds	r3, r7, r4
 80027b0:	1d38      	adds	r0, r7, #4
 80027b2:	6819      	ldr	r1, [r3, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	f7ff fe11 	bl	80023dc <_ZN6LIS3DHC1E3pin>


	uint8_t lastLed=0;
 80027ba:	23bf      	movs	r3, #191	; 0xbf
 80027bc:	18fb      	adds	r3, r7, r3
 80027be:	2200      	movs	r2, #0
 80027c0:	701a      	strb	r2, [r3, #0]
	while (1){
		//I dont know if the read should return a vector so you can read multiple things at once?
		//Or if this is fine just calling read multiple times.
		auto x = accellerometer.getX();
 80027c2:	25be      	movs	r5, #190	; 0xbe
 80027c4:	197c      	adds	r4, r7, r5
 80027c6:	1d3b      	adds	r3, r7, #4
 80027c8:	0018      	movs	r0, r3
 80027ca:	f7ff fe35 	bl	8002438 <_ZN6LIS3DH4getXEv>
 80027ce:	0003      	movs	r3, r0
 80027d0:	7023      	strb	r3, [r4, #0]
		auto y = accellerometer.getY();
 80027d2:	26bd      	movs	r6, #189	; 0xbd
 80027d4:	19bc      	adds	r4, r7, r6
 80027d6:	1d3b      	adds	r3, r7, #4
 80027d8:	0018      	movs	r0, r3
 80027da:	f7ff fe3c 	bl	8002456 <_ZN6LIS3DH4getYEv>
 80027de:	0003      	movs	r3, r0
 80027e0:	7023      	strb	r3, [r4, #0]
		auto z = accellerometer.getZ();
 80027e2:	23bc      	movs	r3, #188	; 0xbc
 80027e4:	18fc      	adds	r4, r7, r3
 80027e6:	1d3b      	adds	r3, r7, #4
 80027e8:	0018      	movs	r0, r3
 80027ea:	f7ff fe43 	bl	8002474 <_ZN6LIS3DH4getZEv>
 80027ee:	0003      	movs	r3, r0
 80027f0:	7023      	strb	r3, [r4, #0]

		// Add PI because I want the angle in [0, 360]
		auto angle = calculateAngle(x,y);
 80027f2:	19bb      	adds	r3, r7, r6
 80027f4:	2200      	movs	r2, #0
 80027f6:	569a      	ldrsb	r2, [r3, r2]
 80027f8:	197b      	adds	r3, r7, r5
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	b25b      	sxtb	r3, r3
 80027fe:	0011      	movs	r1, r2
 8002800:	0018      	movs	r0, r3
 8002802:	f7ff fee1 	bl	80025c8 <_Z14calculateAngleaa>
 8002806:	1c03      	adds	r3, r0, #0
 8002808:	22b8      	movs	r2, #184	; 0xb8
 800280a:	18b9      	adds	r1, r7, r2
 800280c:	600b      	str	r3, [r1, #0]

		// This could be better, it does not have an equal window for LED 0 or 20  compared to the others
		uint8_t currLed = floor((angle+9)/18);
 800280e:	491f      	ldr	r1, [pc, #124]	; (800288c <_Z3runv+0x230>)
 8002810:	18bb      	adds	r3, r7, r2
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	f7fd fd56 	bl	80002c4 <__aeabi_fadd>
 8002818:	1c03      	adds	r3, r0, #0
 800281a:	491d      	ldr	r1, [pc, #116]	; (8002890 <_Z3runv+0x234>)
 800281c:	1c18      	adds	r0, r3, #0
 800281e:	f7fd feeb 	bl	80005f8 <__aeabi_fdiv>
 8002822:	1c03      	adds	r3, r0, #0
 8002824:	1c18      	adds	r0, r3, #0
 8002826:	f7ff fec1 	bl	80025ac <_ZSt5floorf>
 800282a:	1c03      	adds	r3, r0, #0
 800282c:	24b7      	movs	r4, #183	; 0xb7
 800282e:	0025      	movs	r5, r4
 8002830:	193c      	adds	r4, r7, r4
 8002832:	1c18      	adds	r0, r3, #0
 8002834:	f7fd fd2e 	bl	8000294 <__aeabi_f2uiz>
 8002838:	0003      	movs	r3, r0
 800283a:	7023      	strb	r3, [r4, #0]

		// Set the LED pointing down on and turn last one off. This doesnt need this if statement technically
		LEDS[currLed].setHigh();
 800283c:	002c      	movs	r4, r5
 800283e:	193b      	adds	r3, r7, r4
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	220c      	movs	r2, #12
 8002844:	18ba      	adds	r2, r7, r2
 8002846:	00db      	lsls	r3, r3, #3
 8002848:	18d3      	adds	r3, r2, r3
 800284a:	0018      	movs	r0, r3
 800284c:	f7ff fdb6 	bl	80023bc <_ZN3pin7setHighEv>
		if(currLed != lastLed){
 8002850:	193a      	adds	r2, r7, r4
 8002852:	23bf      	movs	r3, #191	; 0xbf
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	7812      	ldrb	r2, [r2, #0]
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	429a      	cmp	r2, r3
 800285c:	d00e      	beq.n	800287c <_Z3runv+0x220>
			LEDS[lastLed].setLow();
 800285e:	24bf      	movs	r4, #191	; 0xbf
 8002860:	193b      	adds	r3, r7, r4
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	220c      	movs	r2, #12
 8002866:	18ba      	adds	r2, r7, r2
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	18d3      	adds	r3, r2, r3
 800286c:	0018      	movs	r0, r3
 800286e:	f7ff fd95 	bl	800239c <_ZN3pin6setLowEv>
			lastLed = currLed;
 8002872:	193b      	adds	r3, r7, r4
 8002874:	22b7      	movs	r2, #183	; 0xb7
 8002876:	18ba      	adds	r2, r7, r2
 8002878:	7812      	ldrb	r2, [r2, #0]
 800287a:	701a      	strb	r2, [r3, #0]
		}

		HAL_Delay(10);
 800287c:	200a      	movs	r0, #10
 800287e:	f000 fa1d 	bl	8002cbc <HAL_Delay>
	}
 8002882:	e79e      	b.n	80027c2 <_Z3runv+0x166>
 8002884:	48000400 	.word	0x48000400
 8002888:	48000800 	.word	0x48000800
 800288c:	41100000 	.word	0x41100000
 8002890:	41900000 	.word	0x41900000

08002894 <_ZNSt5arrayIhLj2EE4dataEv>:
	return _Nm ? _AT_Type::_S_ref(_M_elems, _Nm - 1)
 	           : _AT_Type::_S_ref(_M_elems, 0);
      }

      _GLIBCXX17_CONSTEXPR pointer
      data() noexcept
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
      { return _AT_Type::_S_ptr(_M_elems); }
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	0018      	movs	r0, r3
 80028a0:	f000 f805 	bl	80028ae <_ZNSt14__array_traitsIhLj2EE6_S_ptrERA2_Kh>
 80028a4:	0003      	movs	r3, r0
 80028a6:	0018      	movs	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	b002      	add	sp, #8
 80028ac:	bd80      	pop	{r7, pc}

080028ae <_ZNSt14__array_traitsIhLj2EE6_S_ptrERA2_Kh>:
      _S_ptr(const _Type& __t) noexcept
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b082      	sub	sp, #8
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
      { return const_cast<_Tp*>(__t); }
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	0018      	movs	r0, r3
 80028ba:	46bd      	mov	sp, r7
 80028bc:	b002      	add	sp, #8
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028c6:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <HAL_MspInit+0x44>)
 80028c8:	699a      	ldr	r2, [r3, #24]
 80028ca:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <HAL_MspInit+0x44>)
 80028cc:	2101      	movs	r1, #1
 80028ce:	430a      	orrs	r2, r1
 80028d0:	619a      	str	r2, [r3, #24]
 80028d2:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <HAL_MspInit+0x44>)
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2201      	movs	r2, #1
 80028d8:	4013      	ands	r3, r2
 80028da:	607b      	str	r3, [r7, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028de:	4b09      	ldr	r3, [pc, #36]	; (8002904 <HAL_MspInit+0x44>)
 80028e0:	69da      	ldr	r2, [r3, #28]
 80028e2:	4b08      	ldr	r3, [pc, #32]	; (8002904 <HAL_MspInit+0x44>)
 80028e4:	2180      	movs	r1, #128	; 0x80
 80028e6:	0549      	lsls	r1, r1, #21
 80028e8:	430a      	orrs	r2, r1
 80028ea:	61da      	str	r2, [r3, #28]
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <HAL_MspInit+0x44>)
 80028ee:	69da      	ldr	r2, [r3, #28]
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	055b      	lsls	r3, r3, #21
 80028f4:	4013      	ands	r3, r2
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	46bd      	mov	sp, r7
 80028fe:	b002      	add	sp, #8
 8002900:	bd80      	pop	{r7, pc}
 8002902:	46c0      	nop			; (mov r8, r8)
 8002904:	40021000 	.word	0x40021000

08002908 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b08a      	sub	sp, #40	; 0x28
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002910:	2314      	movs	r3, #20
 8002912:	18fb      	adds	r3, r7, r3
 8002914:	0018      	movs	r0, r3
 8002916:	2314      	movs	r3, #20
 8002918:	001a      	movs	r2, r3
 800291a:	2100      	movs	r1, #0
 800291c:	f003 f94a 	bl	8005bb4 <memset>
  if(hadc->Instance==ADC1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a19      	ldr	r2, [pc, #100]	; (800298c <HAL_ADC_MspInit+0x84>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d12c      	bne.n	8002984 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800292a:	4b19      	ldr	r3, [pc, #100]	; (8002990 <HAL_ADC_MspInit+0x88>)
 800292c:	699a      	ldr	r2, [r3, #24]
 800292e:	4b18      	ldr	r3, [pc, #96]	; (8002990 <HAL_ADC_MspInit+0x88>)
 8002930:	2180      	movs	r1, #128	; 0x80
 8002932:	0089      	lsls	r1, r1, #2
 8002934:	430a      	orrs	r2, r1
 8002936:	619a      	str	r2, [r3, #24]
 8002938:	4b15      	ldr	r3, [pc, #84]	; (8002990 <HAL_ADC_MspInit+0x88>)
 800293a:	699a      	ldr	r2, [r3, #24]
 800293c:	2380      	movs	r3, #128	; 0x80
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	4013      	ands	r3, r2
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002946:	4b12      	ldr	r3, [pc, #72]	; (8002990 <HAL_ADC_MspInit+0x88>)
 8002948:	695a      	ldr	r2, [r3, #20]
 800294a:	4b11      	ldr	r3, [pc, #68]	; (8002990 <HAL_ADC_MspInit+0x88>)
 800294c:	2180      	movs	r1, #128	; 0x80
 800294e:	0289      	lsls	r1, r1, #10
 8002950:	430a      	orrs	r2, r1
 8002952:	615a      	str	r2, [r3, #20]
 8002954:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <HAL_ADC_MspInit+0x88>)
 8002956:	695a      	ldr	r2, [r3, #20]
 8002958:	2380      	movs	r3, #128	; 0x80
 800295a:	029b      	lsls	r3, r3, #10
 800295c:	4013      	ands	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002962:	2114      	movs	r1, #20
 8002964:	187b      	adds	r3, r7, r1
 8002966:	2203      	movs	r2, #3
 8002968:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800296a:	187b      	adds	r3, r7, r1
 800296c:	2203      	movs	r2, #3
 800296e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002970:	187b      	adds	r3, r7, r1
 8002972:	2200      	movs	r2, #0
 8002974:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002976:	187a      	adds	r2, r7, r1
 8002978:	2390      	movs	r3, #144	; 0x90
 800297a:	05db      	lsls	r3, r3, #23
 800297c:	0011      	movs	r1, r2
 800297e:	0018      	movs	r0, r3
 8002980:	f000 fca8 	bl	80032d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002984:	46c0      	nop			; (mov r8, r8)
 8002986:	46bd      	mov	sp, r7
 8002988:	b00a      	add	sp, #40	; 0x28
 800298a:	bd80      	pop	{r7, pc}
 800298c:	40012400 	.word	0x40012400
 8002990:	40021000 	.word	0x40021000

08002994 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b08a      	sub	sp, #40	; 0x28
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800299c:	2314      	movs	r3, #20
 800299e:	18fb      	adds	r3, r7, r3
 80029a0:	0018      	movs	r0, r3
 80029a2:	2314      	movs	r3, #20
 80029a4:	001a      	movs	r2, r3
 80029a6:	2100      	movs	r1, #0
 80029a8:	f003 f904 	bl	8005bb4 <memset>
  if(hi2c->Instance==I2C1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a1c      	ldr	r2, [pc, #112]	; (8002a24 <HAL_I2C_MspInit+0x90>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d131      	bne.n	8002a1a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029b6:	4b1c      	ldr	r3, [pc, #112]	; (8002a28 <HAL_I2C_MspInit+0x94>)
 80029b8:	695a      	ldr	r2, [r3, #20]
 80029ba:	4b1b      	ldr	r3, [pc, #108]	; (8002a28 <HAL_I2C_MspInit+0x94>)
 80029bc:	2180      	movs	r1, #128	; 0x80
 80029be:	02c9      	lsls	r1, r1, #11
 80029c0:	430a      	orrs	r2, r1
 80029c2:	615a      	str	r2, [r3, #20]
 80029c4:	4b18      	ldr	r3, [pc, #96]	; (8002a28 <HAL_I2C_MspInit+0x94>)
 80029c6:	695a      	ldr	r2, [r3, #20]
 80029c8:	2380      	movs	r3, #128	; 0x80
 80029ca:	02db      	lsls	r3, r3, #11
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]
 80029d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029d2:	2114      	movs	r1, #20
 80029d4:	187b      	adds	r3, r7, r1
 80029d6:	22c0      	movs	r2, #192	; 0xc0
 80029d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029da:	187b      	adds	r3, r7, r1
 80029dc:	2212      	movs	r2, #18
 80029de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029e0:	187b      	adds	r3, r7, r1
 80029e2:	2201      	movs	r2, #1
 80029e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029e6:	187b      	adds	r3, r7, r1
 80029e8:	2203      	movs	r2, #3
 80029ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80029ec:	187b      	adds	r3, r7, r1
 80029ee:	2201      	movs	r2, #1
 80029f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029f2:	187b      	adds	r3, r7, r1
 80029f4:	4a0d      	ldr	r2, [pc, #52]	; (8002a2c <HAL_I2C_MspInit+0x98>)
 80029f6:	0019      	movs	r1, r3
 80029f8:	0010      	movs	r0, r2
 80029fa:	f000 fc6b 	bl	80032d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029fe:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <HAL_I2C_MspInit+0x94>)
 8002a00:	69da      	ldr	r2, [r3, #28]
 8002a02:	4b09      	ldr	r3, [pc, #36]	; (8002a28 <HAL_I2C_MspInit+0x94>)
 8002a04:	2180      	movs	r1, #128	; 0x80
 8002a06:	0389      	lsls	r1, r1, #14
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	61da      	str	r2, [r3, #28]
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <HAL_I2C_MspInit+0x94>)
 8002a0e:	69da      	ldr	r2, [r3, #28]
 8002a10:	2380      	movs	r3, #128	; 0x80
 8002a12:	039b      	lsls	r3, r3, #14
 8002a14:	4013      	ands	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a1a:	46c0      	nop			; (mov r8, r8)
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	b00a      	add	sp, #40	; 0x28
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	40005400 	.word	0x40005400
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	48000400 	.word	0x48000400

08002a30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08a      	sub	sp, #40	; 0x28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a38:	2314      	movs	r3, #20
 8002a3a:	18fb      	adds	r3, r7, r3
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	2314      	movs	r3, #20
 8002a40:	001a      	movs	r2, r3
 8002a42:	2100      	movs	r1, #0
 8002a44:	f003 f8b6 	bl	8005bb4 <memset>
  if(hspi->Instance==SPI1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a1c      	ldr	r2, [pc, #112]	; (8002ac0 <HAL_SPI_MspInit+0x90>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d132      	bne.n	8002ab8 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a52:	4b1c      	ldr	r3, [pc, #112]	; (8002ac4 <HAL_SPI_MspInit+0x94>)
 8002a54:	699a      	ldr	r2, [r3, #24]
 8002a56:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <HAL_SPI_MspInit+0x94>)
 8002a58:	2180      	movs	r1, #128	; 0x80
 8002a5a:	0149      	lsls	r1, r1, #5
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	619a      	str	r2, [r3, #24]
 8002a60:	4b18      	ldr	r3, [pc, #96]	; (8002ac4 <HAL_SPI_MspInit+0x94>)
 8002a62:	699a      	ldr	r2, [r3, #24]
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	015b      	lsls	r3, r3, #5
 8002a68:	4013      	ands	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a6e:	4b15      	ldr	r3, [pc, #84]	; (8002ac4 <HAL_SPI_MspInit+0x94>)
 8002a70:	695a      	ldr	r2, [r3, #20]
 8002a72:	4b14      	ldr	r3, [pc, #80]	; (8002ac4 <HAL_SPI_MspInit+0x94>)
 8002a74:	2180      	movs	r1, #128	; 0x80
 8002a76:	0289      	lsls	r1, r1, #10
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	615a      	str	r2, [r3, #20]
 8002a7c:	4b11      	ldr	r3, [pc, #68]	; (8002ac4 <HAL_SPI_MspInit+0x94>)
 8002a7e:	695a      	ldr	r2, [r3, #20]
 8002a80:	2380      	movs	r3, #128	; 0x80
 8002a82:	029b      	lsls	r3, r3, #10
 8002a84:	4013      	ands	r3, r2
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002a8a:	2114      	movs	r1, #20
 8002a8c:	187b      	adds	r3, r7, r1
 8002a8e:	22e0      	movs	r2, #224	; 0xe0
 8002a90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a92:	187b      	adds	r3, r7, r1
 8002a94:	2202      	movs	r2, #2
 8002a96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a98:	187b      	adds	r3, r7, r1
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a9e:	187b      	adds	r3, r7, r1
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8002aa4:	187b      	adds	r3, r7, r1
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aaa:	187a      	adds	r2, r7, r1
 8002aac:	2390      	movs	r3, #144	; 0x90
 8002aae:	05db      	lsls	r3, r3, #23
 8002ab0:	0011      	movs	r1, r2
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f000 fc0e 	bl	80032d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ab8:	46c0      	nop			; (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b00a      	add	sp, #40	; 0x28
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40013000 	.word	0x40013000
 8002ac4:	40021000 	.word	0x40021000

08002ac8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b08a      	sub	sp, #40	; 0x28
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ad0:	2314      	movs	r3, #20
 8002ad2:	18fb      	adds	r3, r7, r3
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	2314      	movs	r3, #20
 8002ad8:	001a      	movs	r2, r3
 8002ada:	2100      	movs	r1, #0
 8002adc:	f003 f86a 	bl	8005bb4 <memset>
  if(huart->Instance==USART1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a1d      	ldr	r2, [pc, #116]	; (8002b5c <HAL_UART_MspInit+0x94>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d133      	bne.n	8002b52 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002aea:	4b1d      	ldr	r3, [pc, #116]	; (8002b60 <HAL_UART_MspInit+0x98>)
 8002aec:	699a      	ldr	r2, [r3, #24]
 8002aee:	4b1c      	ldr	r3, [pc, #112]	; (8002b60 <HAL_UART_MspInit+0x98>)
 8002af0:	2180      	movs	r1, #128	; 0x80
 8002af2:	01c9      	lsls	r1, r1, #7
 8002af4:	430a      	orrs	r2, r1
 8002af6:	619a      	str	r2, [r3, #24]
 8002af8:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <HAL_UART_MspInit+0x98>)
 8002afa:	699a      	ldr	r2, [r3, #24]
 8002afc:	2380      	movs	r3, #128	; 0x80
 8002afe:	01db      	lsls	r3, r3, #7
 8002b00:	4013      	ands	r3, r2
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b06:	4b16      	ldr	r3, [pc, #88]	; (8002b60 <HAL_UART_MspInit+0x98>)
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <HAL_UART_MspInit+0x98>)
 8002b0c:	2180      	movs	r1, #128	; 0x80
 8002b0e:	0289      	lsls	r1, r1, #10
 8002b10:	430a      	orrs	r2, r1
 8002b12:	615a      	str	r2, [r3, #20]
 8002b14:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <HAL_UART_MspInit+0x98>)
 8002b16:	695a      	ldr	r2, [r3, #20]
 8002b18:	2380      	movs	r3, #128	; 0x80
 8002b1a:	029b      	lsls	r3, r3, #10
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b22:	2114      	movs	r1, #20
 8002b24:	187b      	adds	r3, r7, r1
 8002b26:	22c0      	movs	r2, #192	; 0xc0
 8002b28:	00d2      	lsls	r2, r2, #3
 8002b2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2c:	187b      	adds	r3, r7, r1
 8002b2e:	2202      	movs	r2, #2
 8002b30:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	187b      	adds	r3, r7, r1
 8002b34:	2200      	movs	r2, #0
 8002b36:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b38:	187b      	adds	r3, r7, r1
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002b3e:	187b      	adds	r3, r7, r1
 8002b40:	2201      	movs	r2, #1
 8002b42:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b44:	187a      	adds	r2, r7, r1
 8002b46:	2390      	movs	r3, #144	; 0x90
 8002b48:	05db      	lsls	r3, r3, #23
 8002b4a:	0011      	movs	r1, r2
 8002b4c:	0018      	movs	r0, r3
 8002b4e:	f000 fbc1 	bl	80032d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b00a      	add	sp, #40	; 0x28
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	40013800 	.word	0x40013800
 8002b60:	40021000 	.word	0x40021000

08002b64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b68:	46c0      	nop			; (mov r8, r8)
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b72:	e7fe      	b.n	8002b72 <HardFault_Handler+0x4>

08002b74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002b78:	46c0      	nop			; (mov r8, r8)
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}

08002b7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b7e:	b580      	push	{r7, lr}
 8002b80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b82:	46c0      	nop			; (mov r8, r8)
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b8c:	f000 f87a 	bl	8002c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b90:	46c0      	nop			; (mov r8, r8)
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002ba0:	480d      	ldr	r0, [pc, #52]	; (8002bd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ba2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ba4:	480d      	ldr	r0, [pc, #52]	; (8002bdc <LoopForever+0x6>)
  ldr r1, =_edata
 8002ba6:	490e      	ldr	r1, [pc, #56]	; (8002be0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ba8:	4a0e      	ldr	r2, [pc, #56]	; (8002be4 <LoopForever+0xe>)
  movs r3, #0
 8002baa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bac:	e002      	b.n	8002bb4 <LoopCopyDataInit>

08002bae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bb2:	3304      	adds	r3, #4

08002bb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bb8:	d3f9      	bcc.n	8002bae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bba:	4a0b      	ldr	r2, [pc, #44]	; (8002be8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002bbc:	4c0b      	ldr	r4, [pc, #44]	; (8002bec <LoopForever+0x16>)
  movs r3, #0
 8002bbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bc0:	e001      	b.n	8002bc6 <LoopFillZerobss>

08002bc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bc4:	3204      	adds	r2, #4

08002bc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bc8:	d3fb      	bcc.n	8002bc2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002bca:	f7ff ffe4 	bl	8002b96 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002bce:	f002 ffcd 	bl	8005b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bd2:	f7ff f95b 	bl	8001e8c <main>

08002bd6 <LoopForever>:

LoopForever:
    b LoopForever
 8002bd6:	e7fe      	b.n	8002bd6 <LoopForever>
  ldr   r0, =_estack
 8002bd8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002be0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002be4:	08005d44 	.word	0x08005d44
  ldr r2, =_sbss
 8002be8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002bec:	2000019c 	.word	0x2000019c

08002bf0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bf0:	e7fe      	b.n	8002bf0 <ADC1_IRQHandler>
	...

08002bf4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bf8:	4b07      	ldr	r3, [pc, #28]	; (8002c18 <HAL_Init+0x24>)
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <HAL_Init+0x24>)
 8002bfe:	2110      	movs	r1, #16
 8002c00:	430a      	orrs	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002c04:	2000      	movs	r0, #0
 8002c06:	f000 f809 	bl	8002c1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c0a:	f7ff fe59 	bl	80028c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
}
 8002c10:	0018      	movs	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	40022000 	.word	0x40022000

08002c1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c1c:	b590      	push	{r4, r7, lr}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c24:	4b14      	ldr	r3, [pc, #80]	; (8002c78 <HAL_InitTick+0x5c>)
 8002c26:	681c      	ldr	r4, [r3, #0]
 8002c28:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <HAL_InitTick+0x60>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	23fa      	movs	r3, #250	; 0xfa
 8002c30:	0098      	lsls	r0, r3, #2
 8002c32:	f7fd fa69 	bl	8000108 <__udivsi3>
 8002c36:	0003      	movs	r3, r0
 8002c38:	0019      	movs	r1, r3
 8002c3a:	0020      	movs	r0, r4
 8002c3c:	f7fd fa64 	bl	8000108 <__udivsi3>
 8002c40:	0003      	movs	r3, r0
 8002c42:	0018      	movs	r0, r3
 8002c44:	f000 fb39 	bl	80032ba <HAL_SYSTICK_Config>
 8002c48:	1e03      	subs	r3, r0, #0
 8002c4a:	d001      	beq.n	8002c50 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e00f      	b.n	8002c70 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d80b      	bhi.n	8002c6e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	2301      	movs	r3, #1
 8002c5a:	425b      	negs	r3, r3
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	0018      	movs	r0, r3
 8002c60:	f000 fb16 	bl	8003290 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c64:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <HAL_InitTick+0x64>)
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	e000      	b.n	8002c70 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
}
 8002c70:	0018      	movs	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b003      	add	sp, #12
 8002c76:	bd90      	pop	{r4, r7, pc}
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	20000008 	.word	0x20000008
 8002c80:	20000004 	.word	0x20000004

08002c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <HAL_IncTick+0x1c>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	001a      	movs	r2, r3
 8002c8e:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_IncTick+0x20>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	18d2      	adds	r2, r2, r3
 8002c94:	4b03      	ldr	r3, [pc, #12]	; (8002ca4 <HAL_IncTick+0x20>)
 8002c96:	601a      	str	r2, [r3, #0]
}
 8002c98:	46c0      	nop			; (mov r8, r8)
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	46c0      	nop			; (mov r8, r8)
 8002ca0:	20000008 	.word	0x20000008
 8002ca4:	20000198 	.word	0x20000198

08002ca8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  return uwTick;
 8002cac:	4b02      	ldr	r3, [pc, #8]	; (8002cb8 <HAL_GetTick+0x10>)
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	0018      	movs	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	46c0      	nop			; (mov r8, r8)
 8002cb8:	20000198 	.word	0x20000198

08002cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cc4:	f7ff fff0 	bl	8002ca8 <HAL_GetTick>
 8002cc8:	0003      	movs	r3, r0
 8002cca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	d005      	beq.n	8002ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cd6:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <HAL_Delay+0x40>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	001a      	movs	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	189b      	adds	r3, r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	f7ff ffe0 	bl	8002ca8 <HAL_GetTick>
 8002ce8:	0002      	movs	r2, r0
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d8f7      	bhi.n	8002ce4 <HAL_Delay+0x28>
  {
  }
}
 8002cf4:	46c0      	nop			; (mov r8, r8)
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	b004      	add	sp, #16
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	20000008 	.word	0x20000008

08002d00 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d08:	230f      	movs	r3, #15
 8002d0a:	18fb      	adds	r3, r7, r3
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e125      	b.n	8002f6a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10a      	bne.n	8002d3c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2234      	movs	r2, #52	; 0x34
 8002d30:	2100      	movs	r1, #0
 8002d32:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	0018      	movs	r0, r3
 8002d38:	f7ff fde6 	bl	8002908 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d40:	2210      	movs	r2, #16
 8002d42:	4013      	ands	r3, r2
 8002d44:	d000      	beq.n	8002d48 <HAL_ADC_Init+0x48>
 8002d46:	e103      	b.n	8002f50 <HAL_ADC_Init+0x250>
 8002d48:	230f      	movs	r3, #15
 8002d4a:	18fb      	adds	r3, r7, r3
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d000      	beq.n	8002d54 <HAL_ADC_Init+0x54>
 8002d52:	e0fd      	b.n	8002f50 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	2204      	movs	r2, #4
 8002d5c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002d5e:	d000      	beq.n	8002d62 <HAL_ADC_Init+0x62>
 8002d60:	e0f6      	b.n	8002f50 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d66:	4a83      	ldr	r2, [pc, #524]	; (8002f74 <HAL_ADC_Init+0x274>)
 8002d68:	4013      	ands	r3, r2
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	2203      	movs	r2, #3
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d112      	bne.n	8002da6 <HAL_ADC_Init+0xa6>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2201      	movs	r2, #1
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d009      	beq.n	8002da2 <HAL_ADC_Init+0xa2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	68da      	ldr	r2, [r3, #12]
 8002d94:	2380      	movs	r3, #128	; 0x80
 8002d96:	021b      	lsls	r3, r3, #8
 8002d98:	401a      	ands	r2, r3
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	021b      	lsls	r3, r3, #8
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d101      	bne.n	8002da6 <HAL_ADC_Init+0xa6>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <HAL_ADC_Init+0xa8>
 8002da6:	2300      	movs	r3, #0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d116      	bne.n	8002dda <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	2218      	movs	r2, #24
 8002db4:	4393      	bics	r3, r2
 8002db6:	0019      	movs	r1, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	430a      	orrs	r2, r1
 8002dc2:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	0899      	lsrs	r1, r3, #2
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4964      	ldr	r1, [pc, #400]	; (8002f78 <HAL_ADC_Init+0x278>)
 8002de6:	400a      	ands	r2, r1
 8002de8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	7e1b      	ldrb	r3, [r3, #24]
 8002dee:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	7e5b      	ldrb	r3, [r3, #25]
 8002df4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002df6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	7e9b      	ldrb	r3, [r3, #26]
 8002dfc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002dfe:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d002      	beq.n	8002e0e <HAL_ADC_Init+0x10e>
 8002e08:	2380      	movs	r3, #128	; 0x80
 8002e0a:	015b      	lsls	r3, r3, #5
 8002e0c:	e000      	b.n	8002e10 <HAL_ADC_Init+0x110>
 8002e0e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002e10:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002e16:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d101      	bne.n	8002e24 <HAL_ADC_Init+0x124>
 8002e20:	2304      	movs	r3, #4
 8002e22:	e000      	b.n	8002e26 <HAL_ADC_Init+0x126>
 8002e24:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8002e26:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2124      	movs	r1, #36	; 0x24
 8002e2c:	5c5b      	ldrb	r3, [r3, r1]
 8002e2e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002e30:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	7edb      	ldrb	r3, [r3, #27]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d115      	bne.n	8002e6c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	7e9b      	ldrb	r3, [r3, #26]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d105      	bne.n	8002e54 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2280      	movs	r2, #128	; 0x80
 8002e4c:	0252      	lsls	r2, r2, #9
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60bb      	str	r3, [r7, #8]
 8002e52:	e00b      	b.n	8002e6c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e58:	2220      	movs	r2, #32
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e64:	2201      	movs	r2, #1
 8002e66:	431a      	orrs	r2, r3
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	69da      	ldr	r2, [r3, #28]
 8002e70:	23c2      	movs	r3, #194	; 0xc2
 8002e72:	33ff      	adds	r3, #255	; 0xff
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d007      	beq.n	8002e88 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8002e80:	4313      	orrs	r3, r2
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68d9      	ldr	r1, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e9c:	2380      	movs	r3, #128	; 0x80
 8002e9e:	055b      	lsls	r3, r3, #21
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d01b      	beq.n	8002edc <HAL_ADC_Init+0x1dc>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d017      	beq.n	8002edc <HAL_ADC_Init+0x1dc>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb0:	2b02      	cmp	r3, #2
 8002eb2:	d013      	beq.n	8002edc <HAL_ADC_Init+0x1dc>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d00f      	beq.n	8002edc <HAL_ADC_Init+0x1dc>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec0:	2b04      	cmp	r3, #4
 8002ec2:	d00b      	beq.n	8002edc <HAL_ADC_Init+0x1dc>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec8:	2b05      	cmp	r3, #5
 8002eca:	d007      	beq.n	8002edc <HAL_ADC_Init+0x1dc>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed0:	2b06      	cmp	r3, #6
 8002ed2:	d003      	beq.n	8002edc <HAL_ADC_Init+0x1dc>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	2b07      	cmp	r3, #7
 8002eda:	d112      	bne.n	8002f02 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695a      	ldr	r2, [r3, #20]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2107      	movs	r1, #7
 8002ee8:	438a      	bics	r2, r1
 8002eea:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	6959      	ldr	r1, [r3, #20]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef6:	2207      	movs	r2, #7
 8002ef8:	401a      	ands	r2, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	430a      	orrs	r2, r1
 8002f00:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4a1c      	ldr	r2, [pc, #112]	; (8002f7c <HAL_ADC_Init+0x27c>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d10b      	bne.n	8002f2a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	2203      	movs	r2, #3
 8002f1e:	4393      	bics	r3, r2
 8002f20:	2201      	movs	r2, #1
 8002f22:	431a      	orrs	r2, r3
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002f28:	e01c      	b.n	8002f64 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2e:	2212      	movs	r2, #18
 8002f30:	4393      	bics	r3, r2
 8002f32:	2210      	movs	r2, #16
 8002f34:	431a      	orrs	r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f3e:	2201      	movs	r2, #1
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8002f46:	230f      	movs	r3, #15
 8002f48:	18fb      	adds	r3, r7, r3
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002f4e:	e009      	b.n	8002f64 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f54:	2210      	movs	r2, #16
 8002f56:	431a      	orrs	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8002f5c:	230f      	movs	r3, #15
 8002f5e:	18fb      	adds	r3, r7, r3
 8002f60:	2201      	movs	r2, #1
 8002f62:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002f64:	230f      	movs	r3, #15
 8002f66:	18fb      	adds	r3, r7, r3
 8002f68:	781b      	ldrb	r3, [r3, #0]
}
 8002f6a:	0018      	movs	r0, r3
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	b004      	add	sp, #16
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	46c0      	nop			; (mov r8, r8)
 8002f74:	fffffefd 	.word	0xfffffefd
 8002f78:	fffe0219 	.word	0xfffe0219
 8002f7c:	833fffe7 	.word	0x833fffe7

08002f80 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f8a:	230f      	movs	r3, #15
 8002f8c:	18fb      	adds	r3, r7, r3
 8002f8e:	2200      	movs	r2, #0
 8002f90:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8002f92:	2300      	movs	r3, #0
 8002f94:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	055b      	lsls	r3, r3, #21
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d011      	beq.n	8002fc6 <HAL_ADC_ConfigChannel+0x46>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d00d      	beq.n	8002fc6 <HAL_ADC_ConfigChannel+0x46>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d009      	beq.n	8002fc6 <HAL_ADC_ConfigChannel+0x46>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb6:	2b03      	cmp	r3, #3
 8002fb8:	d005      	beq.n	8002fc6 <HAL_ADC_ConfigChannel+0x46>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fbe:	2b04      	cmp	r3, #4
 8002fc0:	d001      	beq.n	8002fc6 <HAL_ADC_ConfigChannel+0x46>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2234      	movs	r2, #52	; 0x34
 8002fca:	5c9b      	ldrb	r3, [r3, r2]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d101      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x54>
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	e0bb      	b.n	800314c <HAL_ADC_ConfigChannel+0x1cc>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2234      	movs	r2, #52	; 0x34
 8002fd8:	2101      	movs	r1, #1
 8002fda:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2204      	movs	r2, #4
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d000      	beq.n	8002fea <HAL_ADC_ConfigChannel+0x6a>
 8002fe8:	e09f      	b.n	800312a <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	4a59      	ldr	r2, [pc, #356]	; (8003154 <HAL_ADC_ConfigChannel+0x1d4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d100      	bne.n	8002ff6 <HAL_ADC_ConfigChannel+0x76>
 8002ff4:	e077      	b.n	80030e6 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2201      	movs	r2, #1
 8003002:	409a      	lsls	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003010:	2380      	movs	r3, #128	; 0x80
 8003012:	055b      	lsls	r3, r3, #21
 8003014:	429a      	cmp	r2, r3
 8003016:	d037      	beq.n	8003088 <HAL_ADC_ConfigChannel+0x108>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	2b01      	cmp	r3, #1
 800301e:	d033      	beq.n	8003088 <HAL_ADC_ConfigChannel+0x108>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003024:	2b02      	cmp	r3, #2
 8003026:	d02f      	beq.n	8003088 <HAL_ADC_ConfigChannel+0x108>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302c:	2b03      	cmp	r3, #3
 800302e:	d02b      	beq.n	8003088 <HAL_ADC_ConfigChannel+0x108>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003034:	2b04      	cmp	r3, #4
 8003036:	d027      	beq.n	8003088 <HAL_ADC_ConfigChannel+0x108>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800303c:	2b05      	cmp	r3, #5
 800303e:	d023      	beq.n	8003088 <HAL_ADC_ConfigChannel+0x108>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003044:	2b06      	cmp	r3, #6
 8003046:	d01f      	beq.n	8003088 <HAL_ADC_ConfigChannel+0x108>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800304c:	2b07      	cmp	r3, #7
 800304e:	d01b      	beq.n	8003088 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	695b      	ldr	r3, [r3, #20]
 800305a:	2107      	movs	r1, #7
 800305c:	400b      	ands	r3, r1
 800305e:	429a      	cmp	r2, r3
 8003060:	d012      	beq.n	8003088 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695a      	ldr	r2, [r3, #20]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2107      	movs	r1, #7
 800306e:	438a      	bics	r2, r1
 8003070:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	6959      	ldr	r1, [r3, #20]
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	2207      	movs	r2, #7
 800307e:	401a      	ands	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b10      	cmp	r3, #16
 800308e:	d003      	beq.n	8003098 <HAL_ADC_ConfigChannel+0x118>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2b11      	cmp	r3, #17
 8003096:	d152      	bne.n	800313e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003098:	4b2f      	ldr	r3, [pc, #188]	; (8003158 <HAL_ADC_ConfigChannel+0x1d8>)
 800309a:	6819      	ldr	r1, [r3, #0]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b10      	cmp	r3, #16
 80030a2:	d102      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x12a>
 80030a4:	2380      	movs	r3, #128	; 0x80
 80030a6:	041b      	lsls	r3, r3, #16
 80030a8:	e001      	b.n	80030ae <HAL_ADC_ConfigChannel+0x12e>
 80030aa:	2380      	movs	r3, #128	; 0x80
 80030ac:	03db      	lsls	r3, r3, #15
 80030ae:	4a2a      	ldr	r2, [pc, #168]	; (8003158 <HAL_ADC_ConfigChannel+0x1d8>)
 80030b0:	430b      	orrs	r3, r1
 80030b2:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b10      	cmp	r3, #16
 80030ba:	d140      	bne.n	800313e <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030bc:	4b27      	ldr	r3, [pc, #156]	; (800315c <HAL_ADC_ConfigChannel+0x1dc>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4927      	ldr	r1, [pc, #156]	; (8003160 <HAL_ADC_ConfigChannel+0x1e0>)
 80030c2:	0018      	movs	r0, r3
 80030c4:	f7fd f820 	bl	8000108 <__udivsi3>
 80030c8:	0003      	movs	r3, r0
 80030ca:	001a      	movs	r2, r3
 80030cc:	0013      	movs	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	189b      	adds	r3, r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030d6:	e002      	b.n	80030de <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	3b01      	subs	r3, #1
 80030dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d1f9      	bne.n	80030d8 <HAL_ADC_ConfigChannel+0x158>
 80030e4:	e02b      	b.n	800313e <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2101      	movs	r1, #1
 80030f2:	4099      	lsls	r1, r3
 80030f4:	000b      	movs	r3, r1
 80030f6:	43d9      	mvns	r1, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	400a      	ands	r2, r1
 80030fe:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2b10      	cmp	r3, #16
 8003106:	d003      	beq.n	8003110 <HAL_ADC_ConfigChannel+0x190>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b11      	cmp	r3, #17
 800310e:	d116      	bne.n	800313e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8003110:	4b11      	ldr	r3, [pc, #68]	; (8003158 <HAL_ADC_ConfigChannel+0x1d8>)
 8003112:	6819      	ldr	r1, [r3, #0]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b10      	cmp	r3, #16
 800311a:	d101      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x1a0>
 800311c:	4a11      	ldr	r2, [pc, #68]	; (8003164 <HAL_ADC_ConfigChannel+0x1e4>)
 800311e:	e000      	b.n	8003122 <HAL_ADC_ConfigChannel+0x1a2>
 8003120:	4a11      	ldr	r2, [pc, #68]	; (8003168 <HAL_ADC_ConfigChannel+0x1e8>)
 8003122:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <HAL_ADC_ConfigChannel+0x1d8>)
 8003124:	400a      	ands	r2, r1
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	e009      	b.n	800313e <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312e:	2220      	movs	r2, #32
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8003136:	230f      	movs	r3, #15
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	2201      	movs	r2, #1
 800313c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2234      	movs	r2, #52	; 0x34
 8003142:	2100      	movs	r1, #0
 8003144:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8003146:	230f      	movs	r3, #15
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	781b      	ldrb	r3, [r3, #0]
}
 800314c:	0018      	movs	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	b004      	add	sp, #16
 8003152:	bd80      	pop	{r7, pc}
 8003154:	00001001 	.word	0x00001001
 8003158:	40012708 	.word	0x40012708
 800315c:	20000000 	.word	0x20000000
 8003160:	000f4240 	.word	0x000f4240
 8003164:	ff7fffff 	.word	0xff7fffff
 8003168:	ffbfffff 	.word	0xffbfffff

0800316c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800316c:	b590      	push	{r4, r7, lr}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	0002      	movs	r2, r0
 8003174:	6039      	str	r1, [r7, #0]
 8003176:	1dfb      	adds	r3, r7, #7
 8003178:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800317a:	1dfb      	adds	r3, r7, #7
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b7f      	cmp	r3, #127	; 0x7f
 8003180:	d828      	bhi.n	80031d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003182:	4a2f      	ldr	r2, [pc, #188]	; (8003240 <__NVIC_SetPriority+0xd4>)
 8003184:	1dfb      	adds	r3, r7, #7
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	b25b      	sxtb	r3, r3
 800318a:	089b      	lsrs	r3, r3, #2
 800318c:	33c0      	adds	r3, #192	; 0xc0
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	589b      	ldr	r3, [r3, r2]
 8003192:	1dfa      	adds	r2, r7, #7
 8003194:	7812      	ldrb	r2, [r2, #0]
 8003196:	0011      	movs	r1, r2
 8003198:	2203      	movs	r2, #3
 800319a:	400a      	ands	r2, r1
 800319c:	00d2      	lsls	r2, r2, #3
 800319e:	21ff      	movs	r1, #255	; 0xff
 80031a0:	4091      	lsls	r1, r2
 80031a2:	000a      	movs	r2, r1
 80031a4:	43d2      	mvns	r2, r2
 80031a6:	401a      	ands	r2, r3
 80031a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	019b      	lsls	r3, r3, #6
 80031ae:	22ff      	movs	r2, #255	; 0xff
 80031b0:	401a      	ands	r2, r3
 80031b2:	1dfb      	adds	r3, r7, #7
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	0018      	movs	r0, r3
 80031b8:	2303      	movs	r3, #3
 80031ba:	4003      	ands	r3, r0
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031c0:	481f      	ldr	r0, [pc, #124]	; (8003240 <__NVIC_SetPriority+0xd4>)
 80031c2:	1dfb      	adds	r3, r7, #7
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	b25b      	sxtb	r3, r3
 80031c8:	089b      	lsrs	r3, r3, #2
 80031ca:	430a      	orrs	r2, r1
 80031cc:	33c0      	adds	r3, #192	; 0xc0
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80031d2:	e031      	b.n	8003238 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80031d4:	4a1b      	ldr	r2, [pc, #108]	; (8003244 <__NVIC_SetPriority+0xd8>)
 80031d6:	1dfb      	adds	r3, r7, #7
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	0019      	movs	r1, r3
 80031dc:	230f      	movs	r3, #15
 80031de:	400b      	ands	r3, r1
 80031e0:	3b08      	subs	r3, #8
 80031e2:	089b      	lsrs	r3, r3, #2
 80031e4:	3306      	adds	r3, #6
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	18d3      	adds	r3, r2, r3
 80031ea:	3304      	adds	r3, #4
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	1dfa      	adds	r2, r7, #7
 80031f0:	7812      	ldrb	r2, [r2, #0]
 80031f2:	0011      	movs	r1, r2
 80031f4:	2203      	movs	r2, #3
 80031f6:	400a      	ands	r2, r1
 80031f8:	00d2      	lsls	r2, r2, #3
 80031fa:	21ff      	movs	r1, #255	; 0xff
 80031fc:	4091      	lsls	r1, r2
 80031fe:	000a      	movs	r2, r1
 8003200:	43d2      	mvns	r2, r2
 8003202:	401a      	ands	r2, r3
 8003204:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	019b      	lsls	r3, r3, #6
 800320a:	22ff      	movs	r2, #255	; 0xff
 800320c:	401a      	ands	r2, r3
 800320e:	1dfb      	adds	r3, r7, #7
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	0018      	movs	r0, r3
 8003214:	2303      	movs	r3, #3
 8003216:	4003      	ands	r3, r0
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800321c:	4809      	ldr	r0, [pc, #36]	; (8003244 <__NVIC_SetPriority+0xd8>)
 800321e:	1dfb      	adds	r3, r7, #7
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	001c      	movs	r4, r3
 8003224:	230f      	movs	r3, #15
 8003226:	4023      	ands	r3, r4
 8003228:	3b08      	subs	r3, #8
 800322a:	089b      	lsrs	r3, r3, #2
 800322c:	430a      	orrs	r2, r1
 800322e:	3306      	adds	r3, #6
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	18c3      	adds	r3, r0, r3
 8003234:	3304      	adds	r3, #4
 8003236:	601a      	str	r2, [r3, #0]
}
 8003238:	46c0      	nop			; (mov r8, r8)
 800323a:	46bd      	mov	sp, r7
 800323c:	b003      	add	sp, #12
 800323e:	bd90      	pop	{r4, r7, pc}
 8003240:	e000e100 	.word	0xe000e100
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3b01      	subs	r3, #1
 8003254:	4a0c      	ldr	r2, [pc, #48]	; (8003288 <SysTick_Config+0x40>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800325a:	2301      	movs	r3, #1
 800325c:	e010      	b.n	8003280 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800325e:	4b0b      	ldr	r3, [pc, #44]	; (800328c <SysTick_Config+0x44>)
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	3a01      	subs	r2, #1
 8003264:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003266:	2301      	movs	r3, #1
 8003268:	425b      	negs	r3, r3
 800326a:	2103      	movs	r1, #3
 800326c:	0018      	movs	r0, r3
 800326e:	f7ff ff7d 	bl	800316c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003272:	4b06      	ldr	r3, [pc, #24]	; (800328c <SysTick_Config+0x44>)
 8003274:	2200      	movs	r2, #0
 8003276:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003278:	4b04      	ldr	r3, [pc, #16]	; (800328c <SysTick_Config+0x44>)
 800327a:	2207      	movs	r2, #7
 800327c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800327e:	2300      	movs	r3, #0
}
 8003280:	0018      	movs	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	b002      	add	sp, #8
 8003286:	bd80      	pop	{r7, pc}
 8003288:	00ffffff 	.word	0x00ffffff
 800328c:	e000e010 	.word	0xe000e010

08003290 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	607a      	str	r2, [r7, #4]
 800329a:	210f      	movs	r1, #15
 800329c:	187b      	adds	r3, r7, r1
 800329e:	1c02      	adds	r2, r0, #0
 80032a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	187b      	adds	r3, r7, r1
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	b25b      	sxtb	r3, r3
 80032aa:	0011      	movs	r1, r2
 80032ac:	0018      	movs	r0, r3
 80032ae:	f7ff ff5d 	bl	800316c <__NVIC_SetPriority>
}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b004      	add	sp, #16
 80032b8:	bd80      	pop	{r7, pc}

080032ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ba:	b580      	push	{r7, lr}
 80032bc:	b082      	sub	sp, #8
 80032be:	af00      	add	r7, sp, #0
 80032c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	0018      	movs	r0, r3
 80032c6:	f7ff ffbf 	bl	8003248 <SysTick_Config>
 80032ca:	0003      	movs	r3, r0
}
 80032cc:	0018      	movs	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b002      	add	sp, #8
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032e2:	e14f      	b.n	8003584 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2101      	movs	r1, #1
 80032ea:	697a      	ldr	r2, [r7, #20]
 80032ec:	4091      	lsls	r1, r2
 80032ee:	000a      	movs	r2, r1
 80032f0:	4013      	ands	r3, r2
 80032f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d100      	bne.n	80032fc <HAL_GPIO_Init+0x28>
 80032fa:	e140      	b.n	800357e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d00b      	beq.n	800331c <HAL_GPIO_Init+0x48>
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	2b02      	cmp	r3, #2
 800330a:	d007      	beq.n	800331c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003310:	2b11      	cmp	r3, #17
 8003312:	d003      	beq.n	800331c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b12      	cmp	r3, #18
 800331a:	d130      	bne.n	800337e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	2203      	movs	r2, #3
 8003328:	409a      	lsls	r2, r3
 800332a:	0013      	movs	r3, r2
 800332c:	43da      	mvns	r2, r3
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4013      	ands	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	68da      	ldr	r2, [r3, #12]
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	409a      	lsls	r2, r3
 800333e:	0013      	movs	r3, r2
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	4313      	orrs	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	693a      	ldr	r2, [r7, #16]
 800334a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003352:	2201      	movs	r2, #1
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	409a      	lsls	r2, r3
 8003358:	0013      	movs	r3, r2
 800335a:	43da      	mvns	r2, r3
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4013      	ands	r3, r2
 8003360:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	091b      	lsrs	r3, r3, #4
 8003368:	2201      	movs	r2, #1
 800336a:	401a      	ands	r2, r3
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	409a      	lsls	r2, r3
 8003370:	0013      	movs	r3, r2
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	2203      	movs	r2, #3
 800338a:	409a      	lsls	r2, r3
 800338c:	0013      	movs	r3, r2
 800338e:	43da      	mvns	r2, r3
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4013      	ands	r3, r2
 8003394:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	005b      	lsls	r3, r3, #1
 800339e:	409a      	lsls	r2, r3
 80033a0:	0013      	movs	r3, r2
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d003      	beq.n	80033be <HAL_GPIO_Init+0xea>
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b12      	cmp	r3, #18
 80033bc:	d123      	bne.n	8003406 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	08da      	lsrs	r2, r3, #3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3208      	adds	r2, #8
 80033c6:	0092      	lsls	r2, r2, #2
 80033c8:	58d3      	ldr	r3, [r2, r3]
 80033ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2207      	movs	r2, #7
 80033d0:	4013      	ands	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	220f      	movs	r2, #15
 80033d6:	409a      	lsls	r2, r3
 80033d8:	0013      	movs	r3, r2
 80033da:	43da      	mvns	r2, r3
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4013      	ands	r3, r2
 80033e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	691a      	ldr	r2, [r3, #16]
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	2107      	movs	r1, #7
 80033ea:	400b      	ands	r3, r1
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	409a      	lsls	r2, r3
 80033f0:	0013      	movs	r3, r2
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	08da      	lsrs	r2, r3, #3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	3208      	adds	r2, #8
 8003400:	0092      	lsls	r2, r2, #2
 8003402:	6939      	ldr	r1, [r7, #16]
 8003404:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	2203      	movs	r2, #3
 8003412:	409a      	lsls	r2, r3
 8003414:	0013      	movs	r3, r2
 8003416:	43da      	mvns	r2, r3
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	4013      	ands	r3, r2
 800341c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2203      	movs	r2, #3
 8003424:	401a      	ands	r2, r3
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	005b      	lsls	r3, r3, #1
 800342a:	409a      	lsls	r2, r3
 800342c:	0013      	movs	r3, r2
 800342e:	693a      	ldr	r2, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	2380      	movs	r3, #128	; 0x80
 8003440:	055b      	lsls	r3, r3, #21
 8003442:	4013      	ands	r3, r2
 8003444:	d100      	bne.n	8003448 <HAL_GPIO_Init+0x174>
 8003446:	e09a      	b.n	800357e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003448:	4b54      	ldr	r3, [pc, #336]	; (800359c <HAL_GPIO_Init+0x2c8>)
 800344a:	699a      	ldr	r2, [r3, #24]
 800344c:	4b53      	ldr	r3, [pc, #332]	; (800359c <HAL_GPIO_Init+0x2c8>)
 800344e:	2101      	movs	r1, #1
 8003450:	430a      	orrs	r2, r1
 8003452:	619a      	str	r2, [r3, #24]
 8003454:	4b51      	ldr	r3, [pc, #324]	; (800359c <HAL_GPIO_Init+0x2c8>)
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	2201      	movs	r2, #1
 800345a:	4013      	ands	r3, r2
 800345c:	60bb      	str	r3, [r7, #8]
 800345e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003460:	4a4f      	ldr	r2, [pc, #316]	; (80035a0 <HAL_GPIO_Init+0x2cc>)
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	089b      	lsrs	r3, r3, #2
 8003466:	3302      	adds	r3, #2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	589b      	ldr	r3, [r3, r2]
 800346c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2203      	movs	r2, #3
 8003472:	4013      	ands	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	220f      	movs	r2, #15
 8003478:	409a      	lsls	r2, r3
 800347a:	0013      	movs	r3, r2
 800347c:	43da      	mvns	r2, r3
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4013      	ands	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	2390      	movs	r3, #144	; 0x90
 8003488:	05db      	lsls	r3, r3, #23
 800348a:	429a      	cmp	r2, r3
 800348c:	d013      	beq.n	80034b6 <HAL_GPIO_Init+0x1e2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a44      	ldr	r2, [pc, #272]	; (80035a4 <HAL_GPIO_Init+0x2d0>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d00d      	beq.n	80034b2 <HAL_GPIO_Init+0x1de>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a43      	ldr	r2, [pc, #268]	; (80035a8 <HAL_GPIO_Init+0x2d4>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d007      	beq.n	80034ae <HAL_GPIO_Init+0x1da>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a42      	ldr	r2, [pc, #264]	; (80035ac <HAL_GPIO_Init+0x2d8>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d101      	bne.n	80034aa <HAL_GPIO_Init+0x1d6>
 80034a6:	2303      	movs	r3, #3
 80034a8:	e006      	b.n	80034b8 <HAL_GPIO_Init+0x1e4>
 80034aa:	2305      	movs	r3, #5
 80034ac:	e004      	b.n	80034b8 <HAL_GPIO_Init+0x1e4>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e002      	b.n	80034b8 <HAL_GPIO_Init+0x1e4>
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <HAL_GPIO_Init+0x1e4>
 80034b6:	2300      	movs	r3, #0
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	2103      	movs	r1, #3
 80034bc:	400a      	ands	r2, r1
 80034be:	0092      	lsls	r2, r2, #2
 80034c0:	4093      	lsls	r3, r2
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034c8:	4935      	ldr	r1, [pc, #212]	; (80035a0 <HAL_GPIO_Init+0x2cc>)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	089b      	lsrs	r3, r3, #2
 80034ce:	3302      	adds	r3, #2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034d6:	4b36      	ldr	r3, [pc, #216]	; (80035b0 <HAL_GPIO_Init+0x2dc>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	43da      	mvns	r2, r3
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	4013      	ands	r3, r2
 80034e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	2380      	movs	r3, #128	; 0x80
 80034ec:	025b      	lsls	r3, r3, #9
 80034ee:	4013      	ands	r3, r2
 80034f0:	d003      	beq.n	80034fa <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 80034f2:	693a      	ldr	r2, [r7, #16]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80034fa:	4b2d      	ldr	r3, [pc, #180]	; (80035b0 <HAL_GPIO_Init+0x2dc>)
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003500:	4b2b      	ldr	r3, [pc, #172]	; (80035b0 <HAL_GPIO_Init+0x2dc>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	43da      	mvns	r2, r3
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4013      	ands	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685a      	ldr	r2, [r3, #4]
 8003514:	2380      	movs	r3, #128	; 0x80
 8003516:	029b      	lsls	r3, r3, #10
 8003518:	4013      	ands	r3, r2
 800351a:	d003      	beq.n	8003524 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4313      	orrs	r3, r2
 8003522:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003524:	4b22      	ldr	r3, [pc, #136]	; (80035b0 <HAL_GPIO_Init+0x2dc>)
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800352a:	4b21      	ldr	r3, [pc, #132]	; (80035b0 <HAL_GPIO_Init+0x2dc>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	43da      	mvns	r2, r3
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	4013      	ands	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	685a      	ldr	r2, [r3, #4]
 800353e:	2380      	movs	r3, #128	; 0x80
 8003540:	035b      	lsls	r3, r3, #13
 8003542:	4013      	ands	r3, r2
 8003544:	d003      	beq.n	800354e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800354e:	4b18      	ldr	r3, [pc, #96]	; (80035b0 <HAL_GPIO_Init+0x2dc>)
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003554:	4b16      	ldr	r3, [pc, #88]	; (80035b0 <HAL_GPIO_Init+0x2dc>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	43da      	mvns	r2, r3
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	4013      	ands	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	2380      	movs	r3, #128	; 0x80
 800356a:	039b      	lsls	r3, r3, #14
 800356c:	4013      	ands	r3, r2
 800356e:	d003      	beq.n	8003578 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003578:	4b0d      	ldr	r3, [pc, #52]	; (80035b0 <HAL_GPIO_Init+0x2dc>)
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	3301      	adds	r3, #1
 8003582:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	40da      	lsrs	r2, r3
 800358c:	1e13      	subs	r3, r2, #0
 800358e:	d000      	beq.n	8003592 <HAL_GPIO_Init+0x2be>
 8003590:	e6a8      	b.n	80032e4 <HAL_GPIO_Init+0x10>
  } 
}
 8003592:	46c0      	nop			; (mov r8, r8)
 8003594:	46bd      	mov	sp, r7
 8003596:	b006      	add	sp, #24
 8003598:	bd80      	pop	{r7, pc}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	40021000 	.word	0x40021000
 80035a0:	40010000 	.word	0x40010000
 80035a4:	48000400 	.word	0x48000400
 80035a8:	48000800 	.word	0x48000800
 80035ac:	48000c00 	.word	0x48000c00
 80035b0:	40010400 	.word	0x40010400

080035b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	0008      	movs	r0, r1
 80035be:	0011      	movs	r1, r2
 80035c0:	1cbb      	adds	r3, r7, #2
 80035c2:	1c02      	adds	r2, r0, #0
 80035c4:	801a      	strh	r2, [r3, #0]
 80035c6:	1c7b      	adds	r3, r7, #1
 80035c8:	1c0a      	adds	r2, r1, #0
 80035ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035cc:	1c7b      	adds	r3, r7, #1
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d004      	beq.n	80035de <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035d4:	1cbb      	adds	r3, r7, #2
 80035d6:	881a      	ldrh	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035dc:	e003      	b.n	80035e6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035de:	1cbb      	adds	r3, r7, #2
 80035e0:	881a      	ldrh	r2, [r3, #0]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b002      	add	sp, #8
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d101      	bne.n	8003602 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e082      	b.n	8003708 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2241      	movs	r2, #65	; 0x41
 8003606:	5c9b      	ldrb	r3, [r3, r2]
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b00      	cmp	r3, #0
 800360c:	d107      	bne.n	800361e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2240      	movs	r2, #64	; 0x40
 8003612:	2100      	movs	r1, #0
 8003614:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	0018      	movs	r0, r3
 800361a:	f7ff f9bb 	bl	8002994 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2241      	movs	r2, #65	; 0x41
 8003622:	2124      	movs	r1, #36	; 0x24
 8003624:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2101      	movs	r1, #1
 8003632:	438a      	bics	r2, r1
 8003634:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685a      	ldr	r2, [r3, #4]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4934      	ldr	r1, [pc, #208]	; (8003710 <HAL_I2C_Init+0x120>)
 8003640:	400a      	ands	r2, r1
 8003642:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689a      	ldr	r2, [r3, #8]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4931      	ldr	r1, [pc, #196]	; (8003714 <HAL_I2C_Init+0x124>)
 8003650:	400a      	ands	r2, r1
 8003652:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d108      	bne.n	800366e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	689a      	ldr	r2, [r3, #8]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2180      	movs	r1, #128	; 0x80
 8003666:	0209      	lsls	r1, r1, #8
 8003668:	430a      	orrs	r2, r1
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	e007      	b.n	800367e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689a      	ldr	r2, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2184      	movs	r1, #132	; 0x84
 8003678:	0209      	lsls	r1, r1, #8
 800367a:	430a      	orrs	r2, r1
 800367c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	2b02      	cmp	r3, #2
 8003684:	d104      	bne.n	8003690 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2280      	movs	r2, #128	; 0x80
 800368c:	0112      	lsls	r2, r2, #4
 800368e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	491f      	ldr	r1, [pc, #124]	; (8003718 <HAL_I2C_Init+0x128>)
 800369c:	430a      	orrs	r2, r1
 800369e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	491a      	ldr	r1, [pc, #104]	; (8003714 <HAL_I2C_Init+0x124>)
 80036ac:	400a      	ands	r2, r1
 80036ae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691a      	ldr	r2, [r3, #16]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	431a      	orrs	r2, r3
 80036ba:	0011      	movs	r1, r2
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	021a      	lsls	r2, r3, #8
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69d9      	ldr	r1, [r3, #28]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6a1a      	ldr	r2, [r3, #32]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2101      	movs	r1, #1
 80036e6:	430a      	orrs	r2, r1
 80036e8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2241      	movs	r2, #65	; 0x41
 80036f4:	2120      	movs	r1, #32
 80036f6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2200      	movs	r2, #0
 80036fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2242      	movs	r2, #66	; 0x42
 8003702:	2100      	movs	r1, #0
 8003704:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	0018      	movs	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	b002      	add	sp, #8
 800370e:	bd80      	pop	{r7, pc}
 8003710:	f0ffffff 	.word	0xf0ffffff
 8003714:	ffff7fff 	.word	0xffff7fff
 8003718:	02008000 	.word	0x02008000

0800371c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2241      	movs	r2, #65	; 0x41
 800372a:	5c9b      	ldrb	r3, [r3, r2]
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b20      	cmp	r3, #32
 8003730:	d138      	bne.n	80037a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2240      	movs	r2, #64	; 0x40
 8003736:	5c9b      	ldrb	r3, [r3, r2]
 8003738:	2b01      	cmp	r3, #1
 800373a:	d101      	bne.n	8003740 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800373c:	2302      	movs	r3, #2
 800373e:	e032      	b.n	80037a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2240      	movs	r2, #64	; 0x40
 8003744:	2101      	movs	r1, #1
 8003746:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2241      	movs	r2, #65	; 0x41
 800374c:	2124      	movs	r1, #36	; 0x24
 800374e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2101      	movs	r1, #1
 800375c:	438a      	bics	r2, r1
 800375e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681a      	ldr	r2, [r3, #0]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4911      	ldr	r1, [pc, #68]	; (80037b0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800376c:	400a      	ands	r2, r1
 800376e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6819      	ldr	r1, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	430a      	orrs	r2, r1
 800377e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2101      	movs	r1, #1
 800378c:	430a      	orrs	r2, r1
 800378e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2241      	movs	r2, #65	; 0x41
 8003794:	2120      	movs	r1, #32
 8003796:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2240      	movs	r2, #64	; 0x40
 800379c:	2100      	movs	r1, #0
 800379e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80037a0:	2300      	movs	r3, #0
 80037a2:	e000      	b.n	80037a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80037a4:	2302      	movs	r3, #2
  }
}
 80037a6:	0018      	movs	r0, r3
 80037a8:	46bd      	mov	sp, r7
 80037aa:	b002      	add	sp, #8
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	46c0      	nop			; (mov r8, r8)
 80037b0:	ffffefff 	.word	0xffffefff

080037b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2241      	movs	r2, #65	; 0x41
 80037c2:	5c9b      	ldrb	r3, [r3, r2]
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b20      	cmp	r3, #32
 80037c8:	d139      	bne.n	800383e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2240      	movs	r2, #64	; 0x40
 80037ce:	5c9b      	ldrb	r3, [r3, r2]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d101      	bne.n	80037d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80037d4:	2302      	movs	r3, #2
 80037d6:	e033      	b.n	8003840 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2240      	movs	r2, #64	; 0x40
 80037dc:	2101      	movs	r1, #1
 80037de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2241      	movs	r2, #65	; 0x41
 80037e4:	2124      	movs	r1, #36	; 0x24
 80037e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2101      	movs	r1, #1
 80037f4:	438a      	bics	r2, r1
 80037f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4a11      	ldr	r2, [pc, #68]	; (8003848 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003804:	4013      	ands	r3, r2
 8003806:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	021b      	lsls	r3, r3, #8
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2101      	movs	r1, #1
 8003826:	430a      	orrs	r2, r1
 8003828:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2241      	movs	r2, #65	; 0x41
 800382e:	2120      	movs	r1, #32
 8003830:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2240      	movs	r2, #64	; 0x40
 8003836:	2100      	movs	r1, #0
 8003838:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	e000      	b.n	8003840 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800383e:	2302      	movs	r3, #2
  }
}
 8003840:	0018      	movs	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	b004      	add	sp, #16
 8003846:	bd80      	pop	{r7, pc}
 8003848:	fffff0ff 	.word	0xfffff0ff

0800384c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b088      	sub	sp, #32
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e303      	b.n	8003e66 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2201      	movs	r2, #1
 8003864:	4013      	ands	r3, r2
 8003866:	d100      	bne.n	800386a <HAL_RCC_OscConfig+0x1e>
 8003868:	e08d      	b.n	8003986 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800386a:	4bc4      	ldr	r3, [pc, #784]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	220c      	movs	r2, #12
 8003870:	4013      	ands	r3, r2
 8003872:	2b04      	cmp	r3, #4
 8003874:	d00e      	beq.n	8003894 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003876:	4bc1      	ldr	r3, [pc, #772]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	220c      	movs	r2, #12
 800387c:	4013      	ands	r3, r2
 800387e:	2b08      	cmp	r3, #8
 8003880:	d116      	bne.n	80038b0 <HAL_RCC_OscConfig+0x64>
 8003882:	4bbe      	ldr	r3, [pc, #760]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	2380      	movs	r3, #128	; 0x80
 8003888:	025b      	lsls	r3, r3, #9
 800388a:	401a      	ands	r2, r3
 800388c:	2380      	movs	r3, #128	; 0x80
 800388e:	025b      	lsls	r3, r3, #9
 8003890:	429a      	cmp	r2, r3
 8003892:	d10d      	bne.n	80038b0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003894:	4bb9      	ldr	r3, [pc, #740]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	2380      	movs	r3, #128	; 0x80
 800389a:	029b      	lsls	r3, r3, #10
 800389c:	4013      	ands	r3, r2
 800389e:	d100      	bne.n	80038a2 <HAL_RCC_OscConfig+0x56>
 80038a0:	e070      	b.n	8003984 <HAL_RCC_OscConfig+0x138>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d000      	beq.n	80038ac <HAL_RCC_OscConfig+0x60>
 80038aa:	e06b      	b.n	8003984 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e2da      	b.n	8003e66 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d107      	bne.n	80038c8 <HAL_RCC_OscConfig+0x7c>
 80038b8:	4bb0      	ldr	r3, [pc, #704]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	4baf      	ldr	r3, [pc, #700]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 80038be:	2180      	movs	r1, #128	; 0x80
 80038c0:	0249      	lsls	r1, r1, #9
 80038c2:	430a      	orrs	r2, r1
 80038c4:	601a      	str	r2, [r3, #0]
 80038c6:	e02f      	b.n	8003928 <HAL_RCC_OscConfig+0xdc>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10c      	bne.n	80038ea <HAL_RCC_OscConfig+0x9e>
 80038d0:	4baa      	ldr	r3, [pc, #680]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	4ba9      	ldr	r3, [pc, #676]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 80038d6:	49aa      	ldr	r1, [pc, #680]	; (8003b80 <HAL_RCC_OscConfig+0x334>)
 80038d8:	400a      	ands	r2, r1
 80038da:	601a      	str	r2, [r3, #0]
 80038dc:	4ba7      	ldr	r3, [pc, #668]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4ba6      	ldr	r3, [pc, #664]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 80038e2:	49a8      	ldr	r1, [pc, #672]	; (8003b84 <HAL_RCC_OscConfig+0x338>)
 80038e4:	400a      	ands	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	e01e      	b.n	8003928 <HAL_RCC_OscConfig+0xdc>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b05      	cmp	r3, #5
 80038f0:	d10e      	bne.n	8003910 <HAL_RCC_OscConfig+0xc4>
 80038f2:	4ba2      	ldr	r3, [pc, #648]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	4ba1      	ldr	r3, [pc, #644]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 80038f8:	2180      	movs	r1, #128	; 0x80
 80038fa:	02c9      	lsls	r1, r1, #11
 80038fc:	430a      	orrs	r2, r1
 80038fe:	601a      	str	r2, [r3, #0]
 8003900:	4b9e      	ldr	r3, [pc, #632]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	4b9d      	ldr	r3, [pc, #628]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003906:	2180      	movs	r1, #128	; 0x80
 8003908:	0249      	lsls	r1, r1, #9
 800390a:	430a      	orrs	r2, r1
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	e00b      	b.n	8003928 <HAL_RCC_OscConfig+0xdc>
 8003910:	4b9a      	ldr	r3, [pc, #616]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	4b99      	ldr	r3, [pc, #612]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003916:	499a      	ldr	r1, [pc, #616]	; (8003b80 <HAL_RCC_OscConfig+0x334>)
 8003918:	400a      	ands	r2, r1
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	4b97      	ldr	r3, [pc, #604]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	4b96      	ldr	r3, [pc, #600]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003922:	4998      	ldr	r1, [pc, #608]	; (8003b84 <HAL_RCC_OscConfig+0x338>)
 8003924:	400a      	ands	r2, r1
 8003926:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d014      	beq.n	800395a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003930:	f7ff f9ba 	bl	8002ca8 <HAL_GetTick>
 8003934:	0003      	movs	r3, r0
 8003936:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800393a:	f7ff f9b5 	bl	8002ca8 <HAL_GetTick>
 800393e:	0002      	movs	r2, r0
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b64      	cmp	r3, #100	; 0x64
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e28c      	b.n	8003e66 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394c:	4b8b      	ldr	r3, [pc, #556]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	2380      	movs	r3, #128	; 0x80
 8003952:	029b      	lsls	r3, r3, #10
 8003954:	4013      	ands	r3, r2
 8003956:	d0f0      	beq.n	800393a <HAL_RCC_OscConfig+0xee>
 8003958:	e015      	b.n	8003986 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800395a:	f7ff f9a5 	bl	8002ca8 <HAL_GetTick>
 800395e:	0003      	movs	r3, r0
 8003960:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003962:	e008      	b.n	8003976 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003964:	f7ff f9a0 	bl	8002ca8 <HAL_GetTick>
 8003968:	0002      	movs	r2, r0
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	2b64      	cmp	r3, #100	; 0x64
 8003970:	d901      	bls.n	8003976 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e277      	b.n	8003e66 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003976:	4b81      	ldr	r3, [pc, #516]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	2380      	movs	r3, #128	; 0x80
 800397c:	029b      	lsls	r3, r3, #10
 800397e:	4013      	ands	r3, r2
 8003980:	d1f0      	bne.n	8003964 <HAL_RCC_OscConfig+0x118>
 8003982:	e000      	b.n	8003986 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003984:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2202      	movs	r2, #2
 800398c:	4013      	ands	r3, r2
 800398e:	d100      	bne.n	8003992 <HAL_RCC_OscConfig+0x146>
 8003990:	e069      	b.n	8003a66 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003992:	4b7a      	ldr	r3, [pc, #488]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	220c      	movs	r2, #12
 8003998:	4013      	ands	r3, r2
 800399a:	d00b      	beq.n	80039b4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800399c:	4b77      	ldr	r3, [pc, #476]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	220c      	movs	r2, #12
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b08      	cmp	r3, #8
 80039a6:	d11c      	bne.n	80039e2 <HAL_RCC_OscConfig+0x196>
 80039a8:	4b74      	ldr	r3, [pc, #464]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	2380      	movs	r3, #128	; 0x80
 80039ae:	025b      	lsls	r3, r3, #9
 80039b0:	4013      	ands	r3, r2
 80039b2:	d116      	bne.n	80039e2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039b4:	4b71      	ldr	r3, [pc, #452]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2202      	movs	r2, #2
 80039ba:	4013      	ands	r3, r2
 80039bc:	d005      	beq.n	80039ca <HAL_RCC_OscConfig+0x17e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d001      	beq.n	80039ca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e24d      	b.n	8003e66 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039ca:	4b6c      	ldr	r3, [pc, #432]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	22f8      	movs	r2, #248	; 0xf8
 80039d0:	4393      	bics	r3, r2
 80039d2:	0019      	movs	r1, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	00da      	lsls	r2, r3, #3
 80039da:	4b68      	ldr	r3, [pc, #416]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 80039dc:	430a      	orrs	r2, r1
 80039de:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039e0:	e041      	b.n	8003a66 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d024      	beq.n	8003a34 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039ea:	4b64      	ldr	r3, [pc, #400]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	4b63      	ldr	r3, [pc, #396]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 80039f0:	2101      	movs	r1, #1
 80039f2:	430a      	orrs	r2, r1
 80039f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f6:	f7ff f957 	bl	8002ca8 <HAL_GetTick>
 80039fa:	0003      	movs	r3, r0
 80039fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a00:	f7ff f952 	bl	8002ca8 <HAL_GetTick>
 8003a04:	0002      	movs	r2, r0
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e229      	b.n	8003e66 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a12:	4b5a      	ldr	r3, [pc, #360]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2202      	movs	r2, #2
 8003a18:	4013      	ands	r3, r2
 8003a1a:	d0f1      	beq.n	8003a00 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1c:	4b57      	ldr	r3, [pc, #348]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	22f8      	movs	r2, #248	; 0xf8
 8003a22:	4393      	bics	r3, r2
 8003a24:	0019      	movs	r1, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	00da      	lsls	r2, r3, #3
 8003a2c:	4b53      	ldr	r3, [pc, #332]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	e018      	b.n	8003a66 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a34:	4b51      	ldr	r3, [pc, #324]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	4b50      	ldr	r3, [pc, #320]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	438a      	bics	r2, r1
 8003a3e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a40:	f7ff f932 	bl	8002ca8 <HAL_GetTick>
 8003a44:	0003      	movs	r3, r0
 8003a46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a48:	e008      	b.n	8003a5c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003a4a:	f7ff f92d 	bl	8002ca8 <HAL_GetTick>
 8003a4e:	0002      	movs	r2, r0
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e204      	b.n	8003e66 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a5c:	4b47      	ldr	r3, [pc, #284]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2202      	movs	r2, #2
 8003a62:	4013      	ands	r3, r2
 8003a64:	d1f1      	bne.n	8003a4a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2208      	movs	r2, #8
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	d036      	beq.n	8003ade <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d019      	beq.n	8003aac <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a78:	4b40      	ldr	r3, [pc, #256]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003a7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a7c:	4b3f      	ldr	r3, [pc, #252]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003a7e:	2101      	movs	r1, #1
 8003a80:	430a      	orrs	r2, r1
 8003a82:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a84:	f7ff f910 	bl	8002ca8 <HAL_GetTick>
 8003a88:	0003      	movs	r3, r0
 8003a8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a8e:	f7ff f90b 	bl	8002ca8 <HAL_GetTick>
 8003a92:	0002      	movs	r2, r0
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e1e2      	b.n	8003e66 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003aa0:	4b36      	ldr	r3, [pc, #216]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	d0f1      	beq.n	8003a8e <HAL_RCC_OscConfig+0x242>
 8003aaa:	e018      	b.n	8003ade <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003aac:	4b33      	ldr	r3, [pc, #204]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003aae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ab0:	4b32      	ldr	r3, [pc, #200]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	438a      	bics	r2, r1
 8003ab6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab8:	f7ff f8f6 	bl	8002ca8 <HAL_GetTick>
 8003abc:	0003      	movs	r3, r0
 8003abe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ac2:	f7ff f8f1 	bl	8002ca8 <HAL_GetTick>
 8003ac6:	0002      	movs	r2, r0
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e1c8      	b.n	8003e66 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ad4:	4b29      	ldr	r3, [pc, #164]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	2202      	movs	r2, #2
 8003ada:	4013      	ands	r3, r2
 8003adc:	d1f1      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2204      	movs	r2, #4
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d100      	bne.n	8003aea <HAL_RCC_OscConfig+0x29e>
 8003ae8:	e0b6      	b.n	8003c58 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aea:	231f      	movs	r3, #31
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	2200      	movs	r2, #0
 8003af0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003af2:	4b22      	ldr	r3, [pc, #136]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003af4:	69da      	ldr	r2, [r3, #28]
 8003af6:	2380      	movs	r3, #128	; 0x80
 8003af8:	055b      	lsls	r3, r3, #21
 8003afa:	4013      	ands	r3, r2
 8003afc:	d111      	bne.n	8003b22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003afe:	4b1f      	ldr	r3, [pc, #124]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003b00:	69da      	ldr	r2, [r3, #28]
 8003b02:	4b1e      	ldr	r3, [pc, #120]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003b04:	2180      	movs	r1, #128	; 0x80
 8003b06:	0549      	lsls	r1, r1, #21
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	61da      	str	r2, [r3, #28]
 8003b0c:	4b1b      	ldr	r3, [pc, #108]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003b0e:	69da      	ldr	r2, [r3, #28]
 8003b10:	2380      	movs	r3, #128	; 0x80
 8003b12:	055b      	lsls	r3, r3, #21
 8003b14:	4013      	ands	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]
 8003b18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003b1a:	231f      	movs	r3, #31
 8003b1c:	18fb      	adds	r3, r7, r3
 8003b1e:	2201      	movs	r2, #1
 8003b20:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b22:	4b19      	ldr	r3, [pc, #100]	; (8003b88 <HAL_RCC_OscConfig+0x33c>)
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	2380      	movs	r3, #128	; 0x80
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	d11a      	bne.n	8003b64 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b2e:	4b16      	ldr	r3, [pc, #88]	; (8003b88 <HAL_RCC_OscConfig+0x33c>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	4b15      	ldr	r3, [pc, #84]	; (8003b88 <HAL_RCC_OscConfig+0x33c>)
 8003b34:	2180      	movs	r1, #128	; 0x80
 8003b36:	0049      	lsls	r1, r1, #1
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b3c:	f7ff f8b4 	bl	8002ca8 <HAL_GetTick>
 8003b40:	0003      	movs	r3, r0
 8003b42:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b46:	f7ff f8af 	bl	8002ca8 <HAL_GetTick>
 8003b4a:	0002      	movs	r2, r0
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b64      	cmp	r3, #100	; 0x64
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e186      	b.n	8003e66 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b58:	4b0b      	ldr	r3, [pc, #44]	; (8003b88 <HAL_RCC_OscConfig+0x33c>)
 8003b5a:	681a      	ldr	r2, [r3, #0]
 8003b5c:	2380      	movs	r3, #128	; 0x80
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	4013      	ands	r3, r2
 8003b62:	d0f0      	beq.n	8003b46 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d10f      	bne.n	8003b8c <HAL_RCC_OscConfig+0x340>
 8003b6c:	4b03      	ldr	r3, [pc, #12]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003b6e:	6a1a      	ldr	r2, [r3, #32]
 8003b70:	4b02      	ldr	r3, [pc, #8]	; (8003b7c <HAL_RCC_OscConfig+0x330>)
 8003b72:	2101      	movs	r1, #1
 8003b74:	430a      	orrs	r2, r1
 8003b76:	621a      	str	r2, [r3, #32]
 8003b78:	e036      	b.n	8003be8 <HAL_RCC_OscConfig+0x39c>
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	fffeffff 	.word	0xfffeffff
 8003b84:	fffbffff 	.word	0xfffbffff
 8003b88:	40007000 	.word	0x40007000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10c      	bne.n	8003bae <HAL_RCC_OscConfig+0x362>
 8003b94:	4bb6      	ldr	r3, [pc, #728]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003b96:	6a1a      	ldr	r2, [r3, #32]
 8003b98:	4bb5      	ldr	r3, [pc, #724]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	438a      	bics	r2, r1
 8003b9e:	621a      	str	r2, [r3, #32]
 8003ba0:	4bb3      	ldr	r3, [pc, #716]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003ba2:	6a1a      	ldr	r2, [r3, #32]
 8003ba4:	4bb2      	ldr	r3, [pc, #712]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003ba6:	2104      	movs	r1, #4
 8003ba8:	438a      	bics	r2, r1
 8003baa:	621a      	str	r2, [r3, #32]
 8003bac:	e01c      	b.n	8003be8 <HAL_RCC_OscConfig+0x39c>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	2b05      	cmp	r3, #5
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x384>
 8003bb6:	4bae      	ldr	r3, [pc, #696]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003bb8:	6a1a      	ldr	r2, [r3, #32]
 8003bba:	4bad      	ldr	r3, [pc, #692]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003bbc:	2104      	movs	r1, #4
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	621a      	str	r2, [r3, #32]
 8003bc2:	4bab      	ldr	r3, [pc, #684]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003bc4:	6a1a      	ldr	r2, [r3, #32]
 8003bc6:	4baa      	ldr	r3, [pc, #680]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003bc8:	2101      	movs	r1, #1
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	621a      	str	r2, [r3, #32]
 8003bce:	e00b      	b.n	8003be8 <HAL_RCC_OscConfig+0x39c>
 8003bd0:	4ba7      	ldr	r3, [pc, #668]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003bd2:	6a1a      	ldr	r2, [r3, #32]
 8003bd4:	4ba6      	ldr	r3, [pc, #664]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	438a      	bics	r2, r1
 8003bda:	621a      	str	r2, [r3, #32]
 8003bdc:	4ba4      	ldr	r3, [pc, #656]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003bde:	6a1a      	ldr	r2, [r3, #32]
 8003be0:	4ba3      	ldr	r3, [pc, #652]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003be2:	2104      	movs	r1, #4
 8003be4:	438a      	bics	r2, r1
 8003be6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d014      	beq.n	8003c1a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bf0:	f7ff f85a 	bl	8002ca8 <HAL_GetTick>
 8003bf4:	0003      	movs	r3, r0
 8003bf6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf8:	e009      	b.n	8003c0e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bfa:	f7ff f855 	bl	8002ca8 <HAL_GetTick>
 8003bfe:	0002      	movs	r2, r0
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	4a9b      	ldr	r2, [pc, #620]	; (8003e74 <HAL_RCC_OscConfig+0x628>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e12b      	b.n	8003e66 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0e:	4b98      	ldr	r3, [pc, #608]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	2202      	movs	r2, #2
 8003c14:	4013      	ands	r3, r2
 8003c16:	d0f0      	beq.n	8003bfa <HAL_RCC_OscConfig+0x3ae>
 8003c18:	e013      	b.n	8003c42 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1a:	f7ff f845 	bl	8002ca8 <HAL_GetTick>
 8003c1e:	0003      	movs	r3, r0
 8003c20:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c22:	e009      	b.n	8003c38 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c24:	f7ff f840 	bl	8002ca8 <HAL_GetTick>
 8003c28:	0002      	movs	r2, r0
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	4a91      	ldr	r2, [pc, #580]	; (8003e74 <HAL_RCC_OscConfig+0x628>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d901      	bls.n	8003c38 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	e116      	b.n	8003e66 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c38:	4b8d      	ldr	r3, [pc, #564]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003c3a:	6a1b      	ldr	r3, [r3, #32]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	4013      	ands	r3, r2
 8003c40:	d1f0      	bne.n	8003c24 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c42:	231f      	movs	r3, #31
 8003c44:	18fb      	adds	r3, r7, r3
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d105      	bne.n	8003c58 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c4c:	4b88      	ldr	r3, [pc, #544]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003c4e:	69da      	ldr	r2, [r3, #28]
 8003c50:	4b87      	ldr	r3, [pc, #540]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003c52:	4989      	ldr	r1, [pc, #548]	; (8003e78 <HAL_RCC_OscConfig+0x62c>)
 8003c54:	400a      	ands	r2, r1
 8003c56:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2210      	movs	r2, #16
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d063      	beq.n	8003d2a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d12a      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003c6a:	4b81      	ldr	r3, [pc, #516]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003c6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c6e:	4b80      	ldr	r3, [pc, #512]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003c70:	2104      	movs	r1, #4
 8003c72:	430a      	orrs	r2, r1
 8003c74:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003c76:	4b7e      	ldr	r3, [pc, #504]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003c78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c7a:	4b7d      	ldr	r3, [pc, #500]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003c7c:	2101      	movs	r1, #1
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c82:	f7ff f811 	bl	8002ca8 <HAL_GetTick>
 8003c86:	0003      	movs	r3, r0
 8003c88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003c8a:	e008      	b.n	8003c9e <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003c8c:	f7ff f80c 	bl	8002ca8 <HAL_GetTick>
 8003c90:	0002      	movs	r2, r0
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d901      	bls.n	8003c9e <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e0e3      	b.n	8003e66 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003c9e:	4b74      	ldr	r3, [pc, #464]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	d0f1      	beq.n	8003c8c <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003ca8:	4b71      	ldr	r3, [pc, #452]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cac:	22f8      	movs	r2, #248	; 0xf8
 8003cae:	4393      	bics	r3, r2
 8003cb0:	0019      	movs	r1, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	00da      	lsls	r2, r3, #3
 8003cb8:	4b6d      	ldr	r3, [pc, #436]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	635a      	str	r2, [r3, #52]	; 0x34
 8003cbe:	e034      	b.n	8003d2a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	695b      	ldr	r3, [r3, #20]
 8003cc4:	3305      	adds	r3, #5
 8003cc6:	d111      	bne.n	8003cec <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003cc8:	4b69      	ldr	r3, [pc, #420]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ccc:	4b68      	ldr	r3, [pc, #416]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003cce:	2104      	movs	r1, #4
 8003cd0:	438a      	bics	r2, r1
 8003cd2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003cd4:	4b66      	ldr	r3, [pc, #408]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd8:	22f8      	movs	r2, #248	; 0xf8
 8003cda:	4393      	bics	r3, r2
 8003cdc:	0019      	movs	r1, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	699b      	ldr	r3, [r3, #24]
 8003ce2:	00da      	lsls	r2, r3, #3
 8003ce4:	4b62      	ldr	r3, [pc, #392]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	635a      	str	r2, [r3, #52]	; 0x34
 8003cea:	e01e      	b.n	8003d2a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003cec:	4b60      	ldr	r3, [pc, #384]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003cee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cf0:	4b5f      	ldr	r3, [pc, #380]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003cf2:	2104      	movs	r1, #4
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003cf8:	4b5d      	ldr	r3, [pc, #372]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cfc:	4b5c      	ldr	r3, [pc, #368]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003cfe:	2101      	movs	r1, #1
 8003d00:	438a      	bics	r2, r1
 8003d02:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d04:	f7fe ffd0 	bl	8002ca8 <HAL_GetTick>
 8003d08:	0003      	movs	r3, r0
 8003d0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003d0e:	f7fe ffcb 	bl	8002ca8 <HAL_GetTick>
 8003d12:	0002      	movs	r2, r0
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e0a2      	b.n	8003e66 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003d20:	4b53      	ldr	r3, [pc, #332]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d24:	2202      	movs	r2, #2
 8003d26:	4013      	ands	r3, r2
 8003d28:	d1f1      	bne.n	8003d0e <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d100      	bne.n	8003d34 <HAL_RCC_OscConfig+0x4e8>
 8003d32:	e097      	b.n	8003e64 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d34:	4b4e      	ldr	r3, [pc, #312]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	220c      	movs	r2, #12
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d100      	bne.n	8003d42 <HAL_RCC_OscConfig+0x4f6>
 8003d40:	e06b      	b.n	8003e1a <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d14c      	bne.n	8003de4 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d4a:	4b49      	ldr	r3, [pc, #292]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	4b48      	ldr	r3, [pc, #288]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003d50:	494a      	ldr	r1, [pc, #296]	; (8003e7c <HAL_RCC_OscConfig+0x630>)
 8003d52:	400a      	ands	r2, r1
 8003d54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d56:	f7fe ffa7 	bl	8002ca8 <HAL_GetTick>
 8003d5a:	0003      	movs	r3, r0
 8003d5c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d5e:	e008      	b.n	8003d72 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d60:	f7fe ffa2 	bl	8002ca8 <HAL_GetTick>
 8003d64:	0002      	movs	r2, r0
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d901      	bls.n	8003d72 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e079      	b.n	8003e66 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d72:	4b3f      	ldr	r3, [pc, #252]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	2380      	movs	r3, #128	; 0x80
 8003d78:	049b      	lsls	r3, r3, #18
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	d1f0      	bne.n	8003d60 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d7e:	4b3c      	ldr	r3, [pc, #240]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d82:	220f      	movs	r2, #15
 8003d84:	4393      	bics	r3, r2
 8003d86:	0019      	movs	r1, r3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8c:	4b38      	ldr	r3, [pc, #224]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d92:	4b37      	ldr	r3, [pc, #220]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	4a3a      	ldr	r2, [pc, #232]	; (8003e80 <HAL_RCC_OscConfig+0x634>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	0019      	movs	r1, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	431a      	orrs	r2, r3
 8003da6:	4b32      	ldr	r3, [pc, #200]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003da8:	430a      	orrs	r2, r1
 8003daa:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dac:	4b30      	ldr	r3, [pc, #192]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	4b2f      	ldr	r3, [pc, #188]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003db2:	2180      	movs	r1, #128	; 0x80
 8003db4:	0449      	lsls	r1, r1, #17
 8003db6:	430a      	orrs	r2, r1
 8003db8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dba:	f7fe ff75 	bl	8002ca8 <HAL_GetTick>
 8003dbe:	0003      	movs	r3, r0
 8003dc0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dc4:	f7fe ff70 	bl	8002ca8 <HAL_GetTick>
 8003dc8:	0002      	movs	r2, r0
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b02      	cmp	r3, #2
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e047      	b.n	8003e66 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dd6:	4b26      	ldr	r3, [pc, #152]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	2380      	movs	r3, #128	; 0x80
 8003ddc:	049b      	lsls	r3, r3, #18
 8003dde:	4013      	ands	r3, r2
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x578>
 8003de2:	e03f      	b.n	8003e64 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003de4:	4b22      	ldr	r3, [pc, #136]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	4b21      	ldr	r3, [pc, #132]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003dea:	4924      	ldr	r1, [pc, #144]	; (8003e7c <HAL_RCC_OscConfig+0x630>)
 8003dec:	400a      	ands	r2, r1
 8003dee:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df0:	f7fe ff5a 	bl	8002ca8 <HAL_GetTick>
 8003df4:	0003      	movs	r3, r0
 8003df6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dfa:	f7fe ff55 	bl	8002ca8 <HAL_GetTick>
 8003dfe:	0002      	movs	r2, r0
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e02c      	b.n	8003e66 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e0c:	4b18      	ldr	r3, [pc, #96]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	2380      	movs	r3, #128	; 0x80
 8003e12:	049b      	lsls	r3, r3, #18
 8003e14:	4013      	ands	r3, r2
 8003e16:	d1f0      	bne.n	8003dfa <HAL_RCC_OscConfig+0x5ae>
 8003e18:	e024      	b.n	8003e64 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e01f      	b.n	8003e66 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003e26:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003e2c:	4b10      	ldr	r3, [pc, #64]	; (8003e70 <HAL_RCC_OscConfig+0x624>)
 8003e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e30:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	2380      	movs	r3, #128	; 0x80
 8003e36:	025b      	lsls	r3, r3, #9
 8003e38:	401a      	ands	r2, r3
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d10e      	bne.n	8003e60 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	220f      	movs	r2, #15
 8003e46:	401a      	ands	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d107      	bne.n	8003e60 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	23f0      	movs	r3, #240	; 0xf0
 8003e54:	039b      	lsls	r3, r3, #14
 8003e56:	401a      	ands	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d001      	beq.n	8003e64 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e000      	b.n	8003e66 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	0018      	movs	r0, r3
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	b008      	add	sp, #32
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	40021000 	.word	0x40021000
 8003e74:	00001388 	.word	0x00001388
 8003e78:	efffffff 	.word	0xefffffff
 8003e7c:	feffffff 	.word	0xfeffffff
 8003e80:	ffc2ffff 	.word	0xffc2ffff

08003e84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d101      	bne.n	8003e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0b3      	b.n	8004000 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e98:	4b5b      	ldr	r3, [pc, #364]	; (8004008 <HAL_RCC_ClockConfig+0x184>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d911      	bls.n	8003eca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ea6:	4b58      	ldr	r3, [pc, #352]	; (8004008 <HAL_RCC_ClockConfig+0x184>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	4393      	bics	r3, r2
 8003eae:	0019      	movs	r1, r3
 8003eb0:	4b55      	ldr	r3, [pc, #340]	; (8004008 <HAL_RCC_ClockConfig+0x184>)
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb8:	4b53      	ldr	r3, [pc, #332]	; (8004008 <HAL_RCC_ClockConfig+0x184>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	683a      	ldr	r2, [r7, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d001      	beq.n	8003eca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e09a      	b.n	8004000 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	d015      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	2204      	movs	r2, #4
 8003eda:	4013      	ands	r3, r2
 8003edc:	d006      	beq.n	8003eec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003ede:	4b4b      	ldr	r3, [pc, #300]	; (800400c <HAL_RCC_ClockConfig+0x188>)
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	4b4a      	ldr	r3, [pc, #296]	; (800400c <HAL_RCC_ClockConfig+0x188>)
 8003ee4:	21e0      	movs	r1, #224	; 0xe0
 8003ee6:	00c9      	lsls	r1, r1, #3
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003eec:	4b47      	ldr	r3, [pc, #284]	; (800400c <HAL_RCC_ClockConfig+0x188>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	22f0      	movs	r2, #240	; 0xf0
 8003ef2:	4393      	bics	r3, r2
 8003ef4:	0019      	movs	r1, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689a      	ldr	r2, [r3, #8]
 8003efa:	4b44      	ldr	r3, [pc, #272]	; (800400c <HAL_RCC_ClockConfig+0x188>)
 8003efc:	430a      	orrs	r2, r1
 8003efe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2201      	movs	r2, #1
 8003f06:	4013      	ands	r3, r2
 8003f08:	d040      	beq.n	8003f8c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d107      	bne.n	8003f22 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f12:	4b3e      	ldr	r3, [pc, #248]	; (800400c <HAL_RCC_ClockConfig+0x188>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	2380      	movs	r3, #128	; 0x80
 8003f18:	029b      	lsls	r3, r3, #10
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	d114      	bne.n	8003f48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e06e      	b.n	8004000 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d107      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f2a:	4b38      	ldr	r3, [pc, #224]	; (800400c <HAL_RCC_ClockConfig+0x188>)
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	2380      	movs	r3, #128	; 0x80
 8003f30:	049b      	lsls	r3, r3, #18
 8003f32:	4013      	ands	r3, r2
 8003f34:	d108      	bne.n	8003f48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e062      	b.n	8004000 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f3a:	4b34      	ldr	r3, [pc, #208]	; (800400c <HAL_RCC_ClockConfig+0x188>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	4013      	ands	r3, r2
 8003f42:	d101      	bne.n	8003f48 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e05b      	b.n	8004000 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f48:	4b30      	ldr	r3, [pc, #192]	; (800400c <HAL_RCC_ClockConfig+0x188>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2203      	movs	r2, #3
 8003f4e:	4393      	bics	r3, r2
 8003f50:	0019      	movs	r1, r3
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	4b2d      	ldr	r3, [pc, #180]	; (800400c <HAL_RCC_ClockConfig+0x188>)
 8003f58:	430a      	orrs	r2, r1
 8003f5a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f5c:	f7fe fea4 	bl	8002ca8 <HAL_GetTick>
 8003f60:	0003      	movs	r3, r0
 8003f62:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f64:	e009      	b.n	8003f7a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f66:	f7fe fe9f 	bl	8002ca8 <HAL_GetTick>
 8003f6a:	0002      	movs	r2, r0
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	4a27      	ldr	r2, [pc, #156]	; (8004010 <HAL_RCC_ClockConfig+0x18c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d901      	bls.n	8003f7a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e042      	b.n	8004000 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7a:	4b24      	ldr	r3, [pc, #144]	; (800400c <HAL_RCC_ClockConfig+0x188>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	220c      	movs	r2, #12
 8003f80:	401a      	ands	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d1ec      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f8c:	4b1e      	ldr	r3, [pc, #120]	; (8004008 <HAL_RCC_ClockConfig+0x184>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2201      	movs	r2, #1
 8003f92:	4013      	ands	r3, r2
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d211      	bcs.n	8003fbe <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f9a:	4b1b      	ldr	r3, [pc, #108]	; (8004008 <HAL_RCC_ClockConfig+0x184>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	4393      	bics	r3, r2
 8003fa2:	0019      	movs	r1, r3
 8003fa4:	4b18      	ldr	r3, [pc, #96]	; (8004008 <HAL_RCC_ClockConfig+0x184>)
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fac:	4b16      	ldr	r3, [pc, #88]	; (8004008 <HAL_RCC_ClockConfig+0x184>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d001      	beq.n	8003fbe <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e020      	b.n	8004000 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2204      	movs	r2, #4
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	d009      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003fc8:	4b10      	ldr	r3, [pc, #64]	; (800400c <HAL_RCC_ClockConfig+0x188>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	4a11      	ldr	r2, [pc, #68]	; (8004014 <HAL_RCC_ClockConfig+0x190>)
 8003fce:	4013      	ands	r3, r2
 8003fd0:	0019      	movs	r1, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	4b0d      	ldr	r3, [pc, #52]	; (800400c <HAL_RCC_ClockConfig+0x188>)
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003fdc:	f000 f820 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 8003fe0:	0001      	movs	r1, r0
 8003fe2:	4b0a      	ldr	r3, [pc, #40]	; (800400c <HAL_RCC_ClockConfig+0x188>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	091b      	lsrs	r3, r3, #4
 8003fe8:	220f      	movs	r2, #15
 8003fea:	4013      	ands	r3, r2
 8003fec:	4a0a      	ldr	r2, [pc, #40]	; (8004018 <HAL_RCC_ClockConfig+0x194>)
 8003fee:	5cd3      	ldrb	r3, [r2, r3]
 8003ff0:	000a      	movs	r2, r1
 8003ff2:	40da      	lsrs	r2, r3
 8003ff4:	4b09      	ldr	r3, [pc, #36]	; (800401c <HAL_RCC_ClockConfig+0x198>)
 8003ff6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	f7fe fe0f 	bl	8002c1c <HAL_InitTick>
  
  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	0018      	movs	r0, r3
 8004002:	46bd      	mov	sp, r7
 8004004:	b004      	add	sp, #16
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40022000 	.word	0x40022000
 800400c:	40021000 	.word	0x40021000
 8004010:	00001388 	.word	0x00001388
 8004014:	fffff8ff 	.word	0xfffff8ff
 8004018:	08005d04 	.word	0x08005d04
 800401c:	20000000 	.word	0x20000000

08004020 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004020:	b590      	push	{r4, r7, lr}
 8004022:	b08f      	sub	sp, #60	; 0x3c
 8004024:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004026:	2314      	movs	r3, #20
 8004028:	18fb      	adds	r3, r7, r3
 800402a:	4a2b      	ldr	r2, [pc, #172]	; (80040d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800402c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800402e:	c313      	stmia	r3!, {r0, r1, r4}
 8004030:	6812      	ldr	r2, [r2, #0]
 8004032:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004034:	1d3b      	adds	r3, r7, #4
 8004036:	4a29      	ldr	r2, [pc, #164]	; (80040dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004038:	ca13      	ldmia	r2!, {r0, r1, r4}
 800403a:	c313      	stmia	r3!, {r0, r1, r4}
 800403c:	6812      	ldr	r2, [r2, #0]
 800403e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004040:	2300      	movs	r3, #0
 8004042:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004044:	2300      	movs	r3, #0
 8004046:	62bb      	str	r3, [r7, #40]	; 0x28
 8004048:	2300      	movs	r3, #0
 800404a:	637b      	str	r3, [r7, #52]	; 0x34
 800404c:	2300      	movs	r3, #0
 800404e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004050:	2300      	movs	r3, #0
 8004052:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004054:	4b22      	ldr	r3, [pc, #136]	; (80040e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800405a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405c:	220c      	movs	r2, #12
 800405e:	4013      	ands	r3, r2
 8004060:	2b04      	cmp	r3, #4
 8004062:	d002      	beq.n	800406a <HAL_RCC_GetSysClockFreq+0x4a>
 8004064:	2b08      	cmp	r3, #8
 8004066:	d003      	beq.n	8004070 <HAL_RCC_GetSysClockFreq+0x50>
 8004068:	e02d      	b.n	80040c6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800406a:	4b1e      	ldr	r3, [pc, #120]	; (80040e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800406c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800406e:	e02d      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004072:	0c9b      	lsrs	r3, r3, #18
 8004074:	220f      	movs	r2, #15
 8004076:	4013      	ands	r3, r2
 8004078:	2214      	movs	r2, #20
 800407a:	18ba      	adds	r2, r7, r2
 800407c:	5cd3      	ldrb	r3, [r2, r3]
 800407e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004080:	4b17      	ldr	r3, [pc, #92]	; (80040e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	220f      	movs	r2, #15
 8004086:	4013      	ands	r3, r2
 8004088:	1d3a      	adds	r2, r7, #4
 800408a:	5cd3      	ldrb	r3, [r2, r3]
 800408c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800408e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004090:	2380      	movs	r3, #128	; 0x80
 8004092:	025b      	lsls	r3, r3, #9
 8004094:	4013      	ands	r3, r2
 8004096:	d009      	beq.n	80040ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004098:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800409a:	4812      	ldr	r0, [pc, #72]	; (80040e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800409c:	f7fc f834 	bl	8000108 <__udivsi3>
 80040a0:	0003      	movs	r3, r0
 80040a2:	001a      	movs	r2, r3
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	4353      	muls	r3, r2
 80040a8:	637b      	str	r3, [r7, #52]	; 0x34
 80040aa:	e009      	b.n	80040c0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80040ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040ae:	000a      	movs	r2, r1
 80040b0:	0152      	lsls	r2, r2, #5
 80040b2:	1a52      	subs	r2, r2, r1
 80040b4:	0193      	lsls	r3, r2, #6
 80040b6:	1a9b      	subs	r3, r3, r2
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	185b      	adds	r3, r3, r1
 80040bc:	021b      	lsls	r3, r3, #8
 80040be:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80040c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80040c4:	e002      	b.n	80040cc <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040c6:	4b07      	ldr	r3, [pc, #28]	; (80040e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80040c8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80040ca:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80040cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80040ce:	0018      	movs	r0, r3
 80040d0:	46bd      	mov	sp, r7
 80040d2:	b00f      	add	sp, #60	; 0x3c
 80040d4:	bd90      	pop	{r4, r7, pc}
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	08005be4 	.word	0x08005be4
 80040dc:	08005bf4 	.word	0x08005bf4
 80040e0:	40021000 	.word	0x40021000
 80040e4:	007a1200 	.word	0x007a1200

080040e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040ec:	4b02      	ldr	r3, [pc, #8]	; (80040f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80040ee:	681b      	ldr	r3, [r3, #0]
}
 80040f0:	0018      	movs	r0, r3
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	46c0      	nop			; (mov r8, r8)
 80040f8:	20000000 	.word	0x20000000

080040fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004100:	f7ff fff2 	bl	80040e8 <HAL_RCC_GetHCLKFreq>
 8004104:	0001      	movs	r1, r0
 8004106:	4b06      	ldr	r3, [pc, #24]	; (8004120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	0a1b      	lsrs	r3, r3, #8
 800410c:	2207      	movs	r2, #7
 800410e:	4013      	ands	r3, r2
 8004110:	4a04      	ldr	r2, [pc, #16]	; (8004124 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004112:	5cd3      	ldrb	r3, [r2, r3]
 8004114:	40d9      	lsrs	r1, r3
 8004116:	000b      	movs	r3, r1
}    
 8004118:	0018      	movs	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	40021000 	.word	0x40021000
 8004124:	08005d14 	.word	0x08005d14

08004128 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004130:	2300      	movs	r3, #0
 8004132:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004134:	2300      	movs	r3, #0
 8004136:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	2380      	movs	r3, #128	; 0x80
 800413e:	025b      	lsls	r3, r3, #9
 8004140:	4013      	ands	r3, r2
 8004142:	d100      	bne.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004144:	e08f      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004146:	2317      	movs	r3, #23
 8004148:	18fb      	adds	r3, r7, r3
 800414a:	2200      	movs	r2, #0
 800414c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800414e:	4b57      	ldr	r3, [pc, #348]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004150:	69da      	ldr	r2, [r3, #28]
 8004152:	2380      	movs	r3, #128	; 0x80
 8004154:	055b      	lsls	r3, r3, #21
 8004156:	4013      	ands	r3, r2
 8004158:	d111      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800415a:	4b54      	ldr	r3, [pc, #336]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800415c:	69da      	ldr	r2, [r3, #28]
 800415e:	4b53      	ldr	r3, [pc, #332]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004160:	2180      	movs	r1, #128	; 0x80
 8004162:	0549      	lsls	r1, r1, #21
 8004164:	430a      	orrs	r2, r1
 8004166:	61da      	str	r2, [r3, #28]
 8004168:	4b50      	ldr	r3, [pc, #320]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800416a:	69da      	ldr	r2, [r3, #28]
 800416c:	2380      	movs	r3, #128	; 0x80
 800416e:	055b      	lsls	r3, r3, #21
 8004170:	4013      	ands	r3, r2
 8004172:	60bb      	str	r3, [r7, #8]
 8004174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004176:	2317      	movs	r3, #23
 8004178:	18fb      	adds	r3, r7, r3
 800417a:	2201      	movs	r2, #1
 800417c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800417e:	4b4c      	ldr	r3, [pc, #304]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	2380      	movs	r3, #128	; 0x80
 8004184:	005b      	lsls	r3, r3, #1
 8004186:	4013      	ands	r3, r2
 8004188:	d11a      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800418a:	4b49      	ldr	r3, [pc, #292]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	4b48      	ldr	r3, [pc, #288]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004190:	2180      	movs	r1, #128	; 0x80
 8004192:	0049      	lsls	r1, r1, #1
 8004194:	430a      	orrs	r2, r1
 8004196:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004198:	f7fe fd86 	bl	8002ca8 <HAL_GetTick>
 800419c:	0003      	movs	r3, r0
 800419e:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a0:	e008      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a2:	f7fe fd81 	bl	8002ca8 <HAL_GetTick>
 80041a6:	0002      	movs	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b64      	cmp	r3, #100	; 0x64
 80041ae:	d901      	bls.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e077      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041b4:	4b3e      	ldr	r3, [pc, #248]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	2380      	movs	r3, #128	; 0x80
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	4013      	ands	r3, r2
 80041be:	d0f0      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041c0:	4b3a      	ldr	r3, [pc, #232]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041c2:	6a1a      	ldr	r2, [r3, #32]
 80041c4:	23c0      	movs	r3, #192	; 0xc0
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4013      	ands	r3, r2
 80041ca:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d034      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x114>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685a      	ldr	r2, [r3, #4]
 80041d6:	23c0      	movs	r3, #192	; 0xc0
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4013      	ands	r3, r2
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d02c      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041e2:	4b32      	ldr	r3, [pc, #200]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041e4:	6a1b      	ldr	r3, [r3, #32]
 80041e6:	4a33      	ldr	r2, [pc, #204]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041ec:	4b2f      	ldr	r3, [pc, #188]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041ee:	6a1a      	ldr	r2, [r3, #32]
 80041f0:	4b2e      	ldr	r3, [pc, #184]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041f2:	2180      	movs	r1, #128	; 0x80
 80041f4:	0249      	lsls	r1, r1, #9
 80041f6:	430a      	orrs	r2, r1
 80041f8:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041fa:	4b2c      	ldr	r3, [pc, #176]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80041fc:	6a1a      	ldr	r2, [r3, #32]
 80041fe:	4b2b      	ldr	r3, [pc, #172]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004200:	492d      	ldr	r1, [pc, #180]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004202:	400a      	ands	r2, r1
 8004204:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004206:	4b29      	ldr	r3, [pc, #164]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2201      	movs	r2, #1
 8004210:	4013      	ands	r3, r2
 8004212:	d013      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004214:	f7fe fd48 	bl	8002ca8 <HAL_GetTick>
 8004218:	0003      	movs	r3, r0
 800421a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421c:	e009      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800421e:	f7fe fd43 	bl	8002ca8 <HAL_GetTick>
 8004222:	0002      	movs	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	4a24      	ldr	r2, [pc, #144]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d901      	bls.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e038      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004232:	4b1e      	ldr	r3, [pc, #120]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	2202      	movs	r2, #2
 8004238:	4013      	ands	r3, r2
 800423a:	d0f0      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800423c:	4b1b      	ldr	r3, [pc, #108]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800423e:	6a1b      	ldr	r3, [r3, #32]
 8004240:	4a1c      	ldr	r2, [pc, #112]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004242:	4013      	ands	r3, r2
 8004244:	0019      	movs	r1, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	4b18      	ldr	r3, [pc, #96]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800424c:	430a      	orrs	r2, r1
 800424e:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004250:	2317      	movs	r3, #23
 8004252:	18fb      	adds	r3, r7, r3
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d105      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800425a:	4b14      	ldr	r3, [pc, #80]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800425c:	69da      	ldr	r2, [r3, #28]
 800425e:	4b13      	ldr	r3, [pc, #76]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004260:	4917      	ldr	r1, [pc, #92]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004262:	400a      	ands	r2, r1
 8004264:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2201      	movs	r2, #1
 800426c:	4013      	ands	r3, r2
 800426e:	d009      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004270:	4b0e      	ldr	r3, [pc, #56]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004274:	2203      	movs	r2, #3
 8004276:	4393      	bics	r3, r2
 8004278:	0019      	movs	r1, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	689a      	ldr	r2, [r3, #8]
 800427e:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004280:	430a      	orrs	r2, r1
 8004282:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2220      	movs	r2, #32
 800428a:	4013      	ands	r3, r2
 800428c:	d009      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800428e:	4b07      	ldr	r3, [pc, #28]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004292:	2210      	movs	r2, #16
 8004294:	4393      	bics	r3, r2
 8004296:	0019      	movs	r1, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68da      	ldr	r2, [r3, #12]
 800429c:	4b03      	ldr	r3, [pc, #12]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800429e:	430a      	orrs	r2, r1
 80042a0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	0018      	movs	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	b006      	add	sp, #24
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40021000 	.word	0x40021000
 80042b0:	40007000 	.word	0x40007000
 80042b4:	fffffcff 	.word	0xfffffcff
 80042b8:	fffeffff 	.word	0xfffeffff
 80042bc:	00001388 	.word	0x00001388
 80042c0:	efffffff 	.word	0xefffffff

080042c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e08a      	b.n	80043ec <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	225d      	movs	r2, #93	; 0x5d
 80042e0:	5c9b      	ldrb	r3, [r3, r2]
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d107      	bne.n	80042f8 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	225c      	movs	r2, #92	; 0x5c
 80042ec:	2100      	movs	r1, #0
 80042ee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	0018      	movs	r0, r3
 80042f4:	f7fe fb9c 	bl	8002a30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	225d      	movs	r2, #93	; 0x5d
 80042fc:	2102      	movs	r1, #2
 80042fe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2140      	movs	r1, #64	; 0x40
 800430c:	438a      	bics	r2, r1
 800430e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	23e0      	movs	r3, #224	; 0xe0
 8004316:	00db      	lsls	r3, r3, #3
 8004318:	429a      	cmp	r2, r3
 800431a:	d902      	bls.n	8004322 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800431c:	2300      	movs	r3, #0
 800431e:	60fb      	str	r3, [r7, #12]
 8004320:	e002      	b.n	8004328 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004322:	2380      	movs	r3, #128	; 0x80
 8004324:	015b      	lsls	r3, r3, #5
 8004326:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	23f0      	movs	r3, #240	; 0xf0
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	429a      	cmp	r2, r3
 8004332:	d008      	beq.n	8004346 <HAL_SPI_Init+0x82>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	68da      	ldr	r2, [r3, #12]
 8004338:	23e0      	movs	r3, #224	; 0xe0
 800433a:	00db      	lsls	r3, r3, #3
 800433c:	429a      	cmp	r2, r3
 800433e:	d002      	beq.n	8004346 <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10c      	bne.n	8004368 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	23e0      	movs	r3, #224	; 0xe0
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	429a      	cmp	r2, r3
 8004358:	d903      	bls.n	8004362 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2202      	movs	r2, #2
 800435e:	631a      	str	r2, [r3, #48]	; 0x30
 8004360:	e002      	b.n	8004368 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2201      	movs	r2, #1
 8004366:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	431a      	orrs	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6999      	ldr	r1, [r3, #24]
 8004382:	2380      	movs	r3, #128	; 0x80
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	400b      	ands	r3, r1
 8004388:	431a      	orrs	r2, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	69db      	ldr	r3, [r3, #28]
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	431a      	orrs	r2, r3
 8004396:	0011      	movs	r1, r2
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	0c1b      	lsrs	r3, r3, #16
 80043aa:	2204      	movs	r2, #4
 80043ac:	401a      	ands	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043b8:	431a      	orrs	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	431a      	orrs	r2, r3
 80043c0:	0011      	movs	r1, r2
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	69da      	ldr	r2, [r3, #28]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4907      	ldr	r1, [pc, #28]	; (80043f4 <HAL_SPI_Init+0x130>)
 80043d8:	400a      	ands	r2, r1
 80043da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	225d      	movs	r2, #93	; 0x5d
 80043e6:	2101      	movs	r1, #1
 80043e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	0018      	movs	r0, r3
 80043ee:	46bd      	mov	sp, r7
 80043f0:	b004      	add	sp, #16
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	fffff7ff 	.word	0xfffff7ff

080043f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b088      	sub	sp, #32
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	1dbb      	adds	r3, r7, #6
 8004406:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004408:	231f      	movs	r3, #31
 800440a:	18fb      	adds	r3, r7, r3
 800440c:	2200      	movs	r2, #0
 800440e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	225c      	movs	r2, #92	; 0x5c
 8004414:	5c9b      	ldrb	r3, [r3, r2]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <HAL_SPI_Transmit+0x26>
 800441a:	2302      	movs	r3, #2
 800441c:	e169      	b.n	80046f2 <HAL_SPI_Transmit+0x2fa>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	225c      	movs	r2, #92	; 0x5c
 8004422:	2101      	movs	r1, #1
 8004424:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004426:	f7fe fc3f 	bl	8002ca8 <HAL_GetTick>
 800442a:	0003      	movs	r3, r0
 800442c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800442e:	2316      	movs	r3, #22
 8004430:	18fb      	adds	r3, r7, r3
 8004432:	1dba      	adds	r2, r7, #6
 8004434:	8812      	ldrh	r2, [r2, #0]
 8004436:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	225d      	movs	r2, #93	; 0x5d
 800443c:	5c9b      	ldrb	r3, [r3, r2]
 800443e:	b2db      	uxtb	r3, r3
 8004440:	2b01      	cmp	r3, #1
 8004442:	d004      	beq.n	800444e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8004444:	231f      	movs	r3, #31
 8004446:	18fb      	adds	r3, r7, r3
 8004448:	2202      	movs	r2, #2
 800444a:	701a      	strb	r2, [r3, #0]
    goto error;
 800444c:	e146      	b.n	80046dc <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <HAL_SPI_Transmit+0x64>
 8004454:	1dbb      	adds	r3, r7, #6
 8004456:	881b      	ldrh	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d104      	bne.n	8004466 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800445c:	231f      	movs	r3, #31
 800445e:	18fb      	adds	r3, r7, r3
 8004460:	2201      	movs	r2, #1
 8004462:	701a      	strb	r2, [r3, #0]
    goto error;
 8004464:	e13a      	b.n	80046dc <HAL_SPI_Transmit+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	225d      	movs	r2, #93	; 0x5d
 800446a:	2103      	movs	r1, #3
 800446c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	1dba      	adds	r2, r7, #6
 800447e:	8812      	ldrh	r2, [r2, #0]
 8004480:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	1dba      	adds	r2, r7, #6
 8004486:	8812      	ldrh	r2, [r2, #0]
 8004488:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2244      	movs	r2, #68	; 0x44
 8004494:	2100      	movs	r1, #0
 8004496:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2246      	movs	r2, #70	; 0x46
 800449c:	2100      	movs	r1, #0
 800449e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	021b      	lsls	r3, r3, #8
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d108      	bne.n	80044ca <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2180      	movs	r1, #128	; 0x80
 80044c4:	01c9      	lsls	r1, r1, #7
 80044c6:	430a      	orrs	r2, r1
 80044c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2240      	movs	r2, #64	; 0x40
 80044d2:	4013      	ands	r3, r2
 80044d4:	2b40      	cmp	r3, #64	; 0x40
 80044d6:	d007      	beq.n	80044e8 <HAL_SPI_Transmit+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2140      	movs	r1, #64	; 0x40
 80044e4:	430a      	orrs	r2, r1
 80044e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	23e0      	movs	r3, #224	; 0xe0
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d94e      	bls.n	8004592 <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d004      	beq.n	8004506 <HAL_SPI_Transmit+0x10e>
 80044fc:	2316      	movs	r3, #22
 80044fe:	18fb      	adds	r3, r7, r3
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d13f      	bne.n	8004586 <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800450a:	881a      	ldrh	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004516:	1c9a      	adds	r2, r3, #2
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004520:	b29b      	uxth	r3, r3
 8004522:	3b01      	subs	r3, #1
 8004524:	b29a      	uxth	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800452a:	e02c      	b.n	8004586 <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	2202      	movs	r2, #2
 8004534:	4013      	ands	r3, r2
 8004536:	2b02      	cmp	r3, #2
 8004538:	d112      	bne.n	8004560 <HAL_SPI_Transmit+0x168>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453e:	881a      	ldrh	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	1c9a      	adds	r2, r3, #2
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800455e:	e012      	b.n	8004586 <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004560:	f7fe fba2 	bl	8002ca8 <HAL_GetTick>
 8004564:	0002      	movs	r2, r0
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	429a      	cmp	r2, r3
 800456e:	d802      	bhi.n	8004576 <HAL_SPI_Transmit+0x17e>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	3301      	adds	r3, #1
 8004574:	d102      	bne.n	800457c <HAL_SPI_Transmit+0x184>
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d104      	bne.n	8004586 <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 800457c:	231f      	movs	r3, #31
 800457e:	18fb      	adds	r3, r7, r3
 8004580:	2203      	movs	r2, #3
 8004582:	701a      	strb	r2, [r3, #0]
          goto error;
 8004584:	e0aa      	b.n	80046dc <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800458a:	b29b      	uxth	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1cd      	bne.n	800452c <HAL_SPI_Transmit+0x134>
 8004590:	e080      	b.n	8004694 <HAL_SPI_Transmit+0x29c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d005      	beq.n	80045a6 <HAL_SPI_Transmit+0x1ae>
 800459a:	2316      	movs	r3, #22
 800459c:	18fb      	adds	r3, r7, r3
 800459e:	881b      	ldrh	r3, [r3, #0]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d000      	beq.n	80045a6 <HAL_SPI_Transmit+0x1ae>
 80045a4:	e071      	b.n	800468a <HAL_SPI_Transmit+0x292>
    {
      if (hspi->TxXferCount > 1U)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d912      	bls.n	80045d6 <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b4:	881a      	ldrh	r2, [r3, #0]
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c0:	1c9a      	adds	r2, r3, #2
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	3b02      	subs	r3, #2
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80045d4:	e059      	b.n	800468a <HAL_SPI_Transmit+0x292>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	330c      	adds	r3, #12
 80045e0:	7812      	ldrb	r2, [r2, #0]
 80045e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80045fc:	e045      	b.n	800468a <HAL_SPI_Transmit+0x292>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	2202      	movs	r2, #2
 8004606:	4013      	ands	r3, r2
 8004608:	2b02      	cmp	r3, #2
 800460a:	d12b      	bne.n	8004664 <HAL_SPI_Transmit+0x26c>
      {
        if (hspi->TxXferCount > 1U)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004610:	b29b      	uxth	r3, r3
 8004612:	2b01      	cmp	r3, #1
 8004614:	d912      	bls.n	800463c <HAL_SPI_Transmit+0x244>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461a:	881a      	ldrh	r2, [r3, #0]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004626:	1c9a      	adds	r2, r3, #2
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004630:	b29b      	uxth	r3, r3
 8004632:	3b02      	subs	r3, #2
 8004634:	b29a      	uxth	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	87da      	strh	r2, [r3, #62]	; 0x3e
 800463a:	e026      	b.n	800468a <HAL_SPI_Transmit+0x292>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	330c      	adds	r3, #12
 8004646:	7812      	ldrb	r2, [r2, #0]
 8004648:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004662:	e012      	b.n	800468a <HAL_SPI_Transmit+0x292>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004664:	f7fe fb20 	bl	8002ca8 <HAL_GetTick>
 8004668:	0002      	movs	r2, r0
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	683a      	ldr	r2, [r7, #0]
 8004670:	429a      	cmp	r2, r3
 8004672:	d802      	bhi.n	800467a <HAL_SPI_Transmit+0x282>
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	3301      	adds	r3, #1
 8004678:	d102      	bne.n	8004680 <HAL_SPI_Transmit+0x288>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d104      	bne.n	800468a <HAL_SPI_Transmit+0x292>
        {
          errorcode = HAL_TIMEOUT;
 8004680:	231f      	movs	r3, #31
 8004682:	18fb      	adds	r3, r7, r3
 8004684:	2203      	movs	r2, #3
 8004686:	701a      	strb	r2, [r3, #0]
          goto error;
 8004688:	e028      	b.n	80046dc <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800468e:	b29b      	uxth	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d1b4      	bne.n	80045fe <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	6839      	ldr	r1, [r7, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	0018      	movs	r0, r3
 800469c:	f000 fcee 	bl	800507c <SPI_EndRxTxTransaction>
 80046a0:	1e03      	subs	r3, r0, #0
 80046a2:	d002      	beq.n	80046aa <HAL_SPI_Transmit+0x2b2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2220      	movs	r2, #32
 80046a8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10a      	bne.n	80046c8 <HAL_SPI_Transmit+0x2d0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046b2:	2300      	movs	r3, #0
 80046b4:	613b      	str	r3, [r7, #16]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	613b      	str	r3, [r7, #16]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d004      	beq.n	80046da <HAL_SPI_Transmit+0x2e2>
  {
    errorcode = HAL_ERROR;
 80046d0:	231f      	movs	r3, #31
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	2201      	movs	r2, #1
 80046d6:	701a      	strb	r2, [r3, #0]
 80046d8:	e000      	b.n	80046dc <HAL_SPI_Transmit+0x2e4>
  }

error:
 80046da:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	225d      	movs	r2, #93	; 0x5d
 80046e0:	2101      	movs	r1, #1
 80046e2:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	225c      	movs	r2, #92	; 0x5c
 80046e8:	2100      	movs	r1, #0
 80046ea:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80046ec:	231f      	movs	r3, #31
 80046ee:	18fb      	adds	r3, r7, r3
 80046f0:	781b      	ldrb	r3, [r3, #0]
}
 80046f2:	0018      	movs	r0, r3
 80046f4:	46bd      	mov	sp, r7
 80046f6:	b008      	add	sp, #32
 80046f8:	bd80      	pop	{r7, pc}
	...

080046fc <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046fc:	b590      	push	{r4, r7, lr}
 80046fe:	b089      	sub	sp, #36	; 0x24
 8004700:	af02      	add	r7, sp, #8
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	603b      	str	r3, [r7, #0]
 8004708:	1dbb      	adds	r3, r7, #6
 800470a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800470c:	2317      	movs	r3, #23
 800470e:	18fb      	adds	r3, r7, r3
 8004710:	2200      	movs	r2, #0
 8004712:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	685a      	ldr	r2, [r3, #4]
 8004718:	2382      	movs	r3, #130	; 0x82
 800471a:	005b      	lsls	r3, r3, #1
 800471c:	429a      	cmp	r2, r3
 800471e:	d113      	bne.n	8004748 <HAL_SPI_Receive+0x4c>
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d10f      	bne.n	8004748 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	225d      	movs	r2, #93	; 0x5d
 800472c:	2104      	movs	r1, #4
 800472e:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004730:	1dbb      	adds	r3, r7, #6
 8004732:	881c      	ldrh	r4, [r3, #0]
 8004734:	68ba      	ldr	r2, [r7, #8]
 8004736:	68b9      	ldr	r1, [r7, #8]
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	0023      	movs	r3, r4
 8004740:	f000 f920 	bl	8004984 <HAL_SPI_TransmitReceive>
 8004744:	0003      	movs	r3, r0
 8004746:	e114      	b.n	8004972 <HAL_SPI_Receive+0x276>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	225c      	movs	r2, #92	; 0x5c
 800474c:	5c9b      	ldrb	r3, [r3, r2]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d101      	bne.n	8004756 <HAL_SPI_Receive+0x5a>
 8004752:	2302      	movs	r3, #2
 8004754:	e10d      	b.n	8004972 <HAL_SPI_Receive+0x276>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	225c      	movs	r2, #92	; 0x5c
 800475a:	2101      	movs	r1, #1
 800475c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800475e:	f7fe faa3 	bl	8002ca8 <HAL_GetTick>
 8004762:	0003      	movs	r3, r0
 8004764:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	225d      	movs	r2, #93	; 0x5d
 800476a:	5c9b      	ldrb	r3, [r3, r2]
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b01      	cmp	r3, #1
 8004770:	d004      	beq.n	800477c <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8004772:	2317      	movs	r3, #23
 8004774:	18fb      	adds	r3, r7, r3
 8004776:	2202      	movs	r2, #2
 8004778:	701a      	strb	r2, [r3, #0]
    goto error;
 800477a:	e0ef      	b.n	800495c <HAL_SPI_Receive+0x260>
  }

  if ((pData == NULL) || (Size == 0U))
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d003      	beq.n	800478a <HAL_SPI_Receive+0x8e>
 8004782:	1dbb      	adds	r3, r7, #6
 8004784:	881b      	ldrh	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d104      	bne.n	8004794 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800478a:	2317      	movs	r3, #23
 800478c:	18fb      	adds	r3, r7, r3
 800478e:	2201      	movs	r2, #1
 8004790:	701a      	strb	r2, [r3, #0]
    goto error;
 8004792:	e0e3      	b.n	800495c <HAL_SPI_Receive+0x260>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	225d      	movs	r2, #93	; 0x5d
 8004798:	2104      	movs	r1, #4
 800479a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	1dba      	adds	r2, r7, #6
 80047ac:	2144      	movs	r1, #68	; 0x44
 80047ae:	8812      	ldrh	r2, [r2, #0]
 80047b0:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	1dba      	adds	r2, r7, #6
 80047b6:	2146      	movs	r1, #70	; 0x46
 80047b8:	8812      	ldrh	r2, [r2, #0]
 80047ba:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	23e0      	movs	r3, #224	; 0xe0
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d908      	bls.n	80047f8 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4962      	ldr	r1, [pc, #392]	; (800497c <HAL_SPI_Receive+0x280>)
 80047f2:	400a      	ands	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]
 80047f6:	e008      	b.n	800480a <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2180      	movs	r1, #128	; 0x80
 8004804:	0149      	lsls	r1, r1, #5
 8004806:	430a      	orrs	r2, r1
 8004808:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	2380      	movs	r3, #128	; 0x80
 8004810:	021b      	lsls	r3, r3, #8
 8004812:	429a      	cmp	r2, r3
 8004814:	d107      	bne.n	8004826 <HAL_SPI_Receive+0x12a>
  {
    SPI_1LINE_RX(hspi);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4957      	ldr	r1, [pc, #348]	; (8004980 <HAL_SPI_Receive+0x284>)
 8004822:	400a      	ands	r2, r1
 8004824:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2240      	movs	r2, #64	; 0x40
 800482e:	4013      	ands	r3, r2
 8004830:	2b40      	cmp	r3, #64	; 0x40
 8004832:	d007      	beq.n	8004844 <HAL_SPI_Receive+0x148>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2140      	movs	r1, #64	; 0x40
 8004840:	430a      	orrs	r2, r1
 8004842:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	23e0      	movs	r3, #224	; 0xe0
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	429a      	cmp	r2, r3
 800484e:	d900      	bls.n	8004852 <HAL_SPI_Receive+0x156>
 8004850:	e069      	b.n	8004926 <HAL_SPI_Receive+0x22a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004852:	e031      	b.n	80048b8 <HAL_SPI_Receive+0x1bc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	2201      	movs	r2, #1
 800485c:	4013      	ands	r3, r2
 800485e:	2b01      	cmp	r3, #1
 8004860:	d117      	bne.n	8004892 <HAL_SPI_Receive+0x196>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	330c      	adds	r3, #12
 8004868:	001a      	movs	r2, r3
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	7812      	ldrb	r2, [r2, #0]
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2246      	movs	r2, #70	; 0x46
 8004882:	5a9b      	ldrh	r3, [r3, r2]
 8004884:	b29b      	uxth	r3, r3
 8004886:	3b01      	subs	r3, #1
 8004888:	b299      	uxth	r1, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2246      	movs	r2, #70	; 0x46
 800488e:	5299      	strh	r1, [r3, r2]
 8004890:	e012      	b.n	80048b8 <HAL_SPI_Receive+0x1bc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004892:	f7fe fa09 	bl	8002ca8 <HAL_GetTick>
 8004896:	0002      	movs	r2, r0
 8004898:	693b      	ldr	r3, [r7, #16]
 800489a:	1ad3      	subs	r3, r2, r3
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d802      	bhi.n	80048a8 <HAL_SPI_Receive+0x1ac>
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	3301      	adds	r3, #1
 80048a6:	d102      	bne.n	80048ae <HAL_SPI_Receive+0x1b2>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d104      	bne.n	80048b8 <HAL_SPI_Receive+0x1bc>
        {
          errorcode = HAL_TIMEOUT;
 80048ae:	2317      	movs	r3, #23
 80048b0:	18fb      	adds	r3, r7, r3
 80048b2:	2203      	movs	r2, #3
 80048b4:	701a      	strb	r2, [r3, #0]
          goto error;
 80048b6:	e051      	b.n	800495c <HAL_SPI_Receive+0x260>
    while (hspi->RxXferCount > 0U)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2246      	movs	r2, #70	; 0x46
 80048bc:	5a9b      	ldrh	r3, [r3, r2]
 80048be:	b29b      	uxth	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1c7      	bne.n	8004854 <HAL_SPI_Receive+0x158>
 80048c4:	e035      	b.n	8004932 <HAL_SPI_Receive+0x236>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	689b      	ldr	r3, [r3, #8]
 80048cc:	2201      	movs	r2, #1
 80048ce:	4013      	ands	r3, r2
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d115      	bne.n	8004900 <HAL_SPI_Receive+0x204>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048de:	b292      	uxth	r2, r2
 80048e0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	1c9a      	adds	r2, r3, #2
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2246      	movs	r2, #70	; 0x46
 80048f0:	5a9b      	ldrh	r3, [r3, r2]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	3b01      	subs	r3, #1
 80048f6:	b299      	uxth	r1, r3
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2246      	movs	r2, #70	; 0x46
 80048fc:	5299      	strh	r1, [r3, r2]
 80048fe:	e012      	b.n	8004926 <HAL_SPI_Receive+0x22a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004900:	f7fe f9d2 	bl	8002ca8 <HAL_GetTick>
 8004904:	0002      	movs	r2, r0
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	429a      	cmp	r2, r3
 800490e:	d802      	bhi.n	8004916 <HAL_SPI_Receive+0x21a>
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	3301      	adds	r3, #1
 8004914:	d102      	bne.n	800491c <HAL_SPI_Receive+0x220>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d104      	bne.n	8004926 <HAL_SPI_Receive+0x22a>
        {
          errorcode = HAL_TIMEOUT;
 800491c:	2317      	movs	r3, #23
 800491e:	18fb      	adds	r3, r7, r3
 8004920:	2203      	movs	r2, #3
 8004922:	701a      	strb	r2, [r3, #0]
          goto error;
 8004924:	e01a      	b.n	800495c <HAL_SPI_Receive+0x260>
    while (hspi->RxXferCount > 0U)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2246      	movs	r2, #70	; 0x46
 800492a:	5a9b      	ldrh	r3, [r3, r2]
 800492c:	b29b      	uxth	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d1c9      	bne.n	80048c6 <HAL_SPI_Receive+0x1ca>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004932:	693a      	ldr	r2, [r7, #16]
 8004934:	6839      	ldr	r1, [r7, #0]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	0018      	movs	r0, r3
 800493a:	f000 fb41 	bl	8004fc0 <SPI_EndRxTransaction>
 800493e:	1e03      	subs	r3, r0, #0
 8004940:	d002      	beq.n	8004948 <HAL_SPI_Receive+0x24c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2220      	movs	r2, #32
 8004946:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494c:	2b00      	cmp	r3, #0
 800494e:	d004      	beq.n	800495a <HAL_SPI_Receive+0x25e>
  {
    errorcode = HAL_ERROR;
 8004950:	2317      	movs	r3, #23
 8004952:	18fb      	adds	r3, r7, r3
 8004954:	2201      	movs	r2, #1
 8004956:	701a      	strb	r2, [r3, #0]
 8004958:	e000      	b.n	800495c <HAL_SPI_Receive+0x260>
  }

error :
 800495a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	225d      	movs	r2, #93	; 0x5d
 8004960:	2101      	movs	r1, #1
 8004962:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	225c      	movs	r2, #92	; 0x5c
 8004968:	2100      	movs	r1, #0
 800496a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800496c:	2317      	movs	r3, #23
 800496e:	18fb      	adds	r3, r7, r3
 8004970:	781b      	ldrb	r3, [r3, #0]
}
 8004972:	0018      	movs	r0, r3
 8004974:	46bd      	mov	sp, r7
 8004976:	b007      	add	sp, #28
 8004978:	bd90      	pop	{r4, r7, pc}
 800497a:	46c0      	nop			; (mov r8, r8)
 800497c:	ffffefff 	.word	0xffffefff
 8004980:	ffffbfff 	.word	0xffffbfff

08004984 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b08a      	sub	sp, #40	; 0x28
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	607a      	str	r2, [r7, #4]
 8004990:	001a      	movs	r2, r3
 8004992:	1cbb      	adds	r3, r7, #2
 8004994:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004996:	2301      	movs	r3, #1
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800499a:	2323      	movs	r3, #35	; 0x23
 800499c:	18fb      	adds	r3, r7, r3
 800499e:	2200      	movs	r2, #0
 80049a0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	225c      	movs	r2, #92	; 0x5c
 80049a6:	5c9b      	ldrb	r3, [r3, r2]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d101      	bne.n	80049b0 <HAL_SPI_TransmitReceive+0x2c>
 80049ac:	2302      	movs	r3, #2
 80049ae:	e21f      	b.n	8004df0 <HAL_SPI_TransmitReceive+0x46c>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	225c      	movs	r2, #92	; 0x5c
 80049b4:	2101      	movs	r1, #1
 80049b6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049b8:	f7fe f976 	bl	8002ca8 <HAL_GetTick>
 80049bc:	0003      	movs	r3, r0
 80049be:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049c0:	201b      	movs	r0, #27
 80049c2:	183b      	adds	r3, r7, r0
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	215d      	movs	r1, #93	; 0x5d
 80049c8:	5c52      	ldrb	r2, [r2, r1]
 80049ca:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80049d2:	2312      	movs	r3, #18
 80049d4:	18fb      	adds	r3, r7, r3
 80049d6:	1cba      	adds	r2, r7, #2
 80049d8:	8812      	ldrh	r2, [r2, #0]
 80049da:	801a      	strh	r2, [r3, #0]
  initial_RxXferCount = Size;
 80049dc:	2310      	movs	r3, #16
 80049de:	18fb      	adds	r3, r7, r3
 80049e0:	1cba      	adds	r2, r7, #2
 80049e2:	8812      	ldrh	r2, [r2, #0]
 80049e4:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049e6:	183b      	adds	r3, r7, r0
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d012      	beq.n	8004a14 <HAL_SPI_TransmitReceive+0x90>
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	2382      	movs	r3, #130	; 0x82
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d108      	bne.n	8004a0a <HAL_SPI_TransmitReceive+0x86>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d104      	bne.n	8004a0a <HAL_SPI_TransmitReceive+0x86>
 8004a00:	231b      	movs	r3, #27
 8004a02:	18fb      	adds	r3, r7, r3
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d004      	beq.n	8004a14 <HAL_SPI_TransmitReceive+0x90>
  {
    errorcode = HAL_BUSY;
 8004a0a:	2323      	movs	r3, #35	; 0x23
 8004a0c:	18fb      	adds	r3, r7, r3
 8004a0e:	2202      	movs	r2, #2
 8004a10:	701a      	strb	r2, [r3, #0]
    goto error;
 8004a12:	e1e2      	b.n	8004dda <HAL_SPI_TransmitReceive+0x456>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d006      	beq.n	8004a28 <HAL_SPI_TransmitReceive+0xa4>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_SPI_TransmitReceive+0xa4>
 8004a20:	1cbb      	adds	r3, r7, #2
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d104      	bne.n	8004a32 <HAL_SPI_TransmitReceive+0xae>
  {
    errorcode = HAL_ERROR;
 8004a28:	2323      	movs	r3, #35	; 0x23
 8004a2a:	18fb      	adds	r3, r7, r3
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004a30:	e1d3      	b.n	8004dda <HAL_SPI_TransmitReceive+0x456>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	225d      	movs	r2, #93	; 0x5d
 8004a36:	5c9b      	ldrb	r3, [r3, r2]
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d003      	beq.n	8004a46 <HAL_SPI_TransmitReceive+0xc2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	225d      	movs	r2, #93	; 0x5d
 8004a42:	2105      	movs	r1, #5
 8004a44:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	1cba      	adds	r2, r7, #2
 8004a56:	2146      	movs	r1, #70	; 0x46
 8004a58:	8812      	ldrh	r2, [r2, #0]
 8004a5a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	1cba      	adds	r2, r7, #2
 8004a60:	2144      	movs	r1, #68	; 0x44
 8004a62:	8812      	ldrh	r2, [r2, #0]
 8004a64:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	1cba      	adds	r2, r7, #2
 8004a70:	8812      	ldrh	r2, [r2, #0]
 8004a72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	1cba      	adds	r2, r7, #2
 8004a78:	8812      	ldrh	r2, [r2, #0]
 8004a7a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	23e0      	movs	r3, #224	; 0xe0
 8004a8e:	00db      	lsls	r3, r3, #3
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d804      	bhi.n	8004a9e <HAL_SPI_TransmitReceive+0x11a>
 8004a94:	2310      	movs	r3, #16
 8004a96:	18fb      	adds	r3, r7, r3
 8004a98:	881b      	ldrh	r3, [r3, #0]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d908      	bls.n	8004ab0 <HAL_SPI_TransmitReceive+0x12c>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	49ca      	ldr	r1, [pc, #808]	; (8004dd4 <HAL_SPI_TransmitReceive+0x450>)
 8004aaa:	400a      	ands	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]
 8004aae:	e008      	b.n	8004ac2 <HAL_SPI_TransmitReceive+0x13e>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2180      	movs	r1, #128	; 0x80
 8004abc:	0149      	lsls	r1, r1, #5
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2240      	movs	r2, #64	; 0x40
 8004aca:	4013      	ands	r3, r2
 8004acc:	2b40      	cmp	r3, #64	; 0x40
 8004ace:	d007      	beq.n	8004ae0 <HAL_SPI_TransmitReceive+0x15c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2140      	movs	r1, #64	; 0x40
 8004adc:	430a      	orrs	r2, r1
 8004ade:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	23e0      	movs	r3, #224	; 0xe0
 8004ae6:	00db      	lsls	r3, r3, #3
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d800      	bhi.n	8004aee <HAL_SPI_TransmitReceive+0x16a>
 8004aec:	e07f      	b.n	8004bee <HAL_SPI_TransmitReceive+0x26a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d005      	beq.n	8004b02 <HAL_SPI_TransmitReceive+0x17e>
 8004af6:	2312      	movs	r3, #18
 8004af8:	18fb      	adds	r3, r7, r3
 8004afa:	881b      	ldrh	r3, [r3, #0]
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d000      	beq.n	8004b02 <HAL_SPI_TransmitReceive+0x17e>
 8004b00:	e069      	b.n	8004bd6 <HAL_SPI_TransmitReceive+0x252>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b06:	881a      	ldrh	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b12:	1c9a      	adds	r2, r3, #2
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b1c:	b29b      	uxth	r3, r3
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004b26:	e056      	b.n	8004bd6 <HAL_SPI_TransmitReceive+0x252>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2202      	movs	r2, #2
 8004b30:	4013      	ands	r3, r2
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d11b      	bne.n	8004b6e <HAL_SPI_TransmitReceive+0x1ea>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d016      	beq.n	8004b6e <HAL_SPI_TransmitReceive+0x1ea>
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d113      	bne.n	8004b6e <HAL_SPI_TransmitReceive+0x1ea>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4a:	881a      	ldrh	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b56:	1c9a      	adds	r2, r3, #2
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	3b01      	subs	r3, #1
 8004b64:	b29a      	uxth	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	2201      	movs	r2, #1
 8004b76:	4013      	ands	r3, r2
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d11c      	bne.n	8004bb6 <HAL_SPI_TransmitReceive+0x232>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2246      	movs	r2, #70	; 0x46
 8004b80:	5a9b      	ldrh	r3, [r3, r2]
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d016      	beq.n	8004bb6 <HAL_SPI_TransmitReceive+0x232>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	b292      	uxth	r2, r2
 8004b94:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	1c9a      	adds	r2, r3, #2
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2246      	movs	r2, #70	; 0x46
 8004ba4:	5a9b      	ldrh	r3, [r3, r2]
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	b299      	uxth	r1, r3
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2246      	movs	r2, #70	; 0x46
 8004bb0:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004bb6:	f7fe f877 	bl	8002ca8 <HAL_GetTick>
 8004bba:	0002      	movs	r2, r0
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d807      	bhi.n	8004bd6 <HAL_SPI_TransmitReceive+0x252>
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc8:	3301      	adds	r3, #1
 8004bca:	d004      	beq.n	8004bd6 <HAL_SPI_TransmitReceive+0x252>
      {
        errorcode = HAL_TIMEOUT;
 8004bcc:	2323      	movs	r3, #35	; 0x23
 8004bce:	18fb      	adds	r3, r7, r3
 8004bd0:	2203      	movs	r2, #3
 8004bd2:	701a      	strb	r2, [r3, #0]
        goto error;
 8004bd4:	e101      	b.n	8004dda <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1a3      	bne.n	8004b28 <HAL_SPI_TransmitReceive+0x1a4>
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2246      	movs	r2, #70	; 0x46
 8004be4:	5a9b      	ldrh	r3, [r3, r2]
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d19d      	bne.n	8004b28 <HAL_SPI_TransmitReceive+0x1a4>
 8004bec:	e0e2      	b.n	8004db4 <HAL_SPI_TransmitReceive+0x430>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d005      	beq.n	8004c02 <HAL_SPI_TransmitReceive+0x27e>
 8004bf6:	2312      	movs	r3, #18
 8004bf8:	18fb      	adds	r3, r7, r3
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d000      	beq.n	8004c02 <HAL_SPI_TransmitReceive+0x27e>
 8004c00:	e0cb      	b.n	8004d9a <HAL_SPI_TransmitReceive+0x416>
    {
      if (hspi->TxXferCount > 1U)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d912      	bls.n	8004c32 <HAL_SPI_TransmitReceive+0x2ae>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c10:	881a      	ldrh	r2, [r3, #0]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1c:	1c9a      	adds	r2, r3, #2
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	3b02      	subs	r3, #2
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c30:	e0b3      	b.n	8004d9a <HAL_SPI_TransmitReceive+0x416>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	330c      	adds	r3, #12
 8004c3c:	7812      	ldrb	r2, [r2, #0]
 8004c3e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c44:	1c5a      	adds	r2, r3, #1
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	3b01      	subs	r3, #1
 8004c52:	b29a      	uxth	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c58:	e09f      	b.n	8004d9a <HAL_SPI_TransmitReceive+0x416>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	2202      	movs	r2, #2
 8004c62:	4013      	ands	r3, r2
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d134      	bne.n	8004cd2 <HAL_SPI_TransmitReceive+0x34e>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d02f      	beq.n	8004cd2 <HAL_SPI_TransmitReceive+0x34e>
 8004c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d12c      	bne.n	8004cd2 <HAL_SPI_TransmitReceive+0x34e>
      {
        if (hspi->TxXferCount > 1U)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d912      	bls.n	8004ca8 <HAL_SPI_TransmitReceive+0x324>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c86:	881a      	ldrh	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c92:	1c9a      	adds	r2, r3, #2
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	3b02      	subs	r3, #2
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ca6:	e012      	b.n	8004cce <HAL_SPI_TransmitReceive+0x34a>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	330c      	adds	r3, #12
 8004cb2:	7812      	ldrb	r2, [r2, #0]
 8004cb4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cba:	1c5a      	adds	r2, r3, #1
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	2201      	movs	r2, #1
 8004cda:	4013      	ands	r3, r2
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d149      	bne.n	8004d74 <HAL_SPI_TransmitReceive+0x3f0>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2246      	movs	r2, #70	; 0x46
 8004ce4:	5a9b      	ldrh	r3, [r3, r2]
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d043      	beq.n	8004d74 <HAL_SPI_TransmitReceive+0x3f0>
      {
        if (hspi->RxXferCount > 1U)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2246      	movs	r2, #70	; 0x46
 8004cf0:	5a9b      	ldrh	r3, [r3, r2]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d924      	bls.n	8004d42 <HAL_SPI_TransmitReceive+0x3be>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	b292      	uxth	r2, r2
 8004d04:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0a:	1c9a      	adds	r2, r3, #2
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2246      	movs	r2, #70	; 0x46
 8004d14:	5a9b      	ldrh	r3, [r3, r2]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	3b02      	subs	r3, #2
 8004d1a:	b299      	uxth	r1, r3
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2246      	movs	r2, #70	; 0x46
 8004d20:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2246      	movs	r2, #70	; 0x46
 8004d26:	5a9b      	ldrh	r3, [r3, r2]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d820      	bhi.n	8004d70 <HAL_SPI_TransmitReceive+0x3ec>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2180      	movs	r1, #128	; 0x80
 8004d3a:	0149      	lsls	r1, r1, #5
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	605a      	str	r2, [r3, #4]
 8004d40:	e016      	b.n	8004d70 <HAL_SPI_TransmitReceive+0x3ec>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	330c      	adds	r3, #12
 8004d48:	001a      	movs	r2, r3
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	7812      	ldrb	r2, [r2, #0]
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2246      	movs	r2, #70	; 0x46
 8004d62:	5a9b      	ldrh	r3, [r3, r2]
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	3b01      	subs	r3, #1
 8004d68:	b299      	uxth	r1, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2246      	movs	r2, #70	; 0x46
 8004d6e:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d70:	2301      	movs	r3, #1
 8004d72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d74:	f7fd ff98 	bl	8002ca8 <HAL_GetTick>
 8004d78:	0002      	movs	r2, r0
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d802      	bhi.n	8004d8a <HAL_SPI_TransmitReceive+0x406>
 8004d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d86:	3301      	adds	r3, #1
 8004d88:	d102      	bne.n	8004d90 <HAL_SPI_TransmitReceive+0x40c>
 8004d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d104      	bne.n	8004d9a <HAL_SPI_TransmitReceive+0x416>
      {
        errorcode = HAL_TIMEOUT;
 8004d90:	2323      	movs	r3, #35	; 0x23
 8004d92:	18fb      	adds	r3, r7, r3
 8004d94:	2203      	movs	r2, #3
 8004d96:	701a      	strb	r2, [r3, #0]
        goto error;
 8004d98:	e01f      	b.n	8004dda <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d000      	beq.n	8004da6 <HAL_SPI_TransmitReceive+0x422>
 8004da4:	e759      	b.n	8004c5a <HAL_SPI_TransmitReceive+0x2d6>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2246      	movs	r2, #70	; 0x46
 8004daa:	5a9b      	ldrh	r3, [r3, r2]
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d000      	beq.n	8004db4 <HAL_SPI_TransmitReceive+0x430>
 8004db2:	e752      	b.n	8004c5a <HAL_SPI_TransmitReceive+0x2d6>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004db4:	69fa      	ldr	r2, [r7, #28]
 8004db6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f000 f95e 	bl	800507c <SPI_EndRxTxTransaction>
 8004dc0:	1e03      	subs	r3, r0, #0
 8004dc2:	d009      	beq.n	8004dd8 <HAL_SPI_TransmitReceive+0x454>
  {
    errorcode = HAL_ERROR;
 8004dc4:	2323      	movs	r3, #35	; 0x23
 8004dc6:	18fb      	adds	r3, r7, r3
 8004dc8:	2201      	movs	r2, #1
 8004dca:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2220      	movs	r2, #32
 8004dd0:	661a      	str	r2, [r3, #96]	; 0x60
 8004dd2:	e002      	b.n	8004dda <HAL_SPI_TransmitReceive+0x456>
 8004dd4:	ffffefff 	.word	0xffffefff
  }

error :
 8004dd8:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	225d      	movs	r2, #93	; 0x5d
 8004dde:	2101      	movs	r1, #1
 8004de0:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	225c      	movs	r2, #92	; 0x5c
 8004de6:	2100      	movs	r1, #0
 8004de8:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004dea:	2323      	movs	r3, #35	; 0x23
 8004dec:	18fb      	adds	r3, r7, r3
 8004dee:	781b      	ldrb	r3, [r3, #0]
}
 8004df0:	0018      	movs	r0, r3
 8004df2:	46bd      	mov	sp, r7
 8004df4:	b00a      	add	sp, #40	; 0x28
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	603b      	str	r3, [r7, #0]
 8004e04:	1dfb      	adds	r3, r7, #7
 8004e06:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e08:	e050      	b.n	8004eac <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	d04d      	beq.n	8004eac <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004e10:	f7fd ff4a 	bl	8002ca8 <HAL_GetTick>
 8004e14:	0002      	movs	r2, r0
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d902      	bls.n	8004e26 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d142      	bne.n	8004eac <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	21e0      	movs	r1, #224	; 0xe0
 8004e32:	438a      	bics	r2, r1
 8004e34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	2382      	movs	r3, #130	; 0x82
 8004e3c:	005b      	lsls	r3, r3, #1
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d113      	bne.n	8004e6a <SPI_WaitFlagStateUntilTimeout+0x72>
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	689a      	ldr	r2, [r3, #8]
 8004e46:	2380      	movs	r3, #128	; 0x80
 8004e48:	021b      	lsls	r3, r3, #8
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d005      	beq.n	8004e5a <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	689a      	ldr	r2, [r3, #8]
 8004e52:	2380      	movs	r3, #128	; 0x80
 8004e54:	00db      	lsls	r3, r3, #3
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d107      	bne.n	8004e6a <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2140      	movs	r1, #64	; 0x40
 8004e66:	438a      	bics	r2, r1
 8004e68:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004e6e:	2380      	movs	r3, #128	; 0x80
 8004e70:	019b      	lsls	r3, r3, #6
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d110      	bne.n	8004e98 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4914      	ldr	r1, [pc, #80]	; (8004ed4 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 8004e82:	400a      	ands	r2, r1
 8004e84:	601a      	str	r2, [r3, #0]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	2180      	movs	r1, #128	; 0x80
 8004e92:	0189      	lsls	r1, r1, #6
 8004e94:	430a      	orrs	r2, r1
 8004e96:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	225d      	movs	r2, #93	; 0x5d
 8004e9c:	2101      	movs	r1, #1
 8004e9e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	225c      	movs	r2, #92	; 0x5c
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e00f      	b.n	8004ecc <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	425a      	negs	r2, r3
 8004ebc:	4153      	adcs	r3, r2
 8004ebe:	b2db      	uxtb	r3, r3
 8004ec0:	001a      	movs	r2, r3
 8004ec2:	1dfb      	adds	r3, r7, #7
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d19f      	bne.n	8004e0a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	0018      	movs	r0, r3
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	b004      	add	sp, #16
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	ffffdfff 	.word	0xffffdfff

08004ed8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
 8004ee4:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ee6:	e05c      	b.n	8004fa2 <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004ee8:	68ba      	ldr	r2, [r7, #8]
 8004eea:	23c0      	movs	r3, #192	; 0xc0
 8004eec:	00db      	lsls	r3, r3, #3
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d106      	bne.n	8004f00 <SPI_WaitFifoStateUntilTimeout+0x28>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d103      	bne.n	8004f00 <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	330c      	adds	r3, #12
 8004efe:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	3301      	adds	r3, #1
 8004f04:	d04d      	beq.n	8004fa2 <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004f06:	f7fd fecf 	bl	8002ca8 <HAL_GetTick>
 8004f0a:	0002      	movs	r2, r0
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	1ad3      	subs	r3, r2, r3
 8004f10:	683a      	ldr	r2, [r7, #0]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d902      	bls.n	8004f1c <SPI_WaitFifoStateUntilTimeout+0x44>
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d142      	bne.n	8004fa2 <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685a      	ldr	r2, [r3, #4]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	21e0      	movs	r1, #224	; 0xe0
 8004f28:	438a      	bics	r2, r1
 8004f2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	2382      	movs	r3, #130	; 0x82
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d113      	bne.n	8004f60 <SPI_WaitFifoStateUntilTimeout+0x88>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	2380      	movs	r3, #128	; 0x80
 8004f3e:	021b      	lsls	r3, r3, #8
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d005      	beq.n	8004f50 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	689a      	ldr	r2, [r3, #8]
 8004f48:	2380      	movs	r3, #128	; 0x80
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d107      	bne.n	8004f60 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2140      	movs	r1, #64	; 0x40
 8004f5c:	438a      	bics	r2, r1
 8004f5e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f64:	2380      	movs	r3, #128	; 0x80
 8004f66:	019b      	lsls	r3, r3, #6
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d110      	bne.n	8004f8e <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4911      	ldr	r1, [pc, #68]	; (8004fbc <SPI_WaitFifoStateUntilTimeout+0xe4>)
 8004f78:	400a      	ands	r2, r1
 8004f7a:	601a      	str	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681a      	ldr	r2, [r3, #0]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2180      	movs	r1, #128	; 0x80
 8004f88:	0189      	lsls	r1, r1, #6
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	225d      	movs	r2, #93	; 0x5d
 8004f92:	2101      	movs	r1, #1
 8004f94:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	225c      	movs	r2, #92	; 0x5c
 8004f9a:	2100      	movs	r1, #0
 8004f9c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e008      	b.n	8004fb4 <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	68ba      	ldr	r2, [r7, #8]
 8004faa:	4013      	ands	r3, r2
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d19a      	bne.n	8004ee8 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	b004      	add	sp, #16
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	ffffdfff 	.word	0xffffdfff

08004fc0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b086      	sub	sp, #24
 8004fc4:	af02      	add	r7, sp, #8
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	2382      	movs	r3, #130	; 0x82
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d113      	bne.n	8005000 <SPI_EndRxTransaction+0x40>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	2380      	movs	r3, #128	; 0x80
 8004fde:	021b      	lsls	r3, r3, #8
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d005      	beq.n	8004ff0 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	2380      	movs	r3, #128	; 0x80
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d107      	bne.n	8005000 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2140      	movs	r1, #64	; 0x40
 8004ffc:	438a      	bics	r2, r1
 8004ffe:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	9300      	str	r3, [sp, #0]
 8005008:	0013      	movs	r3, r2
 800500a:	2200      	movs	r2, #0
 800500c:	2180      	movs	r1, #128	; 0x80
 800500e:	f7ff fef3 	bl	8004df8 <SPI_WaitFlagStateUntilTimeout>
 8005012:	1e03      	subs	r3, r0, #0
 8005014:	d007      	beq.n	8005026 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800501a:	2220      	movs	r2, #32
 800501c:	431a      	orrs	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e026      	b.n	8005074 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	2382      	movs	r3, #130	; 0x82
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	429a      	cmp	r2, r3
 8005030:	d11f      	bne.n	8005072 <SPI_EndRxTransaction+0xb2>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	689a      	ldr	r2, [r3, #8]
 8005036:	2380      	movs	r3, #128	; 0x80
 8005038:	021b      	lsls	r3, r3, #8
 800503a:	429a      	cmp	r2, r3
 800503c:	d005      	beq.n	800504a <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	689a      	ldr	r2, [r3, #8]
 8005042:	2380      	movs	r3, #128	; 0x80
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	429a      	cmp	r2, r3
 8005048:	d113      	bne.n	8005072 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800504a:	68ba      	ldr	r2, [r7, #8]
 800504c:	23c0      	movs	r3, #192	; 0xc0
 800504e:	00d9      	lsls	r1, r3, #3
 8005050:	68f8      	ldr	r0, [r7, #12]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	0013      	movs	r3, r2
 8005058:	2200      	movs	r2, #0
 800505a:	f7ff ff3d 	bl	8004ed8 <SPI_WaitFifoStateUntilTimeout>
 800505e:	1e03      	subs	r3, r0, #0
 8005060:	d007      	beq.n	8005072 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005066:	2220      	movs	r2, #32
 8005068:	431a      	orrs	r2, r3
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e000      	b.n	8005074 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	0018      	movs	r0, r3
 8005076:	46bd      	mov	sp, r7
 8005078:	b004      	add	sp, #16
 800507a:	bd80      	pop	{r7, pc}

0800507c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af02      	add	r7, sp, #8
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	23c0      	movs	r3, #192	; 0xc0
 800508c:	0159      	lsls	r1, r3, #5
 800508e:	68f8      	ldr	r0, [r7, #12]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	0013      	movs	r3, r2
 8005096:	2200      	movs	r2, #0
 8005098:	f7ff ff1e 	bl	8004ed8 <SPI_WaitFifoStateUntilTimeout>
 800509c:	1e03      	subs	r3, r0, #0
 800509e:	d007      	beq.n	80050b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050a4:	2220      	movs	r2, #32
 80050a6:	431a      	orrs	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e027      	b.n	8005100 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	9300      	str	r3, [sp, #0]
 80050b8:	0013      	movs	r3, r2
 80050ba:	2200      	movs	r2, #0
 80050bc:	2180      	movs	r1, #128	; 0x80
 80050be:	f7ff fe9b 	bl	8004df8 <SPI_WaitFlagStateUntilTimeout>
 80050c2:	1e03      	subs	r3, r0, #0
 80050c4:	d007      	beq.n	80050d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ca:	2220      	movs	r2, #32
 80050cc:	431a      	orrs	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e014      	b.n	8005100 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050d6:	68ba      	ldr	r2, [r7, #8]
 80050d8:	23c0      	movs	r3, #192	; 0xc0
 80050da:	00d9      	lsls	r1, r3, #3
 80050dc:	68f8      	ldr	r0, [r7, #12]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	0013      	movs	r3, r2
 80050e4:	2200      	movs	r2, #0
 80050e6:	f7ff fef7 	bl	8004ed8 <SPI_WaitFifoStateUntilTimeout>
 80050ea:	1e03      	subs	r3, r0, #0
 80050ec:	d007      	beq.n	80050fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050f2:	2220      	movs	r2, #32
 80050f4:	431a      	orrs	r2, r3
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e000      	b.n	8005100 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	0018      	movs	r0, r3
 8005102:	46bd      	mov	sp, r7
 8005104:	b004      	add	sp, #16
 8005106:	bd80      	pop	{r7, pc}

08005108 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e044      	b.n	80051a4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800511e:	2b00      	cmp	r3, #0
 8005120:	d107      	bne.n	8005132 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2270      	movs	r2, #112	; 0x70
 8005126:	2100      	movs	r1, #0
 8005128:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	0018      	movs	r0, r3
 800512e:	f7fd fccb 	bl	8002ac8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2224      	movs	r2, #36	; 0x24
 8005136:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2101      	movs	r1, #1
 8005144:	438a      	bics	r2, r1
 8005146:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	0018      	movs	r0, r3
 800514c:	f000 f830 	bl	80051b0 <UART_SetConfig>
 8005150:	0003      	movs	r3, r0
 8005152:	2b01      	cmp	r3, #1
 8005154:	d101      	bne.n	800515a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e024      	b.n	80051a4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	0018      	movs	r0, r3
 8005166:	f000 f9a9 	bl	80054bc <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	490d      	ldr	r1, [pc, #52]	; (80051ac <HAL_UART_Init+0xa4>)
 8005176:	400a      	ands	r2, r1
 8005178:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	689a      	ldr	r2, [r3, #8]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2108      	movs	r1, #8
 8005186:	438a      	bics	r2, r1
 8005188:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2101      	movs	r1, #1
 8005196:	430a      	orrs	r2, r1
 8005198:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	0018      	movs	r0, r3
 800519e:	f000 fa41 	bl	8005624 <UART_CheckIdleState>
 80051a2:	0003      	movs	r3, r0
}
 80051a4:	0018      	movs	r0, r3
 80051a6:	46bd      	mov	sp, r7
 80051a8:	b002      	add	sp, #8
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	fffff7ff 	.word	0xfffff7ff

080051b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b088      	sub	sp, #32
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80051b8:	2300      	movs	r3, #0
 80051ba:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80051bc:	2317      	movs	r3, #23
 80051be:	18fb      	adds	r3, r7, r3
 80051c0:	2200      	movs	r2, #0
 80051c2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689a      	ldr	r2, [r3, #8]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	431a      	orrs	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	69db      	ldr	r3, [r3, #28]
 80051d8:	4313      	orrs	r3, r2
 80051da:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4aad      	ldr	r2, [pc, #692]	; (8005498 <UART_SetConfig+0x2e8>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	0019      	movs	r1, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	430a      	orrs	r2, r1
 80051f0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	4aa8      	ldr	r2, [pc, #672]	; (800549c <UART_SetConfig+0x2ec>)
 80051fa:	4013      	ands	r3, r2
 80051fc:	0019      	movs	r1, r3
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	68da      	ldr	r2, [r3, #12]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a1b      	ldr	r3, [r3, #32]
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	4313      	orrs	r3, r2
 8005218:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	4a9f      	ldr	r2, [pc, #636]	; (80054a0 <UART_SetConfig+0x2f0>)
 8005222:	4013      	ands	r3, r2
 8005224:	0019      	movs	r1, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	430a      	orrs	r2, r1
 800522e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a9b      	ldr	r2, [pc, #620]	; (80054a4 <UART_SetConfig+0x2f4>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d125      	bne.n	8005286 <UART_SetConfig+0xd6>
 800523a:	4b9b      	ldr	r3, [pc, #620]	; (80054a8 <UART_SetConfig+0x2f8>)
 800523c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523e:	2203      	movs	r2, #3
 8005240:	4013      	ands	r3, r2
 8005242:	2b01      	cmp	r3, #1
 8005244:	d00f      	beq.n	8005266 <UART_SetConfig+0xb6>
 8005246:	d304      	bcc.n	8005252 <UART_SetConfig+0xa2>
 8005248:	2b02      	cmp	r3, #2
 800524a:	d011      	beq.n	8005270 <UART_SetConfig+0xc0>
 800524c:	2b03      	cmp	r3, #3
 800524e:	d005      	beq.n	800525c <UART_SetConfig+0xac>
 8005250:	e013      	b.n	800527a <UART_SetConfig+0xca>
 8005252:	231f      	movs	r3, #31
 8005254:	18fb      	adds	r3, r7, r3
 8005256:	2200      	movs	r2, #0
 8005258:	701a      	strb	r2, [r3, #0]
 800525a:	e022      	b.n	80052a2 <UART_SetConfig+0xf2>
 800525c:	231f      	movs	r3, #31
 800525e:	18fb      	adds	r3, r7, r3
 8005260:	2202      	movs	r2, #2
 8005262:	701a      	strb	r2, [r3, #0]
 8005264:	e01d      	b.n	80052a2 <UART_SetConfig+0xf2>
 8005266:	231f      	movs	r3, #31
 8005268:	18fb      	adds	r3, r7, r3
 800526a:	2204      	movs	r2, #4
 800526c:	701a      	strb	r2, [r3, #0]
 800526e:	e018      	b.n	80052a2 <UART_SetConfig+0xf2>
 8005270:	231f      	movs	r3, #31
 8005272:	18fb      	adds	r3, r7, r3
 8005274:	2208      	movs	r2, #8
 8005276:	701a      	strb	r2, [r3, #0]
 8005278:	e013      	b.n	80052a2 <UART_SetConfig+0xf2>
 800527a:	231f      	movs	r3, #31
 800527c:	18fb      	adds	r3, r7, r3
 800527e:	2210      	movs	r2, #16
 8005280:	701a      	strb	r2, [r3, #0]
 8005282:	46c0      	nop			; (mov r8, r8)
 8005284:	e00d      	b.n	80052a2 <UART_SetConfig+0xf2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a88      	ldr	r2, [pc, #544]	; (80054ac <UART_SetConfig+0x2fc>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d104      	bne.n	800529a <UART_SetConfig+0xea>
 8005290:	231f      	movs	r3, #31
 8005292:	18fb      	adds	r3, r7, r3
 8005294:	2200      	movs	r2, #0
 8005296:	701a      	strb	r2, [r3, #0]
 8005298:	e003      	b.n	80052a2 <UART_SetConfig+0xf2>
 800529a:	231f      	movs	r3, #31
 800529c:	18fb      	adds	r3, r7, r3
 800529e:	2210      	movs	r2, #16
 80052a0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	69da      	ldr	r2, [r3, #28]
 80052a6:	2380      	movs	r3, #128	; 0x80
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d000      	beq.n	80052b0 <UART_SetConfig+0x100>
 80052ae:	e07d      	b.n	80053ac <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 80052b0:	231f      	movs	r3, #31
 80052b2:	18fb      	adds	r3, r7, r3
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d01c      	beq.n	80052f4 <UART_SetConfig+0x144>
 80052ba:	dc02      	bgt.n	80052c2 <UART_SetConfig+0x112>
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d005      	beq.n	80052cc <UART_SetConfig+0x11c>
 80052c0:	e04b      	b.n	800535a <UART_SetConfig+0x1aa>
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d025      	beq.n	8005312 <UART_SetConfig+0x162>
 80052c6:	2b08      	cmp	r3, #8
 80052c8:	d037      	beq.n	800533a <UART_SetConfig+0x18a>
 80052ca:	e046      	b.n	800535a <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052cc:	f7fe ff16 	bl	80040fc <HAL_RCC_GetPCLK1Freq>
 80052d0:	0003      	movs	r3, r0
 80052d2:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	005a      	lsls	r2, r3, #1
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	085b      	lsrs	r3, r3, #1
 80052de:	18d2      	adds	r2, r2, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	0019      	movs	r1, r3
 80052e6:	0010      	movs	r0, r2
 80052e8:	f7fa ff0e 	bl	8000108 <__udivsi3>
 80052ec:	0003      	movs	r3, r0
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	61bb      	str	r3, [r7, #24]
        break;
 80052f2:	e037      	b.n	8005364 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	085b      	lsrs	r3, r3, #1
 80052fa:	4a6d      	ldr	r2, [pc, #436]	; (80054b0 <UART_SetConfig+0x300>)
 80052fc:	189a      	adds	r2, r3, r2
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	0019      	movs	r1, r3
 8005304:	0010      	movs	r0, r2
 8005306:	f7fa feff 	bl	8000108 <__udivsi3>
 800530a:	0003      	movs	r3, r0
 800530c:	b29b      	uxth	r3, r3
 800530e:	61bb      	str	r3, [r7, #24]
        break;
 8005310:	e028      	b.n	8005364 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005312:	f7fe fe85 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 8005316:	0003      	movs	r3, r0
 8005318:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	005a      	lsls	r2, r3, #1
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	085b      	lsrs	r3, r3, #1
 8005324:	18d2      	adds	r2, r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	0019      	movs	r1, r3
 800532c:	0010      	movs	r0, r2
 800532e:	f7fa feeb 	bl	8000108 <__udivsi3>
 8005332:	0003      	movs	r3, r0
 8005334:	b29b      	uxth	r3, r3
 8005336:	61bb      	str	r3, [r7, #24]
        break;
 8005338:	e014      	b.n	8005364 <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	085b      	lsrs	r3, r3, #1
 8005340:	2280      	movs	r2, #128	; 0x80
 8005342:	0252      	lsls	r2, r2, #9
 8005344:	189a      	adds	r2, r3, r2
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	0019      	movs	r1, r3
 800534c:	0010      	movs	r0, r2
 800534e:	f7fa fedb 	bl	8000108 <__udivsi3>
 8005352:	0003      	movs	r3, r0
 8005354:	b29b      	uxth	r3, r3
 8005356:	61bb      	str	r3, [r7, #24]
        break;
 8005358:	e004      	b.n	8005364 <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 800535a:	2317      	movs	r3, #23
 800535c:	18fb      	adds	r3, r7, r3
 800535e:	2201      	movs	r2, #1
 8005360:	701a      	strb	r2, [r3, #0]
        break;
 8005362:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	2b0f      	cmp	r3, #15
 8005368:	d91b      	bls.n	80053a2 <UART_SetConfig+0x1f2>
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	4a51      	ldr	r2, [pc, #324]	; (80054b4 <UART_SetConfig+0x304>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d817      	bhi.n	80053a2 <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	b29a      	uxth	r2, r3
 8005376:	200a      	movs	r0, #10
 8005378:	183b      	adds	r3, r7, r0
 800537a:	210f      	movs	r1, #15
 800537c:	438a      	bics	r2, r1
 800537e:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	085b      	lsrs	r3, r3, #1
 8005384:	b29b      	uxth	r3, r3
 8005386:	2207      	movs	r2, #7
 8005388:	4013      	ands	r3, r2
 800538a:	b299      	uxth	r1, r3
 800538c:	183b      	adds	r3, r7, r0
 800538e:	183a      	adds	r2, r7, r0
 8005390:	8812      	ldrh	r2, [r2, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	183a      	adds	r2, r7, r0
 800539c:	8812      	ldrh	r2, [r2, #0]
 800539e:	60da      	str	r2, [r3, #12]
 80053a0:	e06c      	b.n	800547c <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80053a2:	2317      	movs	r3, #23
 80053a4:	18fb      	adds	r3, r7, r3
 80053a6:	2201      	movs	r2, #1
 80053a8:	701a      	strb	r2, [r3, #0]
 80053aa:	e067      	b.n	800547c <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 80053ac:	231f      	movs	r3, #31
 80053ae:	18fb      	adds	r3, r7, r3
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d01b      	beq.n	80053ee <UART_SetConfig+0x23e>
 80053b6:	dc02      	bgt.n	80053be <UART_SetConfig+0x20e>
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d005      	beq.n	80053c8 <UART_SetConfig+0x218>
 80053bc:	e049      	b.n	8005452 <UART_SetConfig+0x2a2>
 80053be:	2b04      	cmp	r3, #4
 80053c0:	d024      	beq.n	800540c <UART_SetConfig+0x25c>
 80053c2:	2b08      	cmp	r3, #8
 80053c4:	d035      	beq.n	8005432 <UART_SetConfig+0x282>
 80053c6:	e044      	b.n	8005452 <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053c8:	f7fe fe98 	bl	80040fc <HAL_RCC_GetPCLK1Freq>
 80053cc:	0003      	movs	r3, r0
 80053ce:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	085a      	lsrs	r2, r3, #1
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	18d2      	adds	r2, r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	0019      	movs	r1, r3
 80053e0:	0010      	movs	r0, r2
 80053e2:	f7fa fe91 	bl	8000108 <__udivsi3>
 80053e6:	0003      	movs	r3, r0
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	61bb      	str	r3, [r7, #24]
        break;
 80053ec:	e036      	b.n	800545c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	085b      	lsrs	r3, r3, #1
 80053f4:	4a30      	ldr	r2, [pc, #192]	; (80054b8 <UART_SetConfig+0x308>)
 80053f6:	189a      	adds	r2, r3, r2
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	0019      	movs	r1, r3
 80053fe:	0010      	movs	r0, r2
 8005400:	f7fa fe82 	bl	8000108 <__udivsi3>
 8005404:	0003      	movs	r3, r0
 8005406:	b29b      	uxth	r3, r3
 8005408:	61bb      	str	r3, [r7, #24]
        break;
 800540a:	e027      	b.n	800545c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800540c:	f7fe fe08 	bl	8004020 <HAL_RCC_GetSysClockFreq>
 8005410:	0003      	movs	r3, r0
 8005412:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	085a      	lsrs	r2, r3, #1
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	18d2      	adds	r2, r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	0019      	movs	r1, r3
 8005424:	0010      	movs	r0, r2
 8005426:	f7fa fe6f 	bl	8000108 <__udivsi3>
 800542a:	0003      	movs	r3, r0
 800542c:	b29b      	uxth	r3, r3
 800542e:	61bb      	str	r3, [r7, #24]
        break;
 8005430:	e014      	b.n	800545c <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	085b      	lsrs	r3, r3, #1
 8005438:	2280      	movs	r2, #128	; 0x80
 800543a:	0212      	lsls	r2, r2, #8
 800543c:	189a      	adds	r2, r3, r2
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	0019      	movs	r1, r3
 8005444:	0010      	movs	r0, r2
 8005446:	f7fa fe5f 	bl	8000108 <__udivsi3>
 800544a:	0003      	movs	r3, r0
 800544c:	b29b      	uxth	r3, r3
 800544e:	61bb      	str	r3, [r7, #24]
        break;
 8005450:	e004      	b.n	800545c <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 8005452:	2317      	movs	r3, #23
 8005454:	18fb      	adds	r3, r7, r3
 8005456:	2201      	movs	r2, #1
 8005458:	701a      	strb	r2, [r3, #0]
        break;
 800545a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	2b0f      	cmp	r3, #15
 8005460:	d908      	bls.n	8005474 <UART_SetConfig+0x2c4>
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	4a13      	ldr	r2, [pc, #76]	; (80054b4 <UART_SetConfig+0x304>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d804      	bhi.n	8005474 <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	60da      	str	r2, [r3, #12]
 8005472:	e003      	b.n	800547c <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 8005474:	2317      	movs	r3, #23
 8005476:	18fb      	adds	r3, r7, r3
 8005478:	2201      	movs	r2, #1
 800547a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005488:	2317      	movs	r3, #23
 800548a:	18fb      	adds	r3, r7, r3
 800548c:	781b      	ldrb	r3, [r3, #0]
}
 800548e:	0018      	movs	r0, r3
 8005490:	46bd      	mov	sp, r7
 8005492:	b008      	add	sp, #32
 8005494:	bd80      	pop	{r7, pc}
 8005496:	46c0      	nop			; (mov r8, r8)
 8005498:	ffff69f3 	.word	0xffff69f3
 800549c:	ffffcfff 	.word	0xffffcfff
 80054a0:	fffff4ff 	.word	0xfffff4ff
 80054a4:	40013800 	.word	0x40013800
 80054a8:	40021000 	.word	0x40021000
 80054ac:	40004400 	.word	0x40004400
 80054b0:	00f42400 	.word	0x00f42400
 80054b4:	0000ffff 	.word	0x0000ffff
 80054b8:	007a1200 	.word	0x007a1200

080054bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	2201      	movs	r2, #1
 80054ca:	4013      	ands	r3, r2
 80054cc:	d00b      	beq.n	80054e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	4a4a      	ldr	r2, [pc, #296]	; (8005600 <UART_AdvFeatureConfig+0x144>)
 80054d6:	4013      	ands	r3, r2
 80054d8:	0019      	movs	r1, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ea:	2202      	movs	r2, #2
 80054ec:	4013      	ands	r3, r2
 80054ee:	d00b      	beq.n	8005508 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	4a43      	ldr	r2, [pc, #268]	; (8005604 <UART_AdvFeatureConfig+0x148>)
 80054f8:	4013      	ands	r3, r2
 80054fa:	0019      	movs	r1, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	2204      	movs	r2, #4
 800550e:	4013      	ands	r3, r2
 8005510:	d00b      	beq.n	800552a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	4a3b      	ldr	r2, [pc, #236]	; (8005608 <UART_AdvFeatureConfig+0x14c>)
 800551a:	4013      	ands	r3, r2
 800551c:	0019      	movs	r1, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800552e:	2208      	movs	r2, #8
 8005530:	4013      	ands	r3, r2
 8005532:	d00b      	beq.n	800554c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	4a34      	ldr	r2, [pc, #208]	; (800560c <UART_AdvFeatureConfig+0x150>)
 800553c:	4013      	ands	r3, r2
 800553e:	0019      	movs	r1, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	430a      	orrs	r2, r1
 800554a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	2210      	movs	r2, #16
 8005552:	4013      	ands	r3, r2
 8005554:	d00b      	beq.n	800556e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	4a2c      	ldr	r2, [pc, #176]	; (8005610 <UART_AdvFeatureConfig+0x154>)
 800555e:	4013      	ands	r3, r2
 8005560:	0019      	movs	r1, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005572:	2220      	movs	r2, #32
 8005574:	4013      	ands	r3, r2
 8005576:	d00b      	beq.n	8005590 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	4a25      	ldr	r2, [pc, #148]	; (8005614 <UART_AdvFeatureConfig+0x158>)
 8005580:	4013      	ands	r3, r2
 8005582:	0019      	movs	r1, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	430a      	orrs	r2, r1
 800558e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005594:	2240      	movs	r2, #64	; 0x40
 8005596:	4013      	ands	r3, r2
 8005598:	d01d      	beq.n	80055d6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	4a1d      	ldr	r2, [pc, #116]	; (8005618 <UART_AdvFeatureConfig+0x15c>)
 80055a2:	4013      	ands	r3, r2
 80055a4:	0019      	movs	r1, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055b6:	2380      	movs	r3, #128	; 0x80
 80055b8:	035b      	lsls	r3, r3, #13
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d10b      	bne.n	80055d6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	4a15      	ldr	r2, [pc, #84]	; (800561c <UART_AdvFeatureConfig+0x160>)
 80055c6:	4013      	ands	r3, r2
 80055c8:	0019      	movs	r1, r3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	430a      	orrs	r2, r1
 80055d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055da:	2280      	movs	r2, #128	; 0x80
 80055dc:	4013      	ands	r3, r2
 80055de:	d00b      	beq.n	80055f8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	4a0e      	ldr	r2, [pc, #56]	; (8005620 <UART_AdvFeatureConfig+0x164>)
 80055e8:	4013      	ands	r3, r2
 80055ea:	0019      	movs	r1, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	430a      	orrs	r2, r1
 80055f6:	605a      	str	r2, [r3, #4]
  }
}
 80055f8:	46c0      	nop			; (mov r8, r8)
 80055fa:	46bd      	mov	sp, r7
 80055fc:	b002      	add	sp, #8
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	fffdffff 	.word	0xfffdffff
 8005604:	fffeffff 	.word	0xfffeffff
 8005608:	fffbffff 	.word	0xfffbffff
 800560c:	ffff7fff 	.word	0xffff7fff
 8005610:	ffffefff 	.word	0xffffefff
 8005614:	ffffdfff 	.word	0xffffdfff
 8005618:	ffefffff 	.word	0xffefffff
 800561c:	ff9fffff 	.word	0xff9fffff
 8005620:	fff7ffff 	.word	0xfff7ffff

08005624 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b086      	sub	sp, #24
 8005628:	af02      	add	r7, sp, #8
 800562a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005632:	f7fd fb39 	bl	8002ca8 <HAL_GetTick>
 8005636:	0003      	movs	r3, r0
 8005638:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2208      	movs	r2, #8
 8005642:	4013      	ands	r3, r2
 8005644:	2b08      	cmp	r3, #8
 8005646:	d10d      	bne.n	8005664 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	2380      	movs	r3, #128	; 0x80
 800564c:	0399      	lsls	r1, r3, #14
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	4b16      	ldr	r3, [pc, #88]	; (80056ac <UART_CheckIdleState+0x88>)
 8005652:	9300      	str	r3, [sp, #0]
 8005654:	0013      	movs	r3, r2
 8005656:	2200      	movs	r2, #0
 8005658:	f000 f82a 	bl	80056b0 <UART_WaitOnFlagUntilTimeout>
 800565c:	1e03      	subs	r3, r0, #0
 800565e:	d001      	beq.n	8005664 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e01f      	b.n	80056a4 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2204      	movs	r2, #4
 800566c:	4013      	ands	r3, r2
 800566e:	2b04      	cmp	r3, #4
 8005670:	d10d      	bne.n	800568e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	2380      	movs	r3, #128	; 0x80
 8005676:	03d9      	lsls	r1, r3, #15
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	4b0c      	ldr	r3, [pc, #48]	; (80056ac <UART_CheckIdleState+0x88>)
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	0013      	movs	r3, r2
 8005680:	2200      	movs	r2, #0
 8005682:	f000 f815 	bl	80056b0 <UART_WaitOnFlagUntilTimeout>
 8005686:	1e03      	subs	r3, r0, #0
 8005688:	d001      	beq.n	800568e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e00a      	b.n	80056a4 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2220      	movs	r2, #32
 8005692:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2220      	movs	r2, #32
 8005698:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2270      	movs	r2, #112	; 0x70
 800569e:	2100      	movs	r1, #0
 80056a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80056a2:	2300      	movs	r3, #0
}
 80056a4:	0018      	movs	r0, r3
 80056a6:	46bd      	mov	sp, r7
 80056a8:	b004      	add	sp, #16
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	01ffffff 	.word	0x01ffffff

080056b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	603b      	str	r3, [r7, #0]
 80056bc:	1dfb      	adds	r3, r7, #7
 80056be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056c0:	e05d      	b.n	800577e <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	3301      	adds	r3, #1
 80056c6:	d05a      	beq.n	800577e <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056c8:	f7fd faee 	bl	8002ca8 <HAL_GetTick>
 80056cc:	0002      	movs	r2, r0
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d302      	bcc.n	80056de <UART_WaitOnFlagUntilTimeout+0x2e>
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d11b      	bne.n	8005716 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	492f      	ldr	r1, [pc, #188]	; (80057a8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80056ea:	400a      	ands	r2, r1
 80056ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2101      	movs	r1, #1
 80056fa:	438a      	bics	r2, r1
 80056fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	2220      	movs	r2, #32
 8005702:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2220      	movs	r2, #32
 8005708:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2270      	movs	r2, #112	; 0x70
 800570e:	2100      	movs	r1, #0
 8005710:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e043      	b.n	800579e <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2204      	movs	r2, #4
 800571e:	4013      	ands	r3, r2
 8005720:	d02d      	beq.n	800577e <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	69da      	ldr	r2, [r3, #28]
 8005728:	2380      	movs	r3, #128	; 0x80
 800572a:	011b      	lsls	r3, r3, #4
 800572c:	401a      	ands	r2, r3
 800572e:	2380      	movs	r3, #128	; 0x80
 8005730:	011b      	lsls	r3, r3, #4
 8005732:	429a      	cmp	r2, r3
 8005734:	d123      	bne.n	800577e <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2280      	movs	r2, #128	; 0x80
 800573c:	0112      	lsls	r2, r2, #4
 800573e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4917      	ldr	r1, [pc, #92]	; (80057a8 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800574c:	400a      	ands	r2, r1
 800574e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	689a      	ldr	r2, [r3, #8]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	2101      	movs	r1, #1
 800575c:	438a      	bics	r2, r1
 800575e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2220      	movs	r2, #32
 8005764:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	2220      	movs	r2, #32
 800576a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2220      	movs	r2, #32
 8005770:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	2270      	movs	r2, #112	; 0x70
 8005776:	2100      	movs	r1, #0
 8005778:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 800577a:	2303      	movs	r3, #3
 800577c:	e00f      	b.n	800579e <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	69db      	ldr	r3, [r3, #28]
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	4013      	ands	r3, r2
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	425a      	negs	r2, r3
 800578e:	4153      	adcs	r3, r2
 8005790:	b2db      	uxtb	r3, r3
 8005792:	001a      	movs	r2, r3
 8005794:	1dfb      	adds	r3, r7, #7
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	429a      	cmp	r2, r3
 800579a:	d092      	beq.n	80056c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	0018      	movs	r0, r3
 80057a0:	46bd      	mov	sp, r7
 80057a2:	b004      	add	sp, #16
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	46c0      	nop			; (mov r8, r8)
 80057a8:	fffffe5f 	.word	0xfffffe5f

080057ac <floorf>:
 80057ac:	b570      	push	{r4, r5, r6, lr}
 80057ae:	0045      	lsls	r5, r0, #1
 80057b0:	086e      	lsrs	r6, r5, #1
 80057b2:	0e2d      	lsrs	r5, r5, #24
 80057b4:	3d7f      	subs	r5, #127	; 0x7f
 80057b6:	0004      	movs	r4, r0
 80057b8:	2d16      	cmp	r5, #22
 80057ba:	dc24      	bgt.n	8005806 <floorf+0x5a>
 80057bc:	2d00      	cmp	r5, #0
 80057be:	da0e      	bge.n	80057de <floorf+0x32>
 80057c0:	4915      	ldr	r1, [pc, #84]	; (8005818 <floorf+0x6c>)
 80057c2:	f7fa fd7f 	bl	80002c4 <__aeabi_fadd>
 80057c6:	2100      	movs	r1, #0
 80057c8:	f7fa fd50 	bl	800026c <__aeabi_fcmpgt>
 80057cc:	2800      	cmp	r0, #0
 80057ce:	d004      	beq.n	80057da <floorf+0x2e>
 80057d0:	2c00      	cmp	r4, #0
 80057d2:	da1f      	bge.n	8005814 <floorf+0x68>
 80057d4:	2e00      	cmp	r6, #0
 80057d6:	d000      	beq.n	80057da <floorf+0x2e>
 80057d8:	4c10      	ldr	r4, [pc, #64]	; (800581c <floorf+0x70>)
 80057da:	1c20      	adds	r0, r4, #0
 80057dc:	e019      	b.n	8005812 <floorf+0x66>
 80057de:	4e10      	ldr	r6, [pc, #64]	; (8005820 <floorf+0x74>)
 80057e0:	412e      	asrs	r6, r5
 80057e2:	4206      	tst	r6, r0
 80057e4:	d015      	beq.n	8005812 <floorf+0x66>
 80057e6:	490c      	ldr	r1, [pc, #48]	; (8005818 <floorf+0x6c>)
 80057e8:	f7fa fd6c 	bl	80002c4 <__aeabi_fadd>
 80057ec:	2100      	movs	r1, #0
 80057ee:	f7fa fd3d 	bl	800026c <__aeabi_fcmpgt>
 80057f2:	2800      	cmp	r0, #0
 80057f4:	d0f1      	beq.n	80057da <floorf+0x2e>
 80057f6:	2c00      	cmp	r4, #0
 80057f8:	da03      	bge.n	8005802 <floorf+0x56>
 80057fa:	2380      	movs	r3, #128	; 0x80
 80057fc:	041b      	lsls	r3, r3, #16
 80057fe:	412b      	asrs	r3, r5
 8005800:	18e4      	adds	r4, r4, r3
 8005802:	43b4      	bics	r4, r6
 8005804:	e7e9      	b.n	80057da <floorf+0x2e>
 8005806:	4b07      	ldr	r3, [pc, #28]	; (8005824 <floorf+0x78>)
 8005808:	429e      	cmp	r6, r3
 800580a:	d902      	bls.n	8005812 <floorf+0x66>
 800580c:	1c01      	adds	r1, r0, #0
 800580e:	f7fa fd59 	bl	80002c4 <__aeabi_fadd>
 8005812:	bd70      	pop	{r4, r5, r6, pc}
 8005814:	2400      	movs	r4, #0
 8005816:	e7e0      	b.n	80057da <floorf+0x2e>
 8005818:	7149f2ca 	.word	0x7149f2ca
 800581c:	bf800000 	.word	0xbf800000
 8005820:	007fffff 	.word	0x007fffff
 8005824:	7f7fffff 	.word	0x7f7fffff

08005828 <atan2f>:
 8005828:	b510      	push	{r4, lr}
 800582a:	f000 f801 	bl	8005830 <__ieee754_atan2f>
 800582e:	bd10      	pop	{r4, pc}

08005830 <__ieee754_atan2f>:
 8005830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005832:	25ff      	movs	r5, #255	; 0xff
 8005834:	004a      	lsls	r2, r1, #1
 8005836:	9101      	str	r1, [sp, #4]
 8005838:	0852      	lsrs	r2, r2, #1
 800583a:	05ed      	lsls	r5, r5, #23
 800583c:	42aa      	cmp	r2, r5
 800583e:	dc04      	bgt.n	800584a <__ieee754_atan2f+0x1a>
 8005840:	0043      	lsls	r3, r0, #1
 8005842:	0007      	movs	r7, r0
 8005844:	085b      	lsrs	r3, r3, #1
 8005846:	42ab      	cmp	r3, r5
 8005848:	dd02      	ble.n	8005850 <__ieee754_atan2f+0x20>
 800584a:	f7fa fd3b 	bl	80002c4 <__aeabi_fadd>
 800584e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005850:	24fe      	movs	r4, #254	; 0xfe
 8005852:	05a4      	lsls	r4, r4, #22
 8005854:	42a1      	cmp	r1, r4
 8005856:	d102      	bne.n	800585e <__ieee754_atan2f+0x2e>
 8005858:	f000 f872 	bl	8005940 <atanf>
 800585c:	e7f7      	b.n	800584e <__ieee754_atan2f+0x1e>
 800585e:	2602      	movs	r6, #2
 8005860:	178c      	asrs	r4, r1, #30
 8005862:	4034      	ands	r4, r6
 8005864:	0fc6      	lsrs	r6, r0, #31
 8005866:	4334      	orrs	r4, r6
 8005868:	2b00      	cmp	r3, #0
 800586a:	d105      	bne.n	8005878 <__ieee754_atan2f+0x48>
 800586c:	2c02      	cmp	r4, #2
 800586e:	d050      	beq.n	8005912 <__ieee754_atan2f+0xe2>
 8005870:	2c03      	cmp	r4, #3
 8005872:	d1ec      	bne.n	800584e <__ieee754_atan2f+0x1e>
 8005874:	4829      	ldr	r0, [pc, #164]	; (800591c <__ieee754_atan2f+0xec>)
 8005876:	e7ea      	b.n	800584e <__ieee754_atan2f+0x1e>
 8005878:	2a00      	cmp	r2, #0
 800587a:	d103      	bne.n	8005884 <__ieee754_atan2f+0x54>
 800587c:	2f00      	cmp	r7, #0
 800587e:	da4a      	bge.n	8005916 <__ieee754_atan2f+0xe6>
 8005880:	4827      	ldr	r0, [pc, #156]	; (8005920 <__ieee754_atan2f+0xf0>)
 8005882:	e7e4      	b.n	800584e <__ieee754_atan2f+0x1e>
 8005884:	42aa      	cmp	r2, r5
 8005886:	d117      	bne.n	80058b8 <__ieee754_atan2f+0x88>
 8005888:	4293      	cmp	r3, r2
 800588a:	d10b      	bne.n	80058a4 <__ieee754_atan2f+0x74>
 800588c:	2c02      	cmp	r4, #2
 800588e:	d005      	beq.n	800589c <__ieee754_atan2f+0x6c>
 8005890:	2c03      	cmp	r4, #3
 8005892:	d005      	beq.n	80058a0 <__ieee754_atan2f+0x70>
 8005894:	2c01      	cmp	r4, #1
 8005896:	d13a      	bne.n	800590e <__ieee754_atan2f+0xde>
 8005898:	4822      	ldr	r0, [pc, #136]	; (8005924 <__ieee754_atan2f+0xf4>)
 800589a:	e7d8      	b.n	800584e <__ieee754_atan2f+0x1e>
 800589c:	4822      	ldr	r0, [pc, #136]	; (8005928 <__ieee754_atan2f+0xf8>)
 800589e:	e7d6      	b.n	800584e <__ieee754_atan2f+0x1e>
 80058a0:	4822      	ldr	r0, [pc, #136]	; (800592c <__ieee754_atan2f+0xfc>)
 80058a2:	e7d4      	b.n	800584e <__ieee754_atan2f+0x1e>
 80058a4:	2c02      	cmp	r4, #2
 80058a6:	d034      	beq.n	8005912 <__ieee754_atan2f+0xe2>
 80058a8:	2c03      	cmp	r4, #3
 80058aa:	d0e3      	beq.n	8005874 <__ieee754_atan2f+0x44>
 80058ac:	2000      	movs	r0, #0
 80058ae:	2c01      	cmp	r4, #1
 80058b0:	d1cd      	bne.n	800584e <__ieee754_atan2f+0x1e>
 80058b2:	2080      	movs	r0, #128	; 0x80
 80058b4:	0600      	lsls	r0, r0, #24
 80058b6:	e7ca      	b.n	800584e <__ieee754_atan2f+0x1e>
 80058b8:	42ab      	cmp	r3, r5
 80058ba:	d0df      	beq.n	800587c <__ieee754_atan2f+0x4c>
 80058bc:	1a9b      	subs	r3, r3, r2
 80058be:	15db      	asrs	r3, r3, #23
 80058c0:	2b3c      	cmp	r3, #60	; 0x3c
 80058c2:	dc14      	bgt.n	80058ee <__ieee754_atan2f+0xbe>
 80058c4:	2900      	cmp	r1, #0
 80058c6:	da01      	bge.n	80058cc <__ieee754_atan2f+0x9c>
 80058c8:	333c      	adds	r3, #60	; 0x3c
 80058ca:	db12      	blt.n	80058f2 <__ieee754_atan2f+0xc2>
 80058cc:	f7fa fe94 	bl	80005f8 <__aeabi_fdiv>
 80058d0:	f000 f948 	bl	8005b64 <fabsf>
 80058d4:	f000 f834 	bl	8005940 <atanf>
 80058d8:	2c01      	cmp	r4, #1
 80058da:	d00c      	beq.n	80058f6 <__ieee754_atan2f+0xc6>
 80058dc:	2c02      	cmp	r4, #2
 80058de:	d00e      	beq.n	80058fe <__ieee754_atan2f+0xce>
 80058e0:	2c00      	cmp	r4, #0
 80058e2:	d0b4      	beq.n	800584e <__ieee754_atan2f+0x1e>
 80058e4:	4912      	ldr	r1, [pc, #72]	; (8005930 <__ieee754_atan2f+0x100>)
 80058e6:	f7fa fced 	bl	80002c4 <__aeabi_fadd>
 80058ea:	4912      	ldr	r1, [pc, #72]	; (8005934 <__ieee754_atan2f+0x104>)
 80058ec:	e00c      	b.n	8005908 <__ieee754_atan2f+0xd8>
 80058ee:	4812      	ldr	r0, [pc, #72]	; (8005938 <__ieee754_atan2f+0x108>)
 80058f0:	e7f2      	b.n	80058d8 <__ieee754_atan2f+0xa8>
 80058f2:	2000      	movs	r0, #0
 80058f4:	e7f0      	b.n	80058d8 <__ieee754_atan2f+0xa8>
 80058f6:	2380      	movs	r3, #128	; 0x80
 80058f8:	061b      	lsls	r3, r3, #24
 80058fa:	18c0      	adds	r0, r0, r3
 80058fc:	e7a7      	b.n	800584e <__ieee754_atan2f+0x1e>
 80058fe:	490c      	ldr	r1, [pc, #48]	; (8005930 <__ieee754_atan2f+0x100>)
 8005900:	f7fa fce0 	bl	80002c4 <__aeabi_fadd>
 8005904:	1c01      	adds	r1, r0, #0
 8005906:	480b      	ldr	r0, [pc, #44]	; (8005934 <__ieee754_atan2f+0x104>)
 8005908:	f7fb f980 	bl	8000c0c <__aeabi_fsub>
 800590c:	e79f      	b.n	800584e <__ieee754_atan2f+0x1e>
 800590e:	480b      	ldr	r0, [pc, #44]	; (800593c <__ieee754_atan2f+0x10c>)
 8005910:	e79d      	b.n	800584e <__ieee754_atan2f+0x1e>
 8005912:	4808      	ldr	r0, [pc, #32]	; (8005934 <__ieee754_atan2f+0x104>)
 8005914:	e79b      	b.n	800584e <__ieee754_atan2f+0x1e>
 8005916:	4808      	ldr	r0, [pc, #32]	; (8005938 <__ieee754_atan2f+0x108>)
 8005918:	e799      	b.n	800584e <__ieee754_atan2f+0x1e>
 800591a:	46c0      	nop			; (mov r8, r8)
 800591c:	c0490fdb 	.word	0xc0490fdb
 8005920:	bfc90fdb 	.word	0xbfc90fdb
 8005924:	bf490fdb 	.word	0xbf490fdb
 8005928:	4016cbe4 	.word	0x4016cbe4
 800592c:	c016cbe4 	.word	0xc016cbe4
 8005930:	33bbbd2e 	.word	0x33bbbd2e
 8005934:	40490fdb 	.word	0x40490fdb
 8005938:	3fc90fdb 	.word	0x3fc90fdb
 800593c:	3f490fdb 	.word	0x3f490fdb

08005940 <atanf>:
 8005940:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005942:	4b71      	ldr	r3, [pc, #452]	; (8005b08 <atanf+0x1c8>)
 8005944:	0045      	lsls	r5, r0, #1
 8005946:	1c04      	adds	r4, r0, #0
 8005948:	9001      	str	r0, [sp, #4]
 800594a:	086d      	lsrs	r5, r5, #1
 800594c:	429d      	cmp	r5, r3
 800594e:	dd0f      	ble.n	8005970 <atanf+0x30>
 8005950:	23ff      	movs	r3, #255	; 0xff
 8005952:	05db      	lsls	r3, r3, #23
 8005954:	429d      	cmp	r5, r3
 8005956:	dd04      	ble.n	8005962 <atanf+0x22>
 8005958:	1c01      	adds	r1, r0, #0
 800595a:	f7fa fcb3 	bl	80002c4 <__aeabi_fadd>
 800595e:	1c04      	adds	r4, r0, #0
 8005960:	e004      	b.n	800596c <atanf+0x2c>
 8005962:	9b01      	ldr	r3, [sp, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	dc00      	bgt.n	800596a <atanf+0x2a>
 8005968:	e0cb      	b.n	8005b02 <atanf+0x1c2>
 800596a:	4c68      	ldr	r4, [pc, #416]	; (8005b0c <atanf+0x1cc>)
 800596c:	1c20      	adds	r0, r4, #0
 800596e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005970:	4b67      	ldr	r3, [pc, #412]	; (8005b10 <atanf+0x1d0>)
 8005972:	429d      	cmp	r5, r3
 8005974:	dc0e      	bgt.n	8005994 <atanf+0x54>
 8005976:	4b67      	ldr	r3, [pc, #412]	; (8005b14 <atanf+0x1d4>)
 8005978:	429d      	cmp	r5, r3
 800597a:	dc08      	bgt.n	800598e <atanf+0x4e>
 800597c:	4966      	ldr	r1, [pc, #408]	; (8005b18 <atanf+0x1d8>)
 800597e:	f7fa fca1 	bl	80002c4 <__aeabi_fadd>
 8005982:	21fe      	movs	r1, #254	; 0xfe
 8005984:	0589      	lsls	r1, r1, #22
 8005986:	f7fa fc71 	bl	800026c <__aeabi_fcmpgt>
 800598a:	2800      	cmp	r0, #0
 800598c:	d1ee      	bne.n	800596c <atanf+0x2c>
 800598e:	2501      	movs	r5, #1
 8005990:	426d      	negs	r5, r5
 8005992:	e01b      	b.n	80059cc <atanf+0x8c>
 8005994:	f000 f8e6 	bl	8005b64 <fabsf>
 8005998:	4b60      	ldr	r3, [pc, #384]	; (8005b1c <atanf+0x1dc>)
 800599a:	1c04      	adds	r4, r0, #0
 800599c:	429d      	cmp	r5, r3
 800599e:	dc7b      	bgt.n	8005a98 <atanf+0x158>
 80059a0:	4b5f      	ldr	r3, [pc, #380]	; (8005b20 <atanf+0x1e0>)
 80059a2:	429d      	cmp	r5, r3
 80059a4:	dc67      	bgt.n	8005a76 <atanf+0x136>
 80059a6:	1c01      	adds	r1, r0, #0
 80059a8:	f7fa fc8c 	bl	80002c4 <__aeabi_fadd>
 80059ac:	21fe      	movs	r1, #254	; 0xfe
 80059ae:	0589      	lsls	r1, r1, #22
 80059b0:	f7fb f92c 	bl	8000c0c <__aeabi_fsub>
 80059b4:	2180      	movs	r1, #128	; 0x80
 80059b6:	1c05      	adds	r5, r0, #0
 80059b8:	05c9      	lsls	r1, r1, #23
 80059ba:	1c20      	adds	r0, r4, #0
 80059bc:	f7fa fc82 	bl	80002c4 <__aeabi_fadd>
 80059c0:	1c01      	adds	r1, r0, #0
 80059c2:	1c28      	adds	r0, r5, #0
 80059c4:	f7fa fe18 	bl	80005f8 <__aeabi_fdiv>
 80059c8:	2500      	movs	r5, #0
 80059ca:	1c04      	adds	r4, r0, #0
 80059cc:	1c21      	adds	r1, r4, #0
 80059ce:	1c20      	adds	r0, r4, #0
 80059d0:	f7fa ffea 	bl	80009a8 <__aeabi_fmul>
 80059d4:	1c01      	adds	r1, r0, #0
 80059d6:	1c07      	adds	r7, r0, #0
 80059d8:	f7fa ffe6 	bl	80009a8 <__aeabi_fmul>
 80059dc:	4951      	ldr	r1, [pc, #324]	; (8005b24 <atanf+0x1e4>)
 80059de:	1c06      	adds	r6, r0, #0
 80059e0:	f7fa ffe2 	bl	80009a8 <__aeabi_fmul>
 80059e4:	4950      	ldr	r1, [pc, #320]	; (8005b28 <atanf+0x1e8>)
 80059e6:	f7fa fc6d 	bl	80002c4 <__aeabi_fadd>
 80059ea:	1c31      	adds	r1, r6, #0
 80059ec:	f7fa ffdc 	bl	80009a8 <__aeabi_fmul>
 80059f0:	494e      	ldr	r1, [pc, #312]	; (8005b2c <atanf+0x1ec>)
 80059f2:	f7fa fc67 	bl	80002c4 <__aeabi_fadd>
 80059f6:	1c31      	adds	r1, r6, #0
 80059f8:	f7fa ffd6 	bl	80009a8 <__aeabi_fmul>
 80059fc:	494c      	ldr	r1, [pc, #304]	; (8005b30 <atanf+0x1f0>)
 80059fe:	f7fa fc61 	bl	80002c4 <__aeabi_fadd>
 8005a02:	1c31      	adds	r1, r6, #0
 8005a04:	f7fa ffd0 	bl	80009a8 <__aeabi_fmul>
 8005a08:	494a      	ldr	r1, [pc, #296]	; (8005b34 <atanf+0x1f4>)
 8005a0a:	f7fa fc5b 	bl	80002c4 <__aeabi_fadd>
 8005a0e:	1c31      	adds	r1, r6, #0
 8005a10:	f7fa ffca 	bl	80009a8 <__aeabi_fmul>
 8005a14:	4948      	ldr	r1, [pc, #288]	; (8005b38 <atanf+0x1f8>)
 8005a16:	f7fa fc55 	bl	80002c4 <__aeabi_fadd>
 8005a1a:	1c39      	adds	r1, r7, #0
 8005a1c:	f7fa ffc4 	bl	80009a8 <__aeabi_fmul>
 8005a20:	4946      	ldr	r1, [pc, #280]	; (8005b3c <atanf+0x1fc>)
 8005a22:	1c07      	adds	r7, r0, #0
 8005a24:	1c30      	adds	r0, r6, #0
 8005a26:	f7fa ffbf 	bl	80009a8 <__aeabi_fmul>
 8005a2a:	4945      	ldr	r1, [pc, #276]	; (8005b40 <atanf+0x200>)
 8005a2c:	f7fb f8ee 	bl	8000c0c <__aeabi_fsub>
 8005a30:	1c31      	adds	r1, r6, #0
 8005a32:	f7fa ffb9 	bl	80009a8 <__aeabi_fmul>
 8005a36:	4943      	ldr	r1, [pc, #268]	; (8005b44 <atanf+0x204>)
 8005a38:	f7fb f8e8 	bl	8000c0c <__aeabi_fsub>
 8005a3c:	1c31      	adds	r1, r6, #0
 8005a3e:	f7fa ffb3 	bl	80009a8 <__aeabi_fmul>
 8005a42:	4941      	ldr	r1, [pc, #260]	; (8005b48 <atanf+0x208>)
 8005a44:	f7fb f8e2 	bl	8000c0c <__aeabi_fsub>
 8005a48:	1c31      	adds	r1, r6, #0
 8005a4a:	f7fa ffad 	bl	80009a8 <__aeabi_fmul>
 8005a4e:	493f      	ldr	r1, [pc, #252]	; (8005b4c <atanf+0x20c>)
 8005a50:	f7fb f8dc 	bl	8000c0c <__aeabi_fsub>
 8005a54:	1c31      	adds	r1, r6, #0
 8005a56:	f7fa ffa7 	bl	80009a8 <__aeabi_fmul>
 8005a5a:	1c01      	adds	r1, r0, #0
 8005a5c:	1c38      	adds	r0, r7, #0
 8005a5e:	f7fa fc31 	bl	80002c4 <__aeabi_fadd>
 8005a62:	1c21      	adds	r1, r4, #0
 8005a64:	f7fa ffa0 	bl	80009a8 <__aeabi_fmul>
 8005a68:	1c6b      	adds	r3, r5, #1
 8005a6a:	d134      	bne.n	8005ad6 <atanf+0x196>
 8005a6c:	1c01      	adds	r1, r0, #0
 8005a6e:	1c20      	adds	r0, r4, #0
 8005a70:	f7fb f8cc 	bl	8000c0c <__aeabi_fsub>
 8005a74:	e773      	b.n	800595e <atanf+0x1e>
 8005a76:	21fe      	movs	r1, #254	; 0xfe
 8005a78:	0589      	lsls	r1, r1, #22
 8005a7a:	f7fb f8c7 	bl	8000c0c <__aeabi_fsub>
 8005a7e:	21fe      	movs	r1, #254	; 0xfe
 8005a80:	1c05      	adds	r5, r0, #0
 8005a82:	0589      	lsls	r1, r1, #22
 8005a84:	1c20      	adds	r0, r4, #0
 8005a86:	f7fa fc1d 	bl	80002c4 <__aeabi_fadd>
 8005a8a:	1c01      	adds	r1, r0, #0
 8005a8c:	1c28      	adds	r0, r5, #0
 8005a8e:	f7fa fdb3 	bl	80005f8 <__aeabi_fdiv>
 8005a92:	2501      	movs	r5, #1
 8005a94:	1c04      	adds	r4, r0, #0
 8005a96:	e799      	b.n	80059cc <atanf+0x8c>
 8005a98:	4b2d      	ldr	r3, [pc, #180]	; (8005b50 <atanf+0x210>)
 8005a9a:	429d      	cmp	r5, r3
 8005a9c:	dc14      	bgt.n	8005ac8 <atanf+0x188>
 8005a9e:	21ff      	movs	r1, #255	; 0xff
 8005aa0:	0589      	lsls	r1, r1, #22
 8005aa2:	f7fb f8b3 	bl	8000c0c <__aeabi_fsub>
 8005aa6:	21ff      	movs	r1, #255	; 0xff
 8005aa8:	1c05      	adds	r5, r0, #0
 8005aaa:	0589      	lsls	r1, r1, #22
 8005aac:	1c20      	adds	r0, r4, #0
 8005aae:	f7fa ff7b 	bl	80009a8 <__aeabi_fmul>
 8005ab2:	21fe      	movs	r1, #254	; 0xfe
 8005ab4:	0589      	lsls	r1, r1, #22
 8005ab6:	f7fa fc05 	bl	80002c4 <__aeabi_fadd>
 8005aba:	1c01      	adds	r1, r0, #0
 8005abc:	1c28      	adds	r0, r5, #0
 8005abe:	f7fa fd9b 	bl	80005f8 <__aeabi_fdiv>
 8005ac2:	2502      	movs	r5, #2
 8005ac4:	1c04      	adds	r4, r0, #0
 8005ac6:	e781      	b.n	80059cc <atanf+0x8c>
 8005ac8:	1c01      	adds	r1, r0, #0
 8005aca:	4822      	ldr	r0, [pc, #136]	; (8005b54 <atanf+0x214>)
 8005acc:	f7fa fd94 	bl	80005f8 <__aeabi_fdiv>
 8005ad0:	2503      	movs	r5, #3
 8005ad2:	1c04      	adds	r4, r0, #0
 8005ad4:	e77a      	b.n	80059cc <atanf+0x8c>
 8005ad6:	4b20      	ldr	r3, [pc, #128]	; (8005b58 <atanf+0x218>)
 8005ad8:	00ad      	lsls	r5, r5, #2
 8005ada:	58e9      	ldr	r1, [r5, r3]
 8005adc:	f7fb f896 	bl	8000c0c <__aeabi_fsub>
 8005ae0:	1c21      	adds	r1, r4, #0
 8005ae2:	f7fb f893 	bl	8000c0c <__aeabi_fsub>
 8005ae6:	4b1d      	ldr	r3, [pc, #116]	; (8005b5c <atanf+0x21c>)
 8005ae8:	1c01      	adds	r1, r0, #0
 8005aea:	58e8      	ldr	r0, [r5, r3]
 8005aec:	f7fb f88e 	bl	8000c0c <__aeabi_fsub>
 8005af0:	9b01      	ldr	r3, [sp, #4]
 8005af2:	1c04      	adds	r4, r0, #0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	db00      	blt.n	8005afa <atanf+0x1ba>
 8005af8:	e738      	b.n	800596c <atanf+0x2c>
 8005afa:	2380      	movs	r3, #128	; 0x80
 8005afc:	061b      	lsls	r3, r3, #24
 8005afe:	18c4      	adds	r4, r0, r3
 8005b00:	e734      	b.n	800596c <atanf+0x2c>
 8005b02:	4c17      	ldr	r4, [pc, #92]	; (8005b60 <atanf+0x220>)
 8005b04:	e732      	b.n	800596c <atanf+0x2c>
 8005b06:	46c0      	nop			; (mov r8, r8)
 8005b08:	507fffff 	.word	0x507fffff
 8005b0c:	3fc90fdb 	.word	0x3fc90fdb
 8005b10:	3edfffff 	.word	0x3edfffff
 8005b14:	30ffffff 	.word	0x30ffffff
 8005b18:	7149f2ca 	.word	0x7149f2ca
 8005b1c:	3f97ffff 	.word	0x3f97ffff
 8005b20:	3f2fffff 	.word	0x3f2fffff
 8005b24:	3c8569d7 	.word	0x3c8569d7
 8005b28:	3d4bda59 	.word	0x3d4bda59
 8005b2c:	3d886b35 	.word	0x3d886b35
 8005b30:	3dba2e6e 	.word	0x3dba2e6e
 8005b34:	3e124925 	.word	0x3e124925
 8005b38:	3eaaaaab 	.word	0x3eaaaaab
 8005b3c:	bd15a221 	.word	0xbd15a221
 8005b40:	3d6ef16b 	.word	0x3d6ef16b
 8005b44:	3d9d8795 	.word	0x3d9d8795
 8005b48:	3de38e38 	.word	0x3de38e38
 8005b4c:	3e4ccccd 	.word	0x3e4ccccd
 8005b50:	401bffff 	.word	0x401bffff
 8005b54:	bf800000 	.word	0xbf800000
 8005b58:	08005d2c 	.word	0x08005d2c
 8005b5c:	08005d1c 	.word	0x08005d1c
 8005b60:	bfc90fdb 	.word	0xbfc90fdb

08005b64 <fabsf>:
 8005b64:	0040      	lsls	r0, r0, #1
 8005b66:	0840      	lsrs	r0, r0, #1
 8005b68:	4770      	bx	lr
	...

08005b6c <__libc_init_array>:
 8005b6c:	b570      	push	{r4, r5, r6, lr}
 8005b6e:	2600      	movs	r6, #0
 8005b70:	4d0c      	ldr	r5, [pc, #48]	; (8005ba4 <__libc_init_array+0x38>)
 8005b72:	4c0d      	ldr	r4, [pc, #52]	; (8005ba8 <__libc_init_array+0x3c>)
 8005b74:	1b64      	subs	r4, r4, r5
 8005b76:	10a4      	asrs	r4, r4, #2
 8005b78:	42a6      	cmp	r6, r4
 8005b7a:	d109      	bne.n	8005b90 <__libc_init_array+0x24>
 8005b7c:	2600      	movs	r6, #0
 8005b7e:	f000 f821 	bl	8005bc4 <_init>
 8005b82:	4d0a      	ldr	r5, [pc, #40]	; (8005bac <__libc_init_array+0x40>)
 8005b84:	4c0a      	ldr	r4, [pc, #40]	; (8005bb0 <__libc_init_array+0x44>)
 8005b86:	1b64      	subs	r4, r4, r5
 8005b88:	10a4      	asrs	r4, r4, #2
 8005b8a:	42a6      	cmp	r6, r4
 8005b8c:	d105      	bne.n	8005b9a <__libc_init_array+0x2e>
 8005b8e:	bd70      	pop	{r4, r5, r6, pc}
 8005b90:	00b3      	lsls	r3, r6, #2
 8005b92:	58eb      	ldr	r3, [r5, r3]
 8005b94:	4798      	blx	r3
 8005b96:	3601      	adds	r6, #1
 8005b98:	e7ee      	b.n	8005b78 <__libc_init_array+0xc>
 8005b9a:	00b3      	lsls	r3, r6, #2
 8005b9c:	58eb      	ldr	r3, [r5, r3]
 8005b9e:	4798      	blx	r3
 8005ba0:	3601      	adds	r6, #1
 8005ba2:	e7f2      	b.n	8005b8a <__libc_init_array+0x1e>
 8005ba4:	08005d3c 	.word	0x08005d3c
 8005ba8:	08005d3c 	.word	0x08005d3c
 8005bac:	08005d3c 	.word	0x08005d3c
 8005bb0:	08005d40 	.word	0x08005d40

08005bb4 <memset>:
 8005bb4:	0003      	movs	r3, r0
 8005bb6:	1812      	adds	r2, r2, r0
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d100      	bne.n	8005bbe <memset+0xa>
 8005bbc:	4770      	bx	lr
 8005bbe:	7019      	strb	r1, [r3, #0]
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	e7f9      	b.n	8005bb8 <memset+0x4>

08005bc4 <_init>:
 8005bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc6:	46c0      	nop			; (mov r8, r8)
 8005bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bca:	bc08      	pop	{r3}
 8005bcc:	469e      	mov	lr, r3
 8005bce:	4770      	bx	lr

08005bd0 <_fini>:
 8005bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bd2:	46c0      	nop			; (mov r8, r8)
 8005bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bd6:	bc08      	pop	{r3}
 8005bd8:	469e      	mov	lr, r3
 8005bda:	4770      	bx	lr
